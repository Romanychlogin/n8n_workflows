{
  "createdAt": "2025-09-19T15:26:59.886Z",
  "updatedAt": "2025-10-18T15:56:00.258Z",
  "id": "SptAKErjQeOJuESk",
  "name": "status bot",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "updates": [
          "channel_post"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -16,
        -256
      ],
      "id": "4acb8c30-dfc3-4bc4-a743-f563360e1ea8",
      "name": "Telegram Trigger",
      "webhookId": "5b122ea1-1d7e-4dfa-93f4-1f18583ad57f",
      "credentials": {
        "telegramApi": {
          "id": "ttGHKrzQMaymkKXW",
          "name": "Telegram account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b943b53-d03b-436b-88ba-002dcbba5437",
              "name": "tete",
              "value": "eewef",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        192,
        -256
      ],
      "id": "4c8b1b4d-7059-4511-ad2c-5c56bebd3885",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "content": "Yandex_direct_incidents: -1003052639964\n\nYandex Direct Status:\n-1002955047432\n\nYandex direct github status\n-1003120484933",
        "height": 192
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        640,
        -464
      ],
      "id": "553230ff-426a-42e2-853a-135558a047cc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -32,
        224
      ],
      "id": "1195fc4d-aeb1-4eb5-b9bd-f2955c38c41a",
      "name": "Schedule Trigger for incidents"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select c.company_name,bp.business_process_name,bp.n8n_process_name,bt.business_process_state_id,bt.error_happened,bt.error_message from business_processes_states bt,business_processes bp, companies c where bt.company_id=c.company_id and bt.business_process_id=bp.business_process_id and bt.error_processed=false and error_happened is not null order by company_name,error_happened",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        176,
        224
      ],
      "id": "eeee89cd-f875-44f7-b34d-635098b62b13",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "583b006b-6ca8-4ce3-88f6-ce8b4d41125a",
      "name": "Schedule Trigger for statuses"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node (JavaScript)\n * Агрегирует инциденты по клиентам и делит вывод на чанки <= 4096 символов.\n * - Не режет инцидент посередине (инцидент — 2 строки).\n * - Если единичный инцидент > 4096, мягко делит внутри него с пометкой (продолжение).\n * - Выдаёт несколько выходных элементов, у каждого json.text — свой кусок.\n */\n\nconst MAX_LEN = 4096;          // жёсткий лимит на длину одного выходного элемента\nconst OUT_FIELD = 'text';      // поле для текста в выходном json\n\n// Экранирование под Telegram MarkdownV2\nfunction escapeMarkdownV2(s) {\n  // список из оф. доки Telegram для MarkdownV2:\n  // _ * [ ] ( ) ~ ` > # + - = | { } . !\n  return String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\n// Если хочешь жирный заголовок + текст, делай так:\nconst now = new Date();\n\nconst header = '*'+now.toLocaleTimeString('ru-RU', { timeZone:'Europe/Moscow', hour: '2-digit', minute: '2-digit' })+' MSK*';                 // уже корректный Markdown\n\n\n\n// Мягкое деление длинной строки на части <= maxLen, стараясь резать по \\n\\n, . , ! , ? , \\n , ' '\nfunction softSplit(str, maxLen) {\n  const parts = [];\n  let start = 0;\n  while (start < str.length) {\n    const end = Math.min(start + maxLen, str.length);\n    const slice = str.slice(start, end);\n\n    // поиск удобной точки разрыва\n    const candidates = [\n      '\\n\\n', '. ', '! ', '? ', '\\n', ' '\n    ];\n    let cut = -1;\n    for (const c of candidates) {\n      const i = slice.lastIndexOf(c);\n      if (i > cut) cut = i;\n    }\n\n    let take = cut >= 0 ? cut + 1 : slice.length;\n    // защита от пустого шага\n    if (take <= 0) take = slice.length;\n\n    parts.push(slice.slice(0, take));\n    start += take;\n  }\n  return parts;\n}\n\n// Пытаемся добавить фрагмент к текущему чанку, при переполнении — начинаем новый\nfunction tryAppendChunk(chunks, buffer, fragment) {\n  if ((buffer.current + fragment).length <= MAX_LEN) {\n    buffer.current += fragment;\n    return;\n  }\n\n  // Текущий буфер переполнится — закрываем его, начинаем новый\n  if (buffer.current) {\n    chunks.push(buffer.current.trimEnd());\n    buffer.current = '';\n  }\n\n  if (fragment.length <= MAX_LEN) {\n    buffer.current = fragment;\n    return;\n  }\n\n  // Крайний случай: один инцидент длиннее MAX_LEN — мягко делим внутри\n  const parts = softSplit(fragment, MAX_LEN);\n  for (let p = 0; p < parts.length; p++) {\n    const suffix = (p < parts.length - 1) ? ' (продолжение)\\n' : '';\n    const piece = parts[p] + suffix;\n    if ((buffer.current + piece).length > MAX_LEN && buffer.current) {\n      chunks.push(buffer.current.trimEnd());\n      buffer.current = '';\n    }\n    buffer.current = (buffer.current || '') + piece;\n  }\n}\n\n// --------- Основная логика ---------\nconst items = $input.all();\nconst chunks = [];\nconst buffer = { current: '' };\n\nlet lastClient = null;\n\n// Инициализация как в исходном коде: первая строка — \"Клиент: <имя>\"\nif (items.length > 0) {\n  lastClient = items[0].json.company_name;\n  tryAppendChunk(chunks, buffer, `Клиент: ${lastClient}`);\n}\n\nfor (const { json: i } of items) {\n  const client = i.company_name;\n\n  // Если сменился клиент — заголовок нового клиента\n  if (client !== lastClient) {\n    tryAppendChunk(chunks, buffer, `\\n\\nКлиент: ${client}`);\n    lastClient = client;\n  }\n\n  // Неделимый инцидент — 2 строки\n  const incidentBlock =\n    `\\nОшибка процесса: ${i.business_process_name} (${i.n8n_process_name})\\n` +\n    `в: ${i.error_happened}  описание: ${i.error_message}`;\n\n  tryAppendChunk(chunks, buffer, incidentBlock);\n}\n\n// Финальный сброс буфера\nif (buffer.current.trim().length > 0) {\n  chunks.push(buffer.current.trimEnd());\n}\n\n// Возвращаем один элемент на каждый чанк\nreturn chunks.map((text, idx) => ({\n  json: {\n    [OUT_FIELD]: header+'\\n'+escapeMarkdownV2(text),\n    chunk_index: idx,\n    chunks_total: chunks.length,\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        384,
        224
      ],
      "id": "d3aa0178-fed8-45ca-af67-3fb0ca701d01",
      "name": "Code in JavaScript",
      "executeOnce": false
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "business_processes_states",
          "mode": "list",
          "cachedResultName": "business_processes_states"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "error_processed": "={{ true }}",
            "business_process_state_id": "={{ $json.business_process_state_id }}"
          },
          "matchingColumns": [
            "business_process_state_id"
          ],
          "schema": [
            {
              "id": "business_process_state_id",
              "displayName": "business_process_state_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "business_process_id",
              "displayName": "business_process_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "started",
              "displayName": "started",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "finished",
              "displayName": "finished",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_message",
              "displayName": "error_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "tokens_used",
              "displayName": "tokens_used",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "tokens_used_type",
              "displayName": "tokens_used_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "steps_total",
              "displayName": "steps_total",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "steps_passed",
              "displayName": "steps_passed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_happened",
              "displayName": "error_happened",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "n8n_workflow_execution_id",
              "displayName": "n8n_workflow_execution_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "n8n_workflow_root_execution_id",
              "displayName": "n8n_workflow_root_execution_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_processed",
              "displayName": "error_processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        400,
        384
      ],
      "id": "f4c28d66-3e67-4359-8e10-147a06b34475",
      "name": "Update rows in a table",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Code node (перед Telegram Send)\n// Берём исходный текст, например из предыдущего узла:\nconst src = $input.item.json.incident_text ??  '—';\n\n// Экранирование под Telegram MarkdownV2\nfunction escapeMarkdownV2(s) {\n  // список из оф. доки Telegram для MarkdownV2:\n  // _ * [ ] ( ) ~ ` > # + - = | { } . !\n  return String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\n// Если хочешь жирный заголовок + текст, делай так:\nconst now = new Date();\n\nconst header = '*'+now.toLocaleTimeString('ru-RU', { timeZone:'Europe/Moscow', hour: '2-digit', minute: '2-digit' })+' MSK*';                 // уже корректный Markdown\nconst body   = escapeMarkdownV2(src);          // «опасный» произвольный текст\n\nconst text = `${header}\\n${body}`;\n\nreturn [{ json: { text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        224
      ],
      "id": "81e88932-ea57-469d-9f07-12b0a3ffd2af",
      "name": "Code in JavaScript1",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  c.company_name,\n  bp.business_process_name,\n  bp.n8n_process_name,\n  bt.business_process_state_id,\n  bt.started,\n  bt.steps_total,\n  bt.steps_passed,\n  COALESCE(bt2.started - bt.started, now()- bt.started)                 AS execution_time,\n  now() - bt2.started               AS execution_time_nf,\n  bt2.steps_total                   AS steps_total_nf,\n  bt2.steps_passed                  AS steps_passed_nf,\n  CASE WHEN bt2.business_process_state_id IS NOT NULL THEN 1 ELSE 0 END AS nf_exists\nFROM business_processes_states AS bt\nJOIN business_processes       AS bp ON bt.business_process_id = bp.business_process_id\nJOIN companies                AS c  ON bt.company_id = c.company_id\nLEFT JOIN business_processes_states AS bt2\n       ON bt.n8n_workflow_execution_id = bt2.n8n_workflow_root_execution_id\nWHERE bt.finished IS NULL\n  AND bt.error_happened IS NULL\n  AND now() - bt.started > interval '5 minutes'\nORDER BY c.company_name, bt.started;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        224,
        0
      ],
      "id": "be97a6d0-0a6f-4d49-8af2-61e268db92e5",
      "name": "Execute a SQL query1",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let incident_text = 'Для клиента: ';\nlet client_name = $input.first().json.company_name;\n// Экранирование под Telegram MarkdownV2\nfunction escapeMarkdownV2(s) {\n  // список из оф. доки Telegram для MarkdownV2:\n  // _ * [ ] ( ) ~ ` > # + - = | { } . !\n  return String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n// ФУНКЦИИ для «оставшегося времени»\nfunction remainingSecondsNF(i) {\n  // если NF нет — 0\n  if (!i.nf_exists || i.execution_time_nf == null || i.steps_total_nf == null) return 0;\n\n  const done = Number(i.steps_passed_nf || 0);\n  const total = Number(i.steps_total_nf || 0);\n  if (done <= 0 || total <= 0 || done >= total) return 0;\n\n  const elapsedSec = toSeconds(i.execution_time_nf); // сколько уже отработал NF\n  const avgPerStep = elapsedSec / done;\n  const leftSteps = total - done;\n  return Math.max(0, Math.round(avgPerStep * leftSteps));\n}\n\nfunction remainingSecondsBase(i) {\n  // считаем ТОЛЬКО базовые шаги, исключая NF-шаг\n  const nf = Number(i.nf_exists || 0);\n  const passedBase = Math.max(0, Number(i.steps_passed || 0) - nf);\n  const totalBase  = Math.max(0, Number(i.steps_total  || 0) - nf);\n  const leftBase   = Math.max(0, totalBase - passedBase);\n\n  if (leftBase === 0) return 0;                // нечего оставлять\n  if (passedBase <= 0) return 0;               // нет базы для оценивания средней скорости\n\n  const elapsedSec = toSeconds(i.execution_time || 0);\n  const avgPerStep = elapsedSec / passedBase;  // средняя по БАЗЕ\n  return Math.max(0, Math.round(avgPerStep * leftBase));\n}\nfunction formatSeconds(sec) {\n  const totalMinutes = Math.floor(sec / 60);\n\n  if (totalMinutes < 60) {\n    return `${totalMinutes} мин`;\n  } else {\n    const h = Math.floor(totalMinutes / 60);\n    const m = totalMinutes % 60;\n    return m ? `${h} ч ${m} мин` : `${h} ч`;\n  }\n}\nfunction toSeconds(exec) {\n  const days = Number(exec.days || 0);\n  const hours = Number(exec.hours || 0);\n  const minutes = Number(exec.minutes || 0);\n  const seconds = Number(exec.seconds || 0);\n  const ms = Number(exec.milliseconds || 0);\n\n  const totalMs =\n    (((days * 24 + hours) * 60 + minutes) * 60 + seconds) * 1000 + ms;\n\n  return Math.round(totalMs / 1000);\n}\n\n// Универсальный форматтер: \"до часа — X мин\", \"больше часа — H ч M мин\"\nfunction formatDurationToHM(input) {\n  const ms = toMilliseconds(input);\n  const totalMinutes = Math.round(ms / 60000);\n\n  if (totalMinutes < 60) {\n    return `${totalMinutes} мин`;\n  } else {\n    const h = Math.floor(totalMinutes / 60);\n    const m = totalMinutes % 60;\n    return m ? `${h} ч ${m} мин` : `${h} ч`;\n  }\n}\n\n// ---- Парсеры ----\nfunction toMilliseconds(v) {\n  if (v == null) throw new Error('No duration provided');\n\n  // 1) Объект со свойствами\n  if (typeof v === 'object' && !Array.isArray(v)) {\n    const h = num(v.hours);\n    const m = num(v.minutes);\n    const s = num(v.seconds);\n    const ms = num(v.milliseconds);\n    return ((h*3600 + m*60 + s) * 1000) + ms;\n  }\n\n  // 2) Число: миллисекунды (если маленькое целое — трактуем как секунды)\n  if (typeof v === 'number') {\n    if (Number.isInteger(v) && Math.abs(v) < 1e6) return v * 1000; // секундные значения\n    return v; // миллисекунды\n  }\n\n  // 3) Строки\n  if (typeof v === 'string') {\n    const s = v.trim();\n\n    // 3.1 ISO 8601: PT#H#M#S\n    const iso = /^P(T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)$/i.exec(s);\n    if (iso) {\n      const h = num(iso[1]); // в этой группе вся \"T...\", нам нужны 2..4 — поправим:\n    }\n    const iso2 = /^PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$/i.exec(s);\n    if (iso2) {\n      const h = num(iso2[1]);\n      const m = num(iso2[2]);\n      const sec = num(iso2[3]);\n      return ((h*3600 + m*60 + sec) * 1000);\n    }\n\n    // 3.2 HH:MM:SS(.sss) или MM:SS(.sss)\n    const hms = /^(\\d{1,2}):([0-5]?\\d)(?::([0-5]?\\d(?:\\.\\d+)?))?$/.exec(s);\n    if (hms) {\n      const a = hms[1], b = hms[2], c = hms[3];\n      let h = 0, m = 0, sec = 0;\n      if (c != null) { // HH:MM:SS\n        h = num(a); m = num(b); sec = num(c);\n      } else {         // MM:SS\n        m = num(a); sec = num(b);\n      }\n      return ((h*3600 + m*60 + sec) * 1000);\n    }\n\n    // 3.3 Человеческие: \"1h 3m 44.6s\", \"3m44s\", \"90s\"\n    const human = /^\\s*(?:(\\d+)\\s*h)?\\s*(?:(\\d+)\\s*m)?\\s*(?:(\\d+(?:\\.\\d+)?)\\s*s)?\\s*$/i.exec(s.replace(/,/g,'.'));\n    if (human && (human[1] || human[2] || human[3])) {\n      const h = num(human[1]);\n      const m = num(human[2]);\n      const sec = num(human[3]);\n      return ((h*3600 + m*60 + sec) * 1000);\n    }\n\n    // 3.4 Чистое число в строке → сек/мс\n    if (/^\\d+(\\.\\d+)?$/.test(s)) {\n      const val = Number(s);\n      return (Number.isInteger(val) && val < 1e6) ? val * 1000 : val;\n    }\n\n    throw new Error('Unsupported duration format: ' + s);\n  }\n\n  throw new Error('Unsupported input type: ' + typeof v);\n}\n\nfunction num(x) { return x ? Number(x) : 0; }\nincident_text += '*'+client_name+'*';\n\nfor (const { json: i } of $input.all()) {\n  let started= Date(i.started);\n  if (i.company_name === client_name) {\n    incident_text += '\\nПроцесс:' +'*'+ i.business_process_name +'*'+ escapeMarkdownV2( '(' + i.n8n_process_name +')\\n');\n    incident_text +=escapeMarkdownV2('выполнение:'+formatDurationToHM(i.execution_time)+' ' + (i.steps_passed ?? 0) +'/'+ (i.steps_total ?? 0) )  + ' *' +\n      escapeMarkdownV2( \n        Math.round(((i.steps_passed ?? 0)/(i.steps_total ?? 1))*100) +\n        Math.round(((i.steps_passed_nf ?? 0)/(i.steps_total_nf ?? 1))*100/i.steps_total) +'%') + '*' + ' осталось:'+\n      formatSeconds(remainingSecondsNF(i) + remainingSecondsBase(i));\n  } else {\n    client_name = i.company_name;\n    incident_text += `\\n\\nДля клиента: *${client_name}*`;\n    incident_text += '\\nПроцесс:' +'*'+ i.business_process_name +'*'+ escapeMarkdownV2( '(' + i.n8n_process_name +')\\n');\n    incident_text +=escapeMarkdownV2('выполнение:'+formatDurationToHM(i.execution_time)+' ' + (i.steps_passed ?? 0) +'/'+ (i.steps_total ?? 0) ) + ' *' + escapeMarkdownV2( \n        Math.round(((i.steps_passed ?? 0)/(i.steps_total ?? 1))*100) +\n        Math.round(((i.steps_passed_nf ?? 0)/(i.steps_total_nf ?? 1))*100/i.steps_total) +'%') + '*'+ ' осталось:'+ formatSeconds(remainingSecondsNF(i) + remainingSecondsBase(i));\n  }\n}\n\nreturn [{ json: { text: incident_text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        0
      ],
      "id": "fa6fa91a-5f54-4edd-b810-7fb8826a71b7",
      "name": "Code in JavaScript2",
      "executeOnce": false
    },
    {
      "parameters": {
        "content": "Добавить: вынести настройки из скриптов"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        944,
        -208
      ],
      "id": "b1ab1165-cdbb-4a9c-93da-8ac845654793",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select c.company_name,bp.business_process_name,bp.n8n_process_name,bt.business_process_state_id,bt.started, bt.steps_total,bt.steps_passed, bt.finished-bt.started AS execution_time  \nfrom business_processes_states bt,business_processes bp, companies c \nwhere bt.company_id=c.company_id and bt.business_process_id=bp.business_process_id and bt.finished is not null and error_happened is null and error_processed<>true and bt.finished-bt.started > interval '5 minutes' order by company_name,error_happened",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        224,
        624
      ],
      "id": "aefdc04c-c0f6-49bd-aa34-45405e1f859b",
      "name": "Execute a SQL query2",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let incident_text = '*Процессы завершены\\n*Клиент: ';\nlet client_name = $input.first().json.company_name;\n// Экранирование под Telegram MarkdownV2\nfunction escapeMarkdownV2(s) {\n  // список из оф. доки Telegram для MarkdownV2:\n  // _ * [ ] ( ) ~ ` > # + - = | { } . !\n  return String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n// Универсальный форматтер: \"до часа — X мин\", \"больше часа — H ч M мин\"\nfunction formatDurationToHM(input) {\n  const ms = toMilliseconds(input);\n  const totalMinutes = Math.round(ms / 60000);\n\n  if (totalMinutes < 60) {\n    return `${totalMinutes} мин`;\n  } else {\n    const h = Math.floor(totalMinutes / 60);\n    const m = totalMinutes % 60;\n    return m ? `${h} ч ${m} мин` : `${h} ч`;\n  }\n}\n\n// ---- Парсеры ----\nfunction toMilliseconds(v) {\n  if (v == null) throw new Error('No duration provided');\n\n  // 1) Объект со свойствами\n  if (typeof v === 'object' && !Array.isArray(v)) {\n    const h = num(v.hours);\n    const m = num(v.minutes);\n    const s = num(v.seconds);\n    const ms = num(v.milliseconds);\n    return ((h*3600 + m*60 + s) * 1000) + ms;\n  }\n\n  // 2) Число: миллисекунды (если маленькое целое — трактуем как секунды)\n  if (typeof v === 'number') {\n    if (Number.isInteger(v) && Math.abs(v) < 1e6) return v * 1000; // секундные значения\n    return v; // миллисекунды\n  }\n\n  // 3) Строки\n  if (typeof v === 'string') {\n    const s = v.trim();\n\n    // 3.1 ISO 8601: PT#H#M#S\n    const iso = /^P(T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)$/i.exec(s);\n    if (iso) {\n      const h = num(iso[1]); // в этой группе вся \"T...\", нам нужны 2..4 — поправим:\n    }\n    const iso2 = /^PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$/i.exec(s);\n    if (iso2) {\n      const h = num(iso2[1]);\n      const m = num(iso2[2]);\n      const sec = num(iso2[3]);\n      return ((h*3600 + m*60 + sec) * 1000);\n    }\n\n    // 3.2 HH:MM:SS(.sss) или MM:SS(.sss)\n    const hms = /^(\\d{1,2}):([0-5]?\\d)(?::([0-5]?\\d(?:\\.\\d+)?))?$/.exec(s);\n    if (hms) {\n      const a = hms[1], b = hms[2], c = hms[3];\n      let h = 0, m = 0, sec = 0;\n      if (c != null) { // HH:MM:SS\n        h = num(a); m = num(b); sec = num(c);\n      } else {         // MM:SS\n        m = num(a); sec = num(b);\n      }\n      return ((h*3600 + m*60 + sec) * 1000);\n    }\n\n    // 3.3 Человеческие: \"1h 3m 44.6s\", \"3m44s\", \"90s\"\n    const human = /^\\s*(?:(\\d+)\\s*h)?\\s*(?:(\\d+)\\s*m)?\\s*(?:(\\d+(?:\\.\\d+)?)\\s*s)?\\s*$/i.exec(s.replace(/,/g,'.'));\n    if (human && (human[1] || human[2] || human[3])) {\n      const h = num(human[1]);\n      const m = num(human[2]);\n      const sec = num(human[3]);\n      return ((h*3600 + m*60 + sec) * 1000);\n    }\n\n    // 3.4 Чистое число в строке → сек/мс\n    if (/^\\d+(\\.\\d+)?$/.test(s)) {\n      const val = Number(s);\n      return (Number.isInteger(val) && val < 1e6) ? val * 1000 : val;\n    }\n\n    throw new Error('Unsupported duration format: ' + s);\n  }\n\n  throw new Error('Unsupported input type: ' + typeof v);\n}\n\nfunction num(x) { return x ? Number(x) : 0; }\n\nincident_text += '*'+client_name+'*';\n\nfor (const { json: i } of $input.all()) {\n  let started= Date(i.started);\n  if (i.company_name === client_name) {\n    incident_text +=escapeMarkdownV2( '\\nПроцесс:' + i.business_process_name + '(' + i.n8n_process_name +')\\n');\n    incident_text +=escapeMarkdownV2('выполнен за:' + formatDurationToHM(i.execution_time));\n  } else {\n    client_name = i.company_name;\n    incident_text += `\\n\\nКлиент: *${client_name}*`;\n    incident_text +=escapeMarkdownV2( '\\nПроцесс:' + i.business_process_name + '(' + i.n8n_process_name +')\\n');\n    incident_text +=escapeMarkdownV2('выполнен за:' + formatDurationToHM(i.execution_time));\n  }\n}\n\nreturn [{ json: { text: incident_text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        624
      ],
      "id": "fe4f7dc1-682f-4b37-ac9b-479f9118b087",
      "name": "Code in JavaScript3",
      "executeOnce": false
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        624
      ],
      "id": "77941827-d4c4-4bac-b2e8-fb91b9989957",
      "name": "Schedule Trigger for completed processes"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "business_processes_states",
          "mode": "list",
          "cachedResultName": "business_processes_states"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "error_processed": "={{ true }}",
            "business_process_state_id": "={{ $json.business_process_state_id }}"
          },
          "matchingColumns": [
            "business_process_state_id"
          ],
          "schema": [
            {
              "id": "business_process_state_id",
              "displayName": "business_process_state_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "business_process_id",
              "displayName": "business_process_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "started",
              "displayName": "started",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "finished",
              "displayName": "finished",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_message",
              "displayName": "error_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "tokens_used",
              "displayName": "tokens_used",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "tokens_used_type",
              "displayName": "tokens_used_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "steps_total",
              "displayName": "steps_total",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "steps_passed",
              "displayName": "steps_passed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_happened",
              "displayName": "error_happened",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "n8n_workflow_execution_id",
              "displayName": "n8n_workflow_execution_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "n8n_workflow_root_execution_id",
              "displayName": "n8n_workflow_root_execution_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_processed",
              "displayName": "error_processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        368,
        784
      ],
      "id": "c8d6152d-eed8-48f8-8cb4-4816c5996ac1",
      "name": "Update rows in a table1",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        800,
        224
      ],
      "id": "6dd870be-4815-4b69-a598-e8f93b02f8eb",
      "name": "Execute a SQL query3",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "-1003196763261",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": true,
          "parse_mode": "MarkdownV2",
          "message_thread_id": 5
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1024,
        224
      ],
      "id": "0c37a958-5699-4e95-a4d7-98872a8d44ea",
      "name": "Send a incident message",
      "webhookId": "a18d9a87-250a-437a-9193-952ef1cc833c",
      "credentials": {
        "telegramApi": {
          "id": "ttGHKrzQMaymkKXW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "-1003196763261",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": true,
          "parse_mode": "MarkdownV2",
          "message_thread_id": 6
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        864,
        0
      ],
      "id": "dc5915db-df1e-41b0-b45f-b5f75faa8a2d",
      "name": "Send a status message",
      "webhookId": "a18d9a87-250a-437a-9193-952ef1cc833c",
      "credentials": {
        "telegramApi": {
          "id": "ttGHKrzQMaymkKXW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "-1003196763261",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": true,
          "parse_mode": "MarkdownV2",
          "message_thread_id": 6
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        688,
        624
      ],
      "id": "00b54578-a6dc-4233-b485-606eed3e939c",
      "name": "Send a status message for completed workflows",
      "webhookId": "a18d9a87-250a-437a-9193-952ef1cc833c",
      "credentials": {
        "telegramApi": {
          "id": "ttGHKrzQMaymkKXW",
          "name": "Telegram account"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger for incidents": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger for statuses": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Execute a SQL query3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Send a status message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query2": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Send a status message for completed workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger for completed processes": {
      "main": [
        [
          {
            "node": "Execute a SQL query2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query3": {
      "main": [
        [
          {
            "node": "Send a incident message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataSuccessExecution": "none",
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    },
    "node:Schedule Trigger for incidents": {
      "recurrenceRules": []
    },
    "node:Schedule Trigger for statuses": {
      "recurrenceRules": []
    },
    "node:Schedule Trigger for completed processes": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Schedule Trigger for statuses": [
      {
        "json": {
          "timestamp": "2025-09-22T13:57:59.064+03:00",
          "Readable date": "September 22nd 2025, 1:57:59 pm",
          "Readable time": "1:57:59 pm",
          "Day of week": "Monday",
          "Year": "2025",
          "Month": "September",
          "Day of month": "22",
          "Hour": "13",
          "Minute": "57",
          "Second": "59",
          "Timezone": "Europe/Moscow (UTC+03:00)"
        }
      }
    ],
    "Telegram Trigger": [
      {
        "json": {
          "update_id": 965439204,
          "channel_post": {
            "message_id": 180,
            "sender_chat": {
              "id": -1003052639964,
              "title": "Yandex Direct Incidents",
              "type": "channel"
            },
            "chat": {
              "id": -1003052639964,
              "title": "Yandex Direct Incidents",
              "type": "channel"
            },
            "date": 1759149220,
            "text": "test"
          }
        }
      }
    ],
    "Schedule Trigger for incidents": [
      {
        "json": {
          "timestamp": "2025-10-18T11:37:01.003+03:00",
          "Readable date": "October 18th 2025, 11:37:01 am",
          "Readable time": "11:37:01 am",
          "Day of week": "Saturday",
          "Year": "2025",
          "Month": "October",
          "Day of month": "18",
          "Hour": "11",
          "Minute": "37",
          "Second": "01",
          "Timezone": "Europe/Moscow (UTC+03:00)"
        }
      }
    ]
  },
  "versionId": "e05e8861-2e66-48ae-8bd4-634046a7c661",
  "triggerCount": 3,
  "shared": [
    {
      "createdAt": "2025-09-19T15:26:59.886Z",
      "updatedAt": "2025-09-19T15:26:59.886Z",
      "role": "workflow:owner",
      "workflowId": "SptAKErjQeOJuESk",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}