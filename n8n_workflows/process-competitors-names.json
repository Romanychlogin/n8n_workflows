{
  "createdAt": "2025-08-27T14:14:54.596Z",
  "updatedAt": "2025-08-29T14:17:28.886Z",
  "id": "KbY4QoiqvIowjYRd",
  "name": "Process competitors names",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -544,
        0
      ],
      "id": "026fa6d8-9091-4d62-aef6-219aacecc538",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "competitor_variants.txt",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -304,
        0
      ],
      "id": "d93eb6b0-f2b6-48b5-a8d6-2b8897c22a4e",
      "name": "Get a file1",
      "webhookId": "e0b720c8-2799-49a3-94c0-bafd86b0922c",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -96,
        0
      ],
      "id": "4f667b31-f155-4eb5-8ef3-65df0ad55c4c",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        0
      ],
      "id": "27bb1030-9508-459c-af50-f2f78444e4e5",
      "name": "HTTP Request",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "competitor_name_variants",
          "mode": "list",
          "cachedResultName": "competitor_name_variants"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "competitor_id": "={{ $json.competitor_id }}",
            "name_text": "={{ $json.name_variant }}",
            "is_coomon_word": false
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "competitor_id",
              "displayName": "competitor_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "is_coomon_word",
              "displayName": "is_coomon_word",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name_text",
              "displayName": "name_text",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "embedding",
              "displayName": "embedding",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "options",
              "canBeUsedToMatch": true,
              "options": [],
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2400,
        -16
      ],
      "id": "77fa773d-bd81-41b2-939b-9d002663704c",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nconst firstItem = workflowData.competitors_prompt;\nreturn [{\n  json: {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"Отвечай только валидным JSON-массивом объектов в формате: [{\\\"competitor_name_variant\\\": string}]. Не добавляй комментариев или форматирования вне JSON.\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"Для компании \" + $input.first().json.canonical_name + \" с сайтом \" + $input.first().json.competitor_url + \" \" + firstItem.data\n        }\n      ]\n    }\n  ],\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"company_name_variants\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"variants\": {\n            \"type\": \"array\",\n            \"description\": \"An array containing all company name variants, each as a non-empty string.\",\n            \"items\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          }\n        },\n        \"required\": [\n          \"variants\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"low\"\n  },\n  \"reasoning\": {\n    \"effort\": \"minimal\",\n    \"summary\": null\n  },\n  \"tools\": [],\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        752,
        16
      ],
      "id": "ba2b39f0-81fb-4d6a-8e11-9a47dd447cf6",
      "name": "Set API JSON"
    },
    {
      "parameters": {
        "jsCode": "// Берём первый item из входных данных\nconst input = JSON.parse($json.output[1].content[0].text);\nconst comp_id=$json.competitor_id\n// Достаём массив competitors\nconst variants = input.variants;\n\n// Разворачиваем каждый объект в отдельный item\nreturn variants.map((c, index) => ({\n  json: {\n    index,\n    name_variant: c.toLowerCase(),\n    competitor_id:comp_id,\n    is_first:index==0 // костыль для сброса цикла\n    \n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        0
      ],
      "id": "6f22373e-6b67-413e-ac6a-8229368c2d9a",
      "name": "Parse JSON"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.competitors_prompt = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        96,
        0
      ],
      "id": "c1409c0e-e7ae-4cab-9367-748d77986f1b",
      "name": "Save prompt"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "competitor_entities",
          "mode": "list",
          "cachedResultName": "competitor_entities"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "company_name",
              "value": "KIBERone Саратов Октябрьский"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        304,
        0
      ],
      "id": "d4966610-0236-44af-ae48-611d8ee0d448",
      "name": "Select rows from a table",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        512,
        0
      ],
      "id": "fc7381a7-7603-477d-950d-cd20b5c3dbef",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1248,
        -80
      ],
      "id": "d2ebf489-2744-4519-b4aa-ac66365509c3",
      "name": "Merge"
    },
    {
      "parameters": {
        "options": {
          "reset": "={{ $json.is_first }}"
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1984,
        -288
      ],
      "id": "7298142f-c6b1-4dd9-9272-0fb2cc99c6f7",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebafa31d-edf7-41c0-a06e-e884ad9595ea",
              "name": "is_first",
              "value": "=false",
              "type": "boolean"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2192,
        -192
      ],
      "id": "291c57cf-33ef-4309-a632-c618a7a59e53",
      "name": "reset first_item"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "errors",
          "mode": "list",
          "cachedResultName": "errors"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "error_text": "={{ $json.error.description }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "error_id",
              "displayName": "error_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_text",
              "displayName": "error_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2720,
        16
      ],
      "id": "2c58a0eb-0e0d-44d9-8cad-aa5d305f1634",
      "name": "Error",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    }
  ],
  "connections": {
    "Get a file1": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Save prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get a file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set API JSON": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save prompt": {
      "main": [
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set API JSON",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "reset first_item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reset first_item": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "cb631ebf-63df-4707-a356-e08556ec1f88",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-27T14:14:54.596Z",
      "updatedAt": "2025-08-27T14:14:54.596Z",
      "role": "workflow:owner",
      "workflowId": "KbY4QoiqvIowjYRd",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}