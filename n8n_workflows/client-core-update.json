{
  "createdAt": "2025-09-25T13:33:58.106Z",
  "updatedAt": "2025-09-25T13:33:58.106Z",
  "id": "0J5cvuaSz3IhDS99",
  "name": "client core update",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id, started)\nSELECT MAX(business_process_id), $2,$3, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -288,
        -240
      ],
      "id": "2340f56a-0cb1-4585-aaa7-bf32d049ce28",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -976,
        -240
      ],
      "id": "79e1968d-6af3-41b2-960c-b772a28673b8",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        -240
      ],
      "id": "89b4df6c-5de3-45ba-9b50-fbc5f5245174",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW() where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        768
      ],
      "id": "b17b1715-9e42-463a-8c41-afd0be86f727",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1888,
        -208
      ],
      "id": "99d71d6e-cfe3-4dec-b061-9b2ebf3ffeab",
      "name": "Mark_workflow_passed_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        -208
      ],
      "id": "9552a2ab-303b-4308-a515-72feaf01397c",
      "name": "Get current step saved"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        528,
        -240
      ],
      "id": "7cd397ec-4206-4b99-bbbf-5128d0c77b9d",
      "name": "Execute a SQL query",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": " company services",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        352,
        -240
      ],
      "id": "20818983-3a5d-4cb7-a22d-8474fef28751",
      "name": "set workflow name"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        720,
        -240
      ],
      "id": "83f4c0a4-25e6-4317-b9f2-5d47b7b51625",
      "name": "If SUB process  already executed",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1408,
        -224
      ],
      "id": "920939e8-55a3-4daa-8233-206e8b514781",
      "name": "Call SUB"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_total=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{ 2 }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        112,
        -240
      ],
      "id": "5ce7b086-0038-4390-abcf-b58812bed214",
      "name": "Mark_workflow_total_steps(manually)",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('set workflow name').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        960,
        -224
      ],
      "id": "3213d1a6-df60-43a3-81a6-793e13cb59b5",
      "name": "get workflow id by name",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('Execute a SQL query2').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "48e226e1-eec4-4875-abbe-f3bf61e9d335",
              "name": "company_name",
              "value": "={{ $('Set variables').item.json.company_name }}",
              "type": "string"
            },
            {
              "id": "4cf917dc-0b21-4e3e-817f-503d04a054c0",
              "name": "yandex_id",
              "value": "={{ $('Set variables').item.json.yandex_id }}",
              "type": "number"
            },
            {
              "id": "6c7abd86-fe5e-4fd8-9b45-8052122d62ee",
              "name": "yandex_region",
              "value": "={{ $('Set variables').item.json.yandex_region }}",
              "type": "string"
            },
            {
              "id": "608ffe3a-1151-49e8-9fd5-934995944be7",
              "name": "services_description_url",
              "value": "={{ $('Set variables').item.json.services_description_url}}",
              "type": "string"
            },
            {
              "id": "74ffc861-c15d-4994-bedd-a920ad81d955",
              "name": "user_content_dropbox_folder",
              "value": "={{ $('Set variables').item.json.user_content_dropbox_folder}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1152,
        -224
      ],
      "id": "edf1033c-e913-4b75-b448-04efc0a7a0d4",
      "name": "set input data for SUB"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5b3485a2-cb50-486a-932c-fc27de0a25da",
              "name": "company_name",
              "value": "Kartica Trebica",
              "type": "string"
            },
            {
              "id": "84d45310-3810-4151-88b4-4782f16e6319",
              "name": "company_url",
              "value": "https://karticatrebica.rs/stats-beta/",
              "type": "string"
            },
            {
              "id": "b6898b14-3324-4cee-a1ae-32b2d48b4afe",
              "name": "threshhold",
              "value": 0.88,
              "type": "number"
            },
            {
              "id": "f85ed5f7-e09e-4e66-8998-89d0d8058173",
              "name": "yandex_region",
              "value": "Сербия",
              "type": "string"
            },
            {
              "id": "748715ad-66a5-4f92-842f-c446553809cd",
              "name": "yandex_id",
              "value": 0,
              "type": "number"
            },
            {
              "id": "119ce8c7-ac5a-4e9f-9e21-a3a6a0282081",
              "name": "services_description_url",
              "value": "https://www.dropbox.com/scl/fi/90f3et27d0wd4w9waiui8/.txt?rlkey=bgnaia5wvs9ymss29ou0mf2dg&dl=1",
              "type": "string"
            },
            {
              "id": "8939fde5-d7b7-4679-a9dc-4c20aec9614d",
              "name": "user_content_dropbox_folder",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -736,
        -240
      ],
      "id": "ed207a6c-8ead-45ba-83a2-0719233fde5b",
      "name": "Set variables"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1872,
        368
      ],
      "id": "e5189338-9803-47e1-9337-544a1779709a",
      "name": "Mark_workflow_passed_steps1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1632,
        368
      ],
      "id": "5d593d2f-0a71-4666-bc59-28afc9293938",
      "name": "Get current step saved1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        816,
        256
      ],
      "id": "53259c0f-085f-4349-9335-2fba7762c93b",
      "name": "If SUB process  already executed1",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1392,
        368
      ],
      "id": "bf91914e-9db5-4b03-b247-39e129fb5f80",
      "name": "Call SUB1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADS headers and texts creation services').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1008,
        272
      ],
      "id": "62ab09bf-5748-4bf9-a19b-a517b3402799",
      "name": "get workflow id by name1",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('Execute a SQL query2').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "48e226e1-eec4-4875-abbe-f3bf61e9d335",
              "name": "company_name",
              "value": "={{ $('Set variables').item.json.company_name }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1200,
        368
      ],
      "id": "a437bc76-1110-4072-b33f-282c62ff42a4",
      "name": "set input data for SUB1"
    },
    {
      "parameters": {
        "content": "анализируем все !!не завершенные запуски!! основного процесса после предыдущего успешного завершения. Если для них подпроцесс успешно завершился то его повторно не дергаем",
        "height": 128,
        "width": 624
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -352,
        -496
      ],
      "id": "6f91ae8e-a1c0-472e-b6ee-8ae95589b0ea",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        656,
        256
      ],
      "id": "c6f0ea60-6d10-4fa0-88c6-e6be709846c3",
      "name": "Execute a SQL query1",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADS headers and texts creation services",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        464,
        256
      ],
      "id": "cf0b4dae-7648-4709-af1b-73cf0d71ff35",
      "name": "ADS headers and texts creation services"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.companies (company_name,company_url,yandex_id,yandex_region)\nVALUES ($1,$2,$3,$4)\nON CONFLICT (company_name)\nDO UPDATE SET company_name = EXCLUDED.company_name\nRETURNING company_id;",
        "options": {
          "queryReplacement": "=[{{$json.company_name}},{{$json.company_url}},{{$json.yandex_id}},{{$json.yandex_region}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -528,
        -240
      ],
      "id": "28a150df-98c6-4a18-9269-ce2b28ded185",
      "name": "Execute a SQL query2",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        0,
        256
      ],
      "id": "eed948e6-e4eb-4541-9dd6-8ca1f602cf48",
      "name": "Mark_skipped_workflow_passed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        256
      ],
      "id": "26a0ab34-4d46-40d1-bb63-651e3ace780a",
      "name": "Mark skipped step passed"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('set workflow name').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        224,
        256
      ],
      "id": "71a7db0e-57a1-4d38-8f5b-de955e3e46f3",
      "name": "update workflow tokens usage",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow 1\n",
        "height": 384,
        "width": 1712
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        336,
        -320
      ],
      "id": "6b814be9-3c3e-494c-a783-04a6c6cbcefa",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "workflow 1\n",
        "height": 448,
        "width": 1696
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        416,
        128
      ],
      "id": "6aef1b34-3568-442d-9e21-218e73296be6",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1824,
        960
      ],
      "id": "23221838-36a8-4236-9eba-951130563405",
      "name": "Mark_workflow_passed_steps2",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        960
      ],
      "id": "39547c28-0715-46cd-b251-fd7be964f87f",
      "name": "Get current step saved2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        768,
        848
      ],
      "id": "047cb79c-eace-41d8-a780-b5ab79b451b4",
      "name": "If SUB process  already executed2",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1344,
        960
      ],
      "id": "6f141fad-7704-40f6-aadc-55ec81933f7f",
      "name": "Call SUB2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADS headers and texts creation services1').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        960,
        864
      ],
      "id": "824bdb11-b803-4bb9-8975-74c59902c751",
      "name": "get workflow id by name2",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('Execute a SQL query2').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "48e226e1-eec4-4875-abbe-f3bf61e9d335",
              "name": "company_name",
              "value": "={{ $('Set variables').item.json.company_name }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1152,
        960
      ],
      "id": "8cf3b839-4cfe-466e-9796-6a005d0b2f4b",
      "name": "set input data for SUB2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        608,
        848
      ],
      "id": "5db93eb9-9927-4f64-8be0-0afdfa8981e8",
      "name": "Execute a SQL query3",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADS headers and texts creation services",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        416,
        848
      ],
      "id": "2d72e618-be8f-48d9-82aa-fea7801b728c",
      "name": "ADS headers and texts creation services1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -48,
        848
      ],
      "id": "d626f829-a622-4fd6-80c2-a782dc963e8f",
      "name": "Mark_skipped_workflow_passed1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        848
      ],
      "id": "20fe36b3-e385-4591-aaba-d976a046a3b7",
      "name": "Mark skipped step passed1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('set workflow name').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        176,
        848
      ],
      "id": "6d161fb8-4b77-443a-b50e-4ca5af6f3e98",
      "name": "update workflow tokens usage1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow 1\n",
        "height": 448,
        "width": 1696
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        368,
        720
      ],
      "id": "15d94c5e-0d82-4a90-a1f6-2d5202dcd634",
      "name": "Sticky Note3"
    }
  ],
  "connections": {
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Mark_workflow_total_steps(manually)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "If SUB process  already executed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set workflow name": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed": {
      "main": [
        [
          {
            "node": "Mark skipped step passed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB": {
      "main": [
        [
          {
            "node": "Get current step saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps": {
      "main": [
        [
          {
            "node": "update workflow tokens usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_total_steps(manually)": {
      "main": [
        [
          {
            "node": "set workflow name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name": {
      "main": [
        [
          {
            "node": "set input data for SUB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB": {
      "main": [
        [
          {
            "node": "Call SUB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set variables": {
      "main": [
        [
          {
            "node": "Execute a SQL query2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved1": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed1": {
      "main": [
        [
          {
            "node": "Mark skipped step passed1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB1": {
      "main": [
        [
          {
            "node": "Get current step saved1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name1": {
      "main": [
        [
          {
            "node": "set input data for SUB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB1": {
      "main": [
        [
          {
            "node": "Call SUB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps1": {
      "main": [
        [
          {
            "node": "update workflow tokens usage1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "If SUB process  already executed1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADS headers and texts creation services": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query2": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_skipped_workflow_passed": {
      "main": [
        [
          {
            "node": "update workflow tokens usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark skipped step passed": {
      "main": [
        [
          {
            "node": "Mark_skipped_workflow_passed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage": {
      "main": [
        [
          {
            "node": "ADS headers and texts creation services",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved2": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed2": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB2": {
      "main": [
        [
          {
            "node": "Get current step saved2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name2": {
      "main": [
        [
          {
            "node": "set input data for SUB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB2": {
      "main": [
        [
          {
            "node": "Call SUB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query3": {
      "main": [
        [
          {
            "node": "If SUB process  already executed2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADS headers and texts creation services1": {
      "main": [
        [
          {
            "node": "Execute a SQL query3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_skipped_workflow_passed1": {
      "main": [
        [
          {
            "node": "update workflow tokens usage1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark skipped step passed1": {
      "main": [
        [
          {
            "node": "Mark_skipped_workflow_passed1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage1": {
      "main": [
        [
          {
            "node": "ADS headers and texts creation services1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps2": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When clicking ‘Execute workflow’": [
      {
        "json": {}
      }
    ]
  },
  "versionId": "e72fd368-5f4d-4116-8c7d-2d2b9ae9c0da",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-25T13:33:58.106Z",
      "updatedAt": "2025-09-25T13:33:58.106Z",
      "role": "workflow:owner",
      "workflowId": "0J5cvuaSz3IhDS99",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}