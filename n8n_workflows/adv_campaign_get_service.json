{
  "createdAt": "2025-09-30T12:45:50.445Z",
  "updatedAt": "2025-09-30T12:45:50.445Z",
  "id": "c0NgmBzgLxUE7Wno",
  "name": "ADV_campaign_get_service",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1200,
        -96
      ],
      "id": "dfa5979e-0cd4-4975-b162-be64952ea21e",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_minus_words",
          "mode": "list",
          "cachedResultName": "current_minus_words"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "minus_word": "={{ $json.minus_word }}",
            "current_record_id": "={{ $('Loop Over Items').last().json.list_id }}",
            "company_id": "={{ $('Loop Over Items').last().json.company_id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "minus_id",
              "displayName": "minus_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "minus_word",
              "displayName": "minus_word",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_record_id",
              "displayName": "current_record_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "keep_minus",
              "displayName": "keep_minus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "minus_word_v2",
              "displayName": "minus_word_v2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "keep_minus_v2",
              "displayName": "keep_minus_v2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "comment",
              "displayName": "comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        10320,
        -240
      ],
      "id": "a43cdf2c-d2c8-4e52-bfa1-175be012a0ca",
      "name": "Insert minus words",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "что делаем по регулярной отчетности. Пока из  CSV. Потом - API\nНа вход - стандартный поисковый запрос + Заголовок объявления. Без дат!!!!"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -160,
        -880
      ],
      "id": "b7d8d148-58dd-4a90-b0d1-1adf90831967",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5db6f53d-c697-4fb8-8804-93f5c0a2fcca",
              "leftValue": "={{ $json.condition_type }}",
              "rightValue": "пословное",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1888,
        -208
      ],
      "id": "69c37a8f-1252-419e-8ed5-7917587cdc23",
      "name": "пословное соответствие?"
    },
    {
      "parameters": {
        "content": "Соответствие\n1)Если пословное то проверяем совпадение запроса с нашим ключом. \nа)совпадает(убираем кавычки у нашего ключа) - все ОК\nб)не совпадает - спрашиваем у чата релевантна ли нам фраза. Да - добавляем в ключи. Нет - добавляем в минус слова.\n2)Не пословное - спрашиваем у чата релевантна ли нам фраза. Да - добавляем в ключи. Нет - добавляем в минус слова."
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -480,
        -640
      ],
      "id": "7b4ea74d-8875-42ed-a43a-9cb103fb86af",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.same_key = item.json.key_word.replace(/[\\s\"]/g, '') === item.json.used_keyword.replace(/[\\s\"]/g, '');\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2288,
        -512
      ],
      "id": "01d9da59-ded0-40f2-a356-a8bbb6b5bdba",
      "name": "проверяем полное соответствие"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b59658e0-7426-4b0c-bb61-db52e84fc3cf",
              "leftValue": "={{ $json.same_key }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2848,
        -672
      ],
      "id": "fc8fd630-7f92-40dc-a29e-57a8e3e9e4de",
      "name": "Соответствие полное?"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_list",
          "mode": "list",
          "cachedResultName": "current_list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "resolution": "same key",
            "list_id": "={{ $('Loop Over Items').last().json.list_id }}"
          },
          "matchingColumns": [
            "list_id"
          ],
          "schema": [
            {
              "id": "list_id",
              "displayName": "list_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "key_word",
              "displayName": "key_word",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "campaign_id",
              "displayName": "campaign_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "used_keyword",
              "displayName": "used_keyword",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "group_id",
              "displayName": "group_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "condition_type",
              "displayName": "condition_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ads_header",
              "displayName": "ads_header",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ai_responce",
              "displayName": "ai_responce",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "resolution",
              "displayName": "resolution",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "count_views",
              "displayName": "count_views",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_clics",
              "displayName": "count_clics",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_convetions",
              "displayName": "count_convetions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        10800,
        -1696
      ],
      "id": "df0819ce-459a-4900-accb-89ca80023468",
      "name": "Помечаем что ключ совпадает",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_list",
          "mode": "list",
          "cachedResultName": "current_list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "resolution": "={{ $json.resolution}}",
            "list_id": "={{ $('Loop Over Items').last().json.list_id }}",
            "ai_response_tokens": "={{ $json.total_tokens }}"
          },
          "matchingColumns": [
            "list_id"
          ],
          "schema": [
            {
              "id": "list_id",
              "displayName": "list_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "key_word",
              "displayName": "key_word",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "campaign_id",
              "displayName": "campaign_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "used_keyword",
              "displayName": "used_keyword",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "group_id",
              "displayName": "group_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "condition_type",
              "displayName": "condition_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ads_header",
              "displayName": "ads_header",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "resolution",
              "displayName": "resolution",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "count_views",
              "displayName": "count_views",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_clics",
              "displayName": "count_clics",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_convetions",
              "displayName": "count_convetions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ai_response_tokens",
              "displayName": "ai_response_tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "report_id",
              "displayName": "report_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "service_id",
              "displayName": "service_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "is_adv_processed",
              "displayName": "is_adv_processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        10752,
        -480
      ],
      "id": "4a97fd60-fe89-4e03-821f-2c8c2fe58e49",
      "name": "update",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "60fdafa4-2c5e-4917-978b-dbc1a116f516",
              "leftValue": "={{ JSON.parse($json.output[1].content[0].text).is_correct_phrase }}",
              "rightValue": "true_phrase",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        7408,
        -464
      ],
      "id": "d3353133-80a6-4614-a171-f1a439016e40",
      "name": "Обработка ответа AI"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "keyword_analysis.txt",
        "additionalParameters": {},
        "path": "85c97ec7-9f5a-4b62-8e2c-a232dc218fec"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        192,
        -416
      ],
      "id": "d0b32a1d-22c5-456b-87b5-2ba62b9735f8",
      "name": "Get a file",
      "webhookId": "85c97ec7-9f5a-4b62-8e2c-a232dc218fec",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        400,
        -416
      ],
      "id": "6d1e0edf-13f6-4623-889f-3031df8614e6",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.my_prompt = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        -416
      ],
      "id": "c35da847-e090-4659-9909-53cc275050b2",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_list",
          "mode": "list",
          "cachedResultName": "current_list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "list_id": "={{ $('Loop Over Items').last().json.list_id }}",
            "resolution": "={{ \"найден конкурент: \"+$json.hits[0].matched+\", \"+$json.hits[0].canonical }}"
          },
          "matchingColumns": [
            "list_id"
          ],
          "schema": [
            {
              "id": "list_id",
              "displayName": "list_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "key_word",
              "displayName": "key_word",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "campaign_id",
              "displayName": "campaign_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "used_keyword",
              "displayName": "used_keyword",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "group_id",
              "displayName": "group_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "condition_type",
              "displayName": "condition_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ads_header",
              "displayName": "ads_header",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ai_responce",
              "displayName": "ai_responce",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "resolution",
              "displayName": "resolution",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "count_views",
              "displayName": "count_views",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_clics",
              "displayName": "count_clics",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_convetions",
              "displayName": "count_convetions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        9984,
        -1488
      ],
      "id": "8707252c-4f35-439a-9db7-e4a22ab8bd7a",
      "name": "Помечаем что найден конкурент",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: \n {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"# Role and Objective\\n- You are a search query analysis assistant. Your role is to identify and filter out irrelevant queries and detect any negative keywords (“minus words”) indicating a non-target audience. Validate each input phrase and respond with a structured JSON object that indicates compliance and lists any detected minus words.\\n\\n# Instructions\\n- Always return a response as a strict JSON object matching the following format:\\n  {\\n    \\\"is_correct_phrase\\\": boolean,\\n    \\\"minus_words\\\": [string]\\n  }\\n- Do not output any comments, explanations, or additional text.\\n\\n## Sub-categories\\n- The `is_correct_phrase` field must be set to either `true` or `false`, and cannot be null or any other type.\\n- The `minus_words` array must only contain unique string values, or be an empty array (`[]`) if there are no minus words. Do not include duplicate entries. Item order is not important.\\n- If input is absent or improperly formatted, always return:\\n  {\\n    \\\"is_correct_phrase\\\": false,\\n    \\\"minus_words\\\": []\\n  }\\n\\n# Context\\n- Phrase correctness is determined by external requirements or rules not included here.\\n- Only input validation is required; generating or explaining logic is outside the scope.\\n\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt\n        }\n      ]\n    }\n  ],\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"phrase_and_minus_words\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"is_correct_phrase\": {\n            \"type\": \"boolean\",\n            \"description\": \"Indicates if the phrase is correct.\"\n          },\n          \"minus_words\": {\n            \"type\": \"array\",\n            \"description\": \"A list of minus words. Can be empty.\",\n            \"items\": {\n              \"type\": \"string\",\n              \"description\": \"A minus word.\"\n            }\n          }\n        },\n        \"required\": [\n          \"is_correct_phrase\",\n          \"minus_words\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"low\"\n  },\n  \"reasoning\": {\n    \"effort\": \"low\",\n    \"summary\": null\n  },\n  \"tools\": [\n    {\n      \"type\": \"function\",\n      \"description\": \"Return allowed 1–3 word combinations for negative keywords (minus words).\",\n      \"name\": \"get_non_matching_ngrams\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"phrase\": {\n            \"type\": \"string\",\n            \"description\": \"User phrase to analyze\"\n          },\n          \"threshold\": {\n            \"type\": \"number\",\n            \"description\": \"Match threshold, default 0.88\"\n          }\n        },\n        \"required\": [\n          \"phrase\"\n        ]\n      },\n      \"strict\": false\n    }\n  ],\n  \"store\": true,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5712,
        -160
      ],
      "id": "e7475b06-2584-4c3a-918d-341c9dec9d6a",
      "name": "Set API JSON"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5920,
        -176
      ],
      "id": "afcb0641-1fd3-4511-990b-f54cb1de1503",
      "name": "HTTP Request",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "bhBscYglbFhVyIcL",
          "mode": "list",
          "cachedResultUrl": "/workflow/bhBscYglbFhVyIcL",
          "cachedResultName": "Check minuses API tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        7904,
        -352
      ],
      "id": "d3ad839b-c360-47e8-a65b-0831317e2e9a",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "xKP6S9XsCeVSgebo",
          "mode": "list",
          "cachedResultUrl": "/workflow/xKP6S9XsCeVSgebo",
          "cachedResultName": "Check VS company name SUB"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        3808,
        -256
      ],
      "id": "7fb7edd5-2887-468f-b895-078edac5bae8",
      "name": "Find competitors mentions"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0b8b9cb2-368a-4ef4-b4b4-560b030f71f4",
              "leftValue": "={{ $json.minus_words }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        9600,
        -336
      ],
      "id": "f7e0dd6e-b29c-495f-a776-17c853607bd6",
      "name": "If minuses array is empty"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -784,
        -240
      ],
      "id": "65da40d4-374e-46ea-a0c5-5e1903d2e471",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f74ac992-90a4-4403-a75e-17656de76902",
              "name": "company_id",
              "value": "={{ $json.company_id }}",
              "type": "number"
            },
            {
              "id": "172a851e-fdc7-4f3c-b095-88687e8a392a",
              "name": "threshhold",
              "value": "={{ $json.threshhold }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -544,
        -240
      ],
      "id": "a26eafc5-4140-44cb-9124-8c952159e354",
      "name": "set variables"
    },
    {
      "parameters": {
        "content": "добавить обработку кейса когда есть конверсии"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1744,
        -624
      ],
      "id": "594c86d8-70bd-416e-b6ae-d3ff669be45a",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id,n8n_workflow_root_execution_id, started)\nSELECT MAX(business_process_id), $2,$3,$4, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}},{{ $('When Executed by Another Workflow').item.json.root_execution_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -208,
        -144
      ],
      "id": "34e512f5-8154-489f-8567-372ec5d0fc72",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_total=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$input.all().length}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        560,
        80
      ],
      "id": "300f6ef2-3e5e-4394-8b03-226bee2b1c6d",
      "name": "Mark_workflow_total_steps1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nworkflowData.tokens_used = 0;\nworkflowData.step = 0;\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        -80
      ],
      "id": "c2996547-34bb-433e-b4ad-0c2bd31bbd42",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW() where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1648,
        -768
      ],
      "id": "7a94a8b0-fb50-4343-ae84-f3979bf32b9e",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3, tokens_used=$4,tokens_used_type=$5 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}},{{$json.tokens_used}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        12080,
        -48
      ],
      "id": "7eb077f5-d21d-45a3-b35a-3cf7db4995b5",
      "name": "Mark_workflow_passed_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nlet step_tokens_used = 0;// безопасное чтение данных другой ноды\n\nfunction safeAll(nodeName) {\n  try {\n    return $(nodeName).all();        // вернёт массив items этой ноды\n  } catch (_e) {\n    return [];                       // нода не исполнялась — вернём пусто\n  }\n}\n\n// пример для HTTP Request1 — если нода не выполнялась, токены = 0\nconst httpItems = safeAll('HTTP Request');\nconst httpItems1 = safeAll('HTTP Request1');\nstep_tokens_used = httpItems.length\n  ? (httpItems[0]?.json?.usage?.total_tokens ?? 0)\n  : 0;\nstep_tokens_used = + httpItems1.length\n  ? (httpItems1[0]?.json?.usage?.total_tokens ?? 0)\n  : 0;\n //set used tokens here!!!!\nworkflowData.tokens_used = workflowData.tokens_used+step_tokens_used;\nfor (const item of $input.all()) {\n  item.json.steps_passed = workflowData.steps_passed;\n  item.json.tokens_used = workflowData.tokens_used\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        11840,
        -32
      ],
      "id": "2d152f6d-640a-4856-bdbc-12299fc8cb37",
      "name": "Get current step and tokens saved"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fa13510a-3a56-4cd5-8b80-3e4fe626ce0b",
              "leftValue": "={{ $json.to_terminate }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        12464,
        -16
      ],
      "id": "4610dcc3-96cc-48e6-b3e4-7445d811bebf",
      "name": "If"
    },
    {
      "parameters": {
        "errorMessage": "Process terminated by user"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        12704,
        -144
      ],
      "id": "a5b461a5-d941-4c88-a934-45e0cc6cf924",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "business_processes_states",
          "mode": "list",
          "cachedResultName": "business_processes_states"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "n8n_workflow_execution_id",
              "value": "={{ $execution.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        12288,
        -48
      ],
      "id": "137c55d6-840d-44a2-83ba-213edca771e6",
      "name": "check if termination is requested",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e4ab3071-3b4d-4307-9905-188f2f24c488",
              "leftValue": "={{ $json.count_convetions }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3024,
        -288
      ],
      "id": "f5f0168f-3db8-497a-aa73-46335fe8000e",
      "name": "If we have conversions for the key word"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ca56d76f-8158-451b-95b0-48adbef68027",
              "leftValue": "={{ $json.hits}}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4048,
        -256
      ],
      "id": "edfb6102-f19b-4c41-bbf7-1da05fc691b6",
      "name": "If competitors not found"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bb72a340-789e-459b-80c9-f1c2b454ed57",
              "name": "resolution",
              "value": "={{\"no relevant, minuses: \"+$('minus_words_array').last().json.minus_words.map(String).join(', ')}}",
              "type": "string"
            },
            {
              "id": "2f7246f7-a167-46be-9212-edc599a35ff3",
              "name": "total_tokens",
              "value": "={{ $('HTTP Request1').last().json.usage.total_tokens+$('HTTP Request').last().json.usage.total_tokens }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        10528,
        -368
      ],
      "id": "2b2142c8-350c-46f1-83b8-cabebd126f68",
      "name": "no relevant",
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "33090f58-518c-4671-a0cf-22b8b484a226",
              "name": "resolution",
              "value": "to add",
              "type": "string"
            },
            {
              "id": "4f2396b9-b5c0-4e30-86c1-df42515df6af",
              "name": "total_tokens",
              "value": "={{ $json.usage.total_tokens }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        8688,
        -960
      ],
      "id": "53cab91c-4e4e-4071-8972-c454b3ac93f2",
      "name": "mark to add"
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt.data;\n\nfor (const item of $input.all()) {\n  item.json.my_prompt = my_prompt.replaceAll(\"{{service_description}}\",item.json.service_name +' ' + item.json.service_description).replaceAll(\"{{key_word}}\", $('Loop Over Items').last().json.key_word).replaceAll(\"{{company_name}}\", item.json.company_name);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5520,
        -144
      ],
      "id": "e8308e24-33d6-4a1b-96ce-db639661add1",
      "name": "Set prompt"
    },
    {
      "parameters": {
        "content": "ВРЕМЕННО для KIBERone - нет Истории!!!!!",
        "height": 496,
        "width": 416
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4240,
        -192
      ],
      "id": "8b768696-e35f-4547-917d-ca92eb1fb2e8",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select c.company_name,cs.service_name, cs.service_description from key_words kw, companies c, company_services cs where kw.key_word=$2 and kw.company_id=$1 and cs.service_id=kw.service_id and cs.company_id=$1 and c.company_id=$1",
        "options": {
          "queryReplacement": "=[{{ $('set variables').item.json.company_id }},{{ $json.key_word }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4928,
        -144
      ],
      "id": "d92ce17e-ee3c-4e60-831e-4a1aac04c98a",
      "name": "get service data by key word",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "99ec263a-e232-4b91-9603-fea27331309c",
              "leftValue": "={{ $('set threshold').item.json.used_keyword }}",
              "rightValue": "---autotargeting",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4464,
        -112
      ],
      "id": "e3f2916e-c6f6-457f-8404-6fa8a02eb3dd",
      "name": "If not autotargeting"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select c.company_name,cs.service_name, cs.service_description from ads_list kw, companies c, company_services cs where kw.ad_header=$2 and kw.company_id=$1 and cs.service_id=kw.service_id and cs.company_id=$1 and c.company_id=$1 ",
        "options": {
          "queryReplacement": "=[{{ $('set variables').item.json.company_id }},{{ $('Loop Over Items').last().json.ads_header }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4928,
        32
      ],
      "id": "0be1cb0e-9bcc-48fd-9e17-fb5c81a0da31",
      "name": "get service data by AD header",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const src = $('Loop Over Items').last().json?.used_key_word ?? '';\n\nreturn $input.all().map(it => {\n  const cleaned = String(src).replace(/\\s-\\S+/g, '').trim();\n  return { json: { ...it.json, key_word: cleaned } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4736,
        -144
      ],
      "id": "4957e5db-eb72-4ff3-bd71-987877ef38da",
      "name": "remove applied key words"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select c.company_name,cs.service_name, cs.service_description from companies c, company_services cs where  cs.service_id=6 and cs.company_id=1 and c.company_id=1",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5136,
        -144
      ],
      "id": "d52a672f-cdb2-4456-81fa-228e4e4f22a5",
      "name": "get service data by key word1",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select c.company_name,cs.service_name, cs.service_description from companies c, company_services cs where  cs.service_id=6 and cs.company_id=1 and c.company_id=1",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5120,
        32
      ],
      "id": "ef9f48bb-c2fe-44a5-963c-1a514417aebb",
      "name": "get service data by AD header1",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "add company id"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        5840,
        208
      ],
      "id": "b8f00626-5007-4f50-ba68-9a880a3bf4cd",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        816,
        -80
      ],
      "id": "af36d43d-1ca9-41e3-a0c0-96d3186b9025",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4db35a49-e130-4ff8-9ccb-7b452205f80a",
              "name": "threshold",
              "value": "=0.88",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3424,
        -224
      ],
      "id": "0f3bfe40-55a2-46fc-9bd6-a60479ee29ae",
      "name": "set threshold"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select * from current_list where report_id=(select max(import_id) from report_import where company_id=$1) and resolution is null\n",
        "options": {
          "queryReplacement": "={{ $('set variables').item.json.company_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        80,
        -112
      ],
      "id": "4d2ce811-f3fa-4ce6-b6b9-ffb2642762c6",
      "name": "get last import not processed records",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "26a3b4cf-c374-4833-8b03-55dcf4df1097",
              "name": "args.company_id",
              "value": "={{ $('Loop Over Items').last().json.company_id }}",
              "type": "number"
            },
            {
              "id": "ec583710-a44c-47de-ba3f-ebbfaa229fb1",
              "name": "args.phrase",
              "value": "={{ $('Loop Over Items').last().json.key_word }}",
              "type": "string"
            },
            {
              "id": "bf431c92-c6e4-41ab-b8b1-ee33acf9e25f",
              "name": "args.threshold",
              "value": 0.8,
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        7664,
        -368
      ],
      "id": "7d1e361d-e5eb-4f91-978d-d0fd4a4f5dbb",
      "name": "set input params"
    },
    {
      "parameters": {
        "jsCode": "\n// Преобразуем в строку формата ARRAY['...','...']\nconst result = \n\n$json.non_matches.map(v => '\\'' + String(v).replace(/\\\\/g,'\\\\\\\\').replace(/\"/g,'\\\\\"') + '\\'').join(',') ;\n\nreturn [{ json: { array_string:$json.non_matches ,company_id:$('set input params').last().json.args.company_id } }];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8112,
        -352
      ],
      "id": "5e57feaf-ef4d-4a83-b5c5-93097c442958",
      "name": "prepare for SQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH incoming AS (\n  SELECT DISTINCT trim(both ' ' FROM jsonb_array_elements_text($1::jsonb)) AS word\n)\nSELECT i.word\nFROM incoming i\nLEFT JOIN minus_words mw\n  ON lower(mw.minus_word) = lower(i.word)\n AND mw.company_id = $2\nWHERE mw.minus_word IS NULL\nORDER BY i.word;",
        "options": {
          "queryReplacement": "=[{{JSON.stringify($json.array_string)}},{{$json.company_id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        8320,
        -352
      ],
      "id": "3b0a7194-c82a-4eee-82cf-bb39a74dc3ab",
      "name": "filter by existing minus words",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: \n {\n  \"model\": \"gpt-5-nano\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"# Role and Objective\\n- You are a search query analysis assistant. Your role is to  review negative keywords (“minus words”)  list indicating a non-target audience. \\n\\n# Instructions\\n\\n- The `minus_words` array must only contain unique string values, or be an empty array (`[]`) if there are no minus words. Do not include duplicate entries. Item order is not important.\\n\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt\n        }\n      ]\n    }\n  ],\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"minus_words\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"minus_words\": {\n            \"type\": \"array\",\n            \"description\": \"A list of minus words. Can be empty.\",\n            \"items\": {\n              \"type\": \"string\",\n              \"description\": \"A minus word.\"\n            },\n        \"maxItems\": 2\n          }\n        },\n        \"required\": [\n          \"minus_words\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"low\"\n  },\n  \"reasoning\": {\n    \"effort\": \"minimal\",\n    \"summary\": null\n  },\n  \"tools\": [],\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8720,
        -368
      ],
      "id": "93ee51bd-1136-44ca-ac85-25e9b68717aa",
      "name": "Set API JSON1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        8944,
        -368
      ],
      "id": "f7f9fd4b-c069-4a4b-9448-fe6cbf823f06",
      "name": "HTTP Request1",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt_minus.data;\n\nconst input = $input.all();\nmy_prompt = my_prompt.replaceAll(\"{{service_name}}\",$('Set service parameters').last().json.service_name).replaceAll(\"{{key_word}}\", $('Loop Over Items').last().json.key_word).replaceAll(\"{{company_name}}\", $('Set service parameters').last().json.company_name).replaceAll(\"{{minus_words}}\",JSON.stringify(input));\n\nreturn [\n  {\n    json: {\n     \n     my_prompt:my_prompt\n    }\n  }\n];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8528,
        -368
      ],
      "id": "7c8cda9c-6faf-4247-83d0-0a87ec38c2c7",
      "name": "Set prompt1"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "minus_words_list_narrow_down.txt",
        "additionalParameters": {},
        "path": "11ce7df5-0b2d-4bad-82af-a14544fd47e9"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        160,
        -608
      ],
      "id": "14a4c60e-8491-491e-b89e-19b09ee53cfc",
      "name": "Get a file1",
      "webhookId": "11ce7df5-0b2d-4bad-82af-a14544fd47e9",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        368,
        -608
      ],
      "id": "ed0e4702-7864-4bcd-a44a-dbf2a526f5fd",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.my_prompt_minus = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        -608
      ],
      "id": "ffbaff12-8877-4b11-9ffa-efc91932057b",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Достаём массив competitors\n\n\n// Разворачиваем каждый объект в отдельный item\nreturn $json.minus_words.map((c, index) => ({\n  json: {\n    index,\n    minus_word: c.toLowerCase(),\n    list_id:$('Loop Over Items').last().json.list_id    \n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9872,
        -240
      ],
      "id": "fac7b7e3-a640-4391-a0af-884fd59e77cd",
      "name": "map_minus_words"
    },
    {
      "parameters": {
        "jsCode": "const parsed = JSON.parse($input.first().json.output[1].content[0].text);\n\n// Если иногда приходит уже массив — обработаем и этот случай\nconst list = Array.isArray(parsed) ? parsed : parsed.minus_words;\n\nreturn [{ json: { minus_words: list } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        9232,
        -368
      ],
      "id": "59942a47-1012-4c22-b09c-4a5e213fd239",
      "name": "minus_words_array"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        10480,
        -1040
      ],
      "id": "de70ec8e-9144-41ff-b42a-ae661fb5d0ca",
      "name": "Merge1"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_minus_words",
          "mode": "list",
          "cachedResultName": "current_minus_words"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "current_record_id": "={{ $('Loop Over Items').last().json.list_id }}",
            "company_id": "={{ $('Loop Over Items').last().json.company_id }}",
            "minus_word": "={{ $('If competitors not found').last().json.hits[0].candidate }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "minus_id",
              "displayName": "minus_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "minus_word",
              "displayName": "minus_word",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_record_id",
              "displayName": "current_record_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "keep_minus",
              "displayName": "keep_minus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "minus_word_v2",
              "displayName": "minus_word_v2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "keep_minus_v2",
              "displayName": "keep_minus_v2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "comment",
              "displayName": "comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        9968,
        -1232
      ],
      "id": "36dd70fd-5cf2-453a-adce-2f115a9a4e5c",
      "name": "Insert minus words from Competitors",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a87b0f9-4ed9-409a-9def-bbaa4e413d90",
              "leftValue": "={{ $json.hits[0].candidate }}",
              "rightValue": "={{ $json.hits[0].matched }}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        9008,
        -1232
      ],
      "id": "6f6a952f-78d2-4e4a-b592-cbebc30c982f",
      "name": "if not exact competitor match"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5344,
        -144
      ],
      "id": "8e56da3d-408d-4500-8900-6ef5fb4e1e76",
      "name": "Set service parameters"
    }
  ],
  "connections": {
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "пословное соответствие?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert minus words": {
      "main": [
        [
          {
            "node": "no relevant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "пословное соответствие?": {
      "main": [
        [
          {
            "node": "проверяем полное соответствие",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If we have conversions for the key word",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверяем полное соответствие": {
      "main": [
        [
          {
            "node": "Соответствие полное?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Соответствие полное?": {
      "main": [
        [
          {
            "node": "Помечаем что ключ совпадает",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If we have conversions for the key word",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update": {
      "main": [
        [
          {
            "node": "Get current step and tokens saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Обработка ответа AI": {
      "main": [
        [
          {
            "node": "mark to add",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "set input params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Помечаем что ключ совпадает": {
      "main": [
        [
          {
            "node": "Get current step and tokens saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        []
      ]
    },
    "Помечаем что найден конкурент": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Обработка ответа AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "prepare for SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find competitors mentions": {
      "main": [
        [
          {
            "node": "If competitors not found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If minuses array is empty": {
      "main": [
        [
          {
            "node": "no relevant",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "map_minus_words",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set variables": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get a file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "get last import not processed records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Mark_workflow_total_steps1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps": {
      "main": [
        [
          {
            "node": "check if termination is requested",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step and tokens saved": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check if termination is requested": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If we have conversions for the key word": {
      "main": [
        [
          {
            "node": "mark to add",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "set threshold",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If competitors not found": {
      "main": [
        [
          {
            "node": "If not autotargeting",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Помечаем что найден конкурент",
            "type": "main",
            "index": 0
          },
          {
            "node": "if not exact competitor match",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "no relevant": {
      "main": [
        [
          {
            "node": "update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mark to add": {
      "main": [
        [
          {
            "node": "update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prompt": {
      "main": [
        [
          {
            "node": "Set API JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get service data by key word": {
      "main": [
        [
          {
            "node": "get service data by key word1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If not autotargeting": {
      "main": [
        [
          {
            "node": "remove applied key words",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get service data by AD header",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get service data by AD header": {
      "main": [
        [
          {
            "node": "get service data by AD header1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "remove applied key words": {
      "main": [
        [
          {
            "node": "get service data by key word",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get service data by key word1": {
      "main": [
        [
          {
            "node": "Set service parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get service data by AD header1": {
      "main": [
        [
          {
            "node": "Set service parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_total_steps1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "set threshold": {
      "main": [
        [
          {
            "node": "Find competitors mentions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get last import not processed records": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input params": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare for SQL": {
      "main": [
        [
          {
            "node": "filter by existing minus words",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter by existing minus words": {
      "main": [
        [
          {
            "node": "Set prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prompt1": {
      "main": [
        [
          {
            "node": "Set API JSON1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "minus_words_array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "map_minus_words": {
      "main": [
        [
          {
            "node": "Insert minus words",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "minus_words_array": {
      "main": [
        [
          {
            "node": "If minuses array is empty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Get current step and tokens saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert minus words from Competitors": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "if not exact competitor match": {
      "main": [
        [
          {
            "node": "Insert minus words from Competitors",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set service parameters": {
      "main": [
        [
          {
            "node": "Set prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": false,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "v2Z32ISEUzsFYnZw"
  },
  "staticData": {
    "global": {
      "alaysis_prompt": {
        "data": "Для полученного запроса Instructions\nПроанализируй поисковый запрос пользователя на предмет релевантности услугам компании KIBERone Саратов Октябрьский(company_name). Действуй строго по следующим правилам и согласно заданной последовательности действий:\n1.Если запрос полностью релевантен услугам компании , верни: \"is_correct_phrase\": true.\n2.Если запрос нерелевантен услугам компании 1) верни \"is_correct_phrase\": false 2) определи список потенциально допустимых минус слов. для этого всегда вызывай tool get_non_matching_ngrams. Передавай threshold, только если пользователь задал его; иначе не указывай (используется дефолт 0,88). 3)Из полученного от tool списка выдели минимальный набор минус-слов, обеспечивающих блокировку широкого класса подобных нерелевантных запросов.\nТребования к минус-словам: Используй минимально возможную комбинацию слов. Минус-слова должны однозначно исключать нерелевантные запросы.\nContext (о компании KIBERone)\nKIBERone – международная КиберШкола программирования и цифровых технологий для детей от 6 до 14 лет. Позиционирование бренда: KIBERone — первая международная КиберШкола будущего для IT-поколения 6–14 лет, признана ЮНЕСКО лучшей детской образовательной IT-школой в мире. Бренд является партнером Microsoft, Roblox и Samsung. Бесплатные пробные уроки Основные услуги и программы: Полный перечень модулей: Вводный модуль (основы цифровой грамотности) Основы программирования Scratch Jr Создание игр на Scratch ПиктоМир (алгоритмическое мышление) CodeMonkey (логика и программирование) Устройство компьютера Эффектные презентации (PowerPoint, Desygner) QR-коды Деловые люди (предпринимательство) Google Blockly (визуальное программирование) Roblox Studio (создание игр) Kodu Game Lab (3D-программирование) Разработка мобильных приложений в Thunkable Blender (3D-моделирование) Компьютерная грамотность Minecraft Education Нейросети (основы ИИ) Alice 3D (3D-программирование) Run Marco (основы алгоритмов) Исполнители: Чертёжник и Черепашка GIF-анимация Tinkercad (3D-проектирование) Кибербезопасность Construct 2 (создание 2D-игр) Компас-3D (САПР) Основы HTML (веб-разработка) Голосовой помощник Алиса Создание лендинга (Tilda) Python (создание игр) Чат-бот на Python Web-дизайн (Figma) Web-мастер (HTML+CSS) Motion Design Unreal Engine 4 (игровой движок) JavaScript (игры) C# (создание 2D-игр) C++ Java (создание приложений) Unity 3D (игры) Олимпиадное программирование Облачные технологии, Блокчейн, Data Science PHP+SQL Photoshop Подготовка к олимпиадам Приложения Google Летние программы: Летние IT-интенсивы (краткосрочные программы по направлениям Roblox, Minecraft, Python и др.) Летние КИБЕРканикулы (городской лагерь с IT-обучением и развлекательной программой) Дополнительные механики: Кибервалюта («кибероны») для мотивации учеников, обмен на мерч на КиберМаркете Тьюторы и преподаватели: Опытные специалисты с практическим опытом и педагогической подготовкой Другие важные разделы: Новости (новости школы и сети) СМИ о нас (публикации о школе) Фотогалерея (фото с мероприятий и уроков) Видео (видеоматериалы о школе) Расписание занятий (время занятий для групп и пробных уроков) Локации (адрес школы в Октябрьском районе Саратова, ул. Тараса Шевченко, 8) Оплата (способы оплаты и договор-оферта) Сертификаты (активация промокодов партнеров)\n"
      },
      "steps_passed": 147,
      "tokens_used": 57565,
      "step": 0,
      "my_prompt": {
        "data": "Проанализируй поисковый запрос пользователя:\"{{key_word}}\" на предмет релевантности сервису \"{{service_description}}\" компании \"{{company_name}}\".\nDefinitions\nРелевантность сервису это запрос соответствующий тематике сервиса, но не содержащий намерения к самостоятельной реализации\nInstructions\nДействуй строго по следующим правилам и согласно заданной последовательности действий:\nшаг 1. Если запрос релевантен сервису компании, верни: \"is_correct_phrase\": true и не выполняй шаг 2 и не вызывай tool get_non_matching_ngrams.\nшаг 2. Если запрос не релевантен сервису компании 1) верни \"is_correct_phrase\": false 2) определи список потенциально допустимых минус слов, для этого обязателен вызов tool get_non_matching_ngrams. Передавай threshold, только если пользователь задал его; иначе не указывай (используется дефолт 0,88). 3)Из полученного от tool списка выдели минимальный набор минус-слов, обеспечивающих блокировку широкого класса подобных нерелевантных запросов.\nТребования к минус-словам: Используй минимально возможную комбинацию слов. Минус-слова должны однозначно исключать нерелевантные запросы.\n\n\n"
      },
      "my_prompt_minus": {
        "data": "Для фразы пользователя {{key_word}} не релевантной сервису {{service_name}} компании {{company_name}} доступен следующий список ключевых слов {{minus_words}}. \nВерни сокращенный список состоящий строго не более чем из двух минус слов, обеспечивающих блокировку широкого класса подобных нерелевантных запросов.\nТребования к минус-словам:\nРазрешено использовать только элементы входящего списка. Любое видоизменение элементов запрещено\nИспользуй минимально возможную комбинацию слов.\nМинус-слова должны однозначно исключать нерелевантные запросы.\n"
      }
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "id": "wZGLxMCCmOnDJZ1o",
          "root_execution_id": 47278,
          "company_id": 1,
          "threshhold": "0.79",
          "import_id": 5
        }
      }
    ]
  },
  "versionId": "b074e255-67d7-4e44-89ff-d82fa916ebbd",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-30T12:45:50.445Z",
      "updatedAt": "2025-09-30T12:45:50.445Z",
      "role": "workflow:owner",
      "workflowId": "c0NgmBzgLxUE7Wno",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": [],
  "file_name": "adv_campaign_get_service.json"
}