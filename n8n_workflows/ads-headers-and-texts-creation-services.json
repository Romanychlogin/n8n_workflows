{
  "createdAt": "2025-09-17T16:34:56.692Z",
  "updatedAt": "2025-09-22T13:45:27.859Z",
  "id": "ezK8ihYnfxZNTIAc",
  "name": "ADS headers and texts creation services",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {
          "reset": "={{ $json.is_first }}"
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1024,
        -240
      ],
      "id": "4f7d6e59-e3e8-4865-8e4a-b1da78fece06",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "key_words",
          "mode": "list",
          "cachedResultName": "key_words"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "company_id",
              "value": "={{ $('set variables').item.json.company_id }}"
            },
            {
              "column": "is_relevant",
              "value": "true"
            },
            {
              "column": "service_id",
              "value": "={{ $json.service_id }}"
            },
            {
              "column": "is_adv_processed",
              "value": "false"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        384,
        -240
      ],
      "id": "026edccd-3660-4aa3-99f7-c26790e2092b",
      "name": "Select rows from a table",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "ads_creation_header.txt",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1104,
        -448
      ],
      "id": "04805a12-21c7-4545-acaa-dea722119e6c",
      "name": "Get a file",
      "webhookId": "c3c66c64-02a4-450e-9653-19bfab4e7f2a",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -928,
        -448
      ],
      "id": "6f662804-bb20-4ac1-be8a-5432bdc6657e",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.my_prompt = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        -416
      ],
      "id": "34de0531-a528-4676-af16-c23597eec5ab",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "\n\nreturn [{\n  json: \n {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"ты специалист по контекстной рекламе. Твоя задача точно выполнять инструкции\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt\n        }\n      ]\n    }\n  ],\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"header\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"header\": {\n            \"type\": \"string\",\n            \"description\": \"A string with no more than 56 characters.\",\n            \"minLength\": 0,\n            \"maxLength\": 56\n          }\n        },\n        \"required\": [\n          \"header\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"low\"\n  },\n  \"reasoning\": {\n    \"effort\": \"minimal\",\n    \"summary\": null\n  },\n  \"tools\": [],\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1712,
        -432
      ],
      "id": "aa698c7a-6b11-4335-a389-3a15f03f02f6",
      "name": "Set API JSON"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        -448
      ],
      "id": "10bfab0a-639b-426d-bf12-dc1db87eb850",
      "name": "HTTP Request",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "создаем заголовок",
        "height": 512,
        "width": 672
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1472,
        -704
      ],
      "id": "8f780a53-e518-45d8-8b1c-101e92699870",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "создаем текст",
        "height": 448,
        "width": 816
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2208,
        -736
      ],
      "id": "0c649a24-fdee-41d0-9b31-15bc62a22627",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "создаем ссылку",
        "height": 448,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3136,
        -736
      ],
      "id": "6ce50111-8191-4f1f-a613-03ff93fc2b06",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt.data;\n\nfor (const item of $input.all()) {\n  item.json.my_prompt = my_prompt.replaceAll(\"{{company_description}}\", workflowData.company_description).replaceAll(\"{{key_word}}\", $json.key_word);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1488,
        -400
      ],
      "id": "5fed47ce-ca69-4180-b339-23f93231bbed",
      "name": "Set prompt"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.company_description = $json.company_name + ' ' + $json.service_name+ ' ' + $json.service_description;\nworkflowData.company_description_with_url = $json.company_name + ' ' + $json.service_name+ ' ' + $json.service_description + ' сервис доступен по адресу: ' + $json.service_url;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        -240
      ],
      "id": "a8a17917-3920-4a65-9990-cb514f426903",
      "name": "save description"
    },
    {
      "parameters": {
        "jsCode": "\n\nreturn [{\n  json: \n {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"ты специалист по контекстной рекламе. Твоя задача точно выполнять инструкции\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt\n        }\n      ]\n    }\n  ],\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"ad_text\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ad_text\": {\n            \"type\": \"string\",\n            \"description\": \"A string with no more than 81 characters.\",\n            \"minLength\": 0,\n            \"maxLength\": 81\n          }\n        },\n        \"required\": [\n          \"ad_text\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"low\"\n  },\n  \"reasoning\": {\n    \"effort\": \"minimal\",\n    \"summary\": null\n  },\n  \"tools\": [],\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2528,
        -512
      ],
      "id": "61384f28-d802-49f7-9669-2dd87389a665",
      "name": "Set API JSON1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2816,
        -528
      ],
      "id": "b58cdbdd-7545-406e-9667-fb92c9489ec4",
      "name": "HTTP Request1",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt_text.data;\n\nfor (const item of $input.all()) {\n  item.json.my_prompt = my_prompt.replaceAll(\"{{company_description}}\", workflowData.company_description).replaceAll(\"{{key_word}}\", $('Set prompt').first().json.key_word).replaceAll(\"{{ad_header}}\",JSON.parse($input.first().json.output[1].content[0].text).header);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2288,
        -496
      ],
      "id": "64d299bb-502e-46ac-a148-332d997ed815",
      "name": "Set prompt1"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "ad_creation_text.txt",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1136,
        -160
      ],
      "id": "ee54a5c9-abb3-48a7-aca8-42779a62e07f",
      "name": "Get a file1",
      "webhookId": "eae833ad-e676-4e52-b751-7d2a034be49a",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -976,
        -160
      ],
      "id": "5ec4f392-8e91-47b6-a8dd-bf341b1a86c8",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.my_prompt_text = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -832,
        -160
      ],
      "id": "81b4c977-aaf1-4e99-982e-76a0dcb08024",
      "name": "Code"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "ad_creation_url.txt",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1120,
        16
      ],
      "id": "1b37d5a5-d116-4538-a771-4203b30e557e",
      "name": "Get a file2",
      "webhookId": "4dc0e21b-9747-47c9-9b92-4044b815f432",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -960,
        32
      ],
      "id": "e9bd733b-171a-40e5-8ef8-41d74dcd37e8",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.my_prompt_url = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        32
      ],
      "id": "55327515-31ed-479d-a491-4d0a8a740816",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "\n\nreturn [{\n  json: \n {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt\n        }\n      ]\n    }\n  ],\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"url_string\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"url\": {\n            \"type\": \"string\",\n            \"description\": \"A valid URL string\"\n          }\n        },\n        \"required\": [\n          \"url\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"low\"\n  },\n  \"reasoning\": {\n    \"effort\": \"minimal\",\n    \"summary\": null\n  },\n  \"tools\": [],\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3392,
        -512
      ],
      "id": "cde96c3d-22c1-4b75-a465-f340b5bb32d6",
      "name": "Set API JSON2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3680,
        -528
      ],
      "id": "8197fa87-1d82-4fad-ad1d-e037d4f7dabe",
      "name": "HTTP Request2",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt_url.data;\n\nfor (const item of $input.all()) {\n  item.json.my_prompt = my_prompt.replaceAll(\"{{company_description}}\", workflowData.company_description_with_url).replaceAll(\"{{key_word}}\", $('Set prompt').first().json.key_word).replaceAll(\"{{ad_header}}\",JSON.parse($('HTTP Request').first().json.output[1].content[0].text).header).replaceAll(\"{{ad_text}}\",JSON.parse($input.first().json.output[1].content[0].text).ad_text);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3152,
        -496
      ],
      "id": "d7646647-615a-4eb6-a4ca-51ec940b1fd0",
      "name": "Set prompt2"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_ads_list",
          "mode": "list",
          "cachedResultName": "current_ads_list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "key_words": "={{ $('Set prompt').item.json.key_word }}",
            "ad_header": "={{ JSON.parse($('HTTP Request').item.json.output[1].content[0].text).header }}",
            "ad_text": "={{JSON.parse($('HTTP Request1').item.json.output[1].content[0].text).ad_text}}",
            "ad_url": "={{JSON.parse($json.output[1].content[0].text).url + '?utm_source=yandex&utm_medium=cpc&utm_campaign={campaign_id}&utm_content={ad_id}&utm_term={keyword}.{device_type}.{region_name}&block={position_type}.{position}.{source}'}}",
            "company_id": "={{ $('set variables').item.json.company_id }}",
            "group_name": "={{ JSON.parse($('HTTP Request').item.json.output[1].content[0].text).header }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "ad_id",
              "displayName": "ad_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "group_name",
              "displayName": "group_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "key_words",
              "displayName": "key_words",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ad_header",
              "displayName": "ad_header",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ad_text",
              "displayName": "ad_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "group_id",
              "displayName": "group_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ad_url",
              "displayName": "ad_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3936,
        -240
      ],
      "id": "71441ab5-2ed8-4881-8940-9e833270a0d8",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select cs.service_name,c.company_name,cs.service_description,cs.service_url,cs.service_id from companies c, company_services cs where c.company_id=cs.company_id and c.company_id=$1",
        "options": {
          "queryReplacement": "{{ $('set variables').item.json.company_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -352,
        -256
      ],
      "id": "cc291d1d-a7a5-47a4-9c53-90a399686c05",
      "name": "Services list",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        0,
        -256
      ],
      "id": "94a92d3d-39a4-4b12-aee4-1369853a570b",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebafa31d-edf7-41c0-a06e-e884ad9595ea",
              "name": "is_first",
              "value": "=true",
              "type": "boolean"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        832,
        -256
      ],
      "id": "81b3d700-7fea-4daf-ab00-cd92dd7281fa",
      "name": "set first_item1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebafa31d-edf7-41c0-a06e-e884ad9595ea",
              "name": "is_first",
              "value": "=false",
              "type": "boolean"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1232,
        -320
      ],
      "id": "146c4e52-1c54-4463-9c26-2db990343e83",
      "name": "reset first_item"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1328,
        -736
      ],
      "id": "2c4beaae-391d-4e2c-af93-bc8e851c00f3",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5b3485a2-cb50-486a-932c-fc27de0a25da",
              "name": "company_name",
              "value": "={{ $json.company_name }}",
              "type": "string"
            },
            {
              "id": "f74ac992-90a4-4403-a75e-17656de76902",
              "name": "company_id",
              "value": "={{ $json.company_id }}",
              "type": "number"
            },
            {
              "id": "172a851e-fdc7-4f3c-b095-88687e8a392a",
              "name": "threshhold",
              "value": "={{ $json.threshhold }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1088,
        -736
      ],
      "id": "de41c609-2510-4ce1-bcf3-21097dd6e71c",
      "name": "set variables"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id,n8n_workflow_root_execution_id, started)\nSELECT MAX(business_process_id), $2,$3,$4, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}},{{ $('When Executed by Another Workflow').item.json.root_execution_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -864,
        -736
      ],
      "id": "1078edc3-2088-4924-992b-1c97cb2b4960",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_total=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.total}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -240,
        48
      ],
      "id": "5bd9dc4a-f46e-4cae-81c2-5b490fe3a15f",
      "name": "Mark_workflow_total_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nworkflowData.tokens_used = 0;\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        48
      ],
      "id": "d95dd2e0-9495-4a4b-a3ef-6b6502028bc6",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW() where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        720,
        -768
      ],
      "id": "ed630539-5050-4a6e-9376-b79ea183f4d9",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3, tokens_used=$4,tokens_used_type=$5 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}},{{$json.tokens_used}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4608,
        -256
      ],
      "id": "0a9bdd25-98b8-459f-ae44-e3d8d16e94cb",
      "name": "Mark_workflow_passed_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nconst step_tokens_used = $('HTTP Request').first().json.usage.total_tokens+$('HTTP Request1').first().json.usage.total_tokens+$('HTTP Request2').first().json.usage.total_tokens; //set used tokens here!!!!\nworkflowData.tokens_used = workflowData.tokens_used+step_tokens_used;\nfor (const item of $input.all()) {\n  item.json.steps_passed = workflowData.steps_passed;\n  item.json.tokens_used = workflowData.tokens_used\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4368,
        -240
      ],
      "id": "1a068f31-5fb9-415a-9bf5-267cd0a3ceb9",
      "name": "Get current step and tokens saved"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select count(key_word_id) AS total from key_words where is_relevant=true and is_adv_processed=false and company_id=2",
        "options": {
          "queryReplacement": "={{ $('set variables').item.json.company_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -544,
        32
      ],
      "id": "8cc59c6c-cfd7-4c10-bc5f-86fe04e28db4",
      "name": "get total steps",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "key_words",
          "mode": "list",
          "cachedResultName": "key_words"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "is_adv_processed": "={{ true }}",
            "key_word_id": "={{ $('reset first_item').last().json.key_word_id }}"
          },
          "matchingColumns": [
            "key_word_id"
          ],
          "schema": [
            {
              "id": "key_word_id",
              "displayName": "key_word_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "key_word",
              "displayName": "key_word",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "wordstat_count",
              "displayName": "wordstat_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "service_id",
              "displayName": "service_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "wordstat_parsed",
              "displayName": "wordstat_parsed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "from_wordstat",
              "displayName": "from_wordstat",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "is_relevant",
              "displayName": "is_relevant",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ai_response_tokens",
              "displayName": "ai_response_tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "minus_words_processed",
              "displayName": "minus_words_processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "is_adv_processed",
              "displayName": "is_adv_processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4160,
        -240
      ],
      "id": "794b6e2d-e4ac-4835-9c12-88f0acf5fb46",
      "name": "mark key_word processed",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b13ec6fc-ce2d-48a1-a4c7-6ded529707ec",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        560,
        -240
      ],
      "id": "a9fc162c-519f-4089-8e36-6ba70c7f5ceb",
      "name": "If empty"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fa13510a-3a56-4cd5-8b80-3e4fe626ce0b",
              "leftValue": "={{ $json.to_terminate }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        5024,
        -256
      ],
      "id": "e3e28ee3-7458-4e1a-8d9a-a18280c1659e",
      "name": "If"
    },
    {
      "parameters": {
        "errorMessage": "Process terminated by user"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        5232,
        -352
      ],
      "id": "121ce7a7-d8e1-4a84-8d5a-a37f3c60c87f",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "business_processes_states",
          "mode": "list",
          "cachedResultName": "business_processes_states"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "n8n_workflow_execution_id",
              "value": "={{ $execution.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4816,
        -256
      ],
      "id": "9f780c11-bb8b-4bcb-8bf0-5e90a34d7b48",
      "name": "check if termination is requested",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    }
  ],
  "connections": {
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "reset first_item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "If empty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Get a file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prompt": {
      "main": [
        [
          {
            "node": "Set API JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save description": {
      "main": [
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prompt1": {
      "main": [
        [
          {
            "node": "Set API JSON1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file2": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Set prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON2": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prompt2": {
      "main": [
        [
          {
            "node": "Set API JSON2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Set prompt2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Get a file2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "get total steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "mark key_word processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Services list": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "save description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reset first_item": {
      "main": [
        [
          {
            "node": "Set prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set first_item1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set variables": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_total_steps": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step and tokens saved": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps": {
      "main": [
        [
          {
            "node": "check if termination is requested",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get total steps": {
      "main": [
        [
          {
            "node": "Mark_workflow_total_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Services list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mark key_word processed": {
      "main": [
        [
          {
            "node": "Get current step and tokens saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If empty": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "set first_item1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check if termination is requested": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "v2Z32ISEUzsFYnZw"
  },
  "staticData": {
    "global": {
      "my_prompt": {
        "data": "Есть следующая фраза, заданная пользователем при поиске: \"{{key_word}}\". Подбери к фразе заголовок рекламного объявления. Ответ долже содержать только заголовок, без рассуждений. Кавычки добавлять не надо. Учитывай то что в исходных фразах удалены все дополнительные символы, такие как #,- и пр. \nТребования к заголовку: \n1)не более 56 символов, заголовок может содержать только буквы русского и латинского алфавита и цифры.\n2)Заголовок должен максимально соответствовать ключевой фразе.  \n3)Обязательное требование к заголовку это сохранение всех слов из ключевой фразы. Заголовок должен быть релевантен услугам компании(см. ниже) и уточнять запрос в сторону услуг компании (давать более уточненное понимание сути услуг при этом оставаясь приближенным к исходной фразе). \n4)Заголовок должен начинаться с заглавной буквы. \n5)При наличии жаргонизмов или некорректного\\неграмотного написания в исходной фразе в заголовке необходимо корректное написание а также порядок слов.\n*Важное требование* при обрезании под заданное количество символов заголовок должен оставаться осмысленным и добавленное уточнение не должно дублироать имеющиеся слова. \nИнформация о компании: {{company_description}}\n"
      },
      "my_prompt_text": {
        "data": "Есть следующая фраза, заданная пользователем при поиске: \"{{key_word}}\" и следующий заголовок объявления к ней \"{{ad_header}}\". Подбери к ним Текст рекламного объявления. Ответ долже содержать только текст без рассуждений. кавычки добавлять не надо . Учитывая то что во фразе пользователя удалены все дополнительные символы, такие как #,- и пр. \nТребования к тексту объявления. \n1)не более 81 символа. \n2)Должен начинаться с запроса пользователя, но доработанного по следующим требованиям: при наличии жаргонизмов или некорректного\\неграмотного написания в исходной фразе необходимо корректное написание а также порядок слов. \n3)Обязательное требование - сохранение всех слов из ключевой фразы. \n4)Желательно содержать призыв к коммерческому действию (записи на пробный урок, попробовать самому и пр.) Пример текста объявления: \"Учим детей создавать игры, сайты и ботов. Запишись на пробный урок бесплатно!\" \n5)После обрезания под ограничения длины перепроверь что получился осмысленный текст, при необходимости перепиши.\nВ ответе необходимо вернуть только запрошенную информацию, запрещено добавлять уточнения типа текст и пр. Описание компании:{{company_dscription}}\n"
      },
      "my_prompt_url": {
        "data": "Есть следующая фраза, заданная пользователем при поиске: \"{{key_word}}\". Подбери к фразе, заголовку:\"{{ad_header}}\" и тексту рекламного объявления \"{{ad_text}}\" ссылку на страницу сайта, максимально соответствующую запросу пользователя и тексту. Ответ должен содержать только ссылку. Учитывай то что в исходных фразах удалены все дополнительные символы, такие как #,- и пр. В ответе необходимо вернуть только запрошенную информацию, запрещено добавлять уточнения типа заголовок, ссылка, текст и любые рассуждения. В ответе запрещается использовать ссылки отсутствующие в описании компании или изменять ссылки приведенные в описании. Описание компании:{{company_description}} \n"
      },
      "steps_passed": 2,
      "tokens_used": 3731,
      "company_description": "Первый визовый центр Курган Оформление виз Назначение: получение виз для поездок по миру — туризм, работа, учёба, лечение.\nГеография: Европа, Азия, США, Великобритания, Австралия, Канада — всего до 45 стран.\nСроки: от 5 рабочих дней (зависят от страны и типа визы).\nЧто делаем:\n- первичная консультация и подбор типа визы;\n- чек-лист и проверка документов;\n- переводы, заверение копий, заполнение анкет, подготовка сопроводительных писем;\n- запись на подачу (в консульства и визовые центры), подготовка к интервью;\n- сопровождение подачи, отслеживание статуса и получение готового паспорта;\n- дистанционное оформление при необходимости.\nДополнительные опции:\n- страхование для поездок по требованиям посольств;\n- бронирование авиабилетов и гостиниц, составление маршрута под подачу;\n- открытие иностранной банковской карты с удобной доставкой.\nОсобенности:\n- помощь в получении виз даже при «чистом» загранпаспорте;\n- автоматизированный поиск слотов подачи документов.\nПочему мы:\n- 10+ лет на рынке, более миллиона клиентов;\n- 2000+ одобренных виз ежемесячно;\n- 82% успешных решений;\n- более 120 офисов по стране.\nПримеры стоимости услуг:\n- Испания — от 4 500 ₽;\n- Италия — от 7 000 ₽;\n- Франция — от 7 000 ₽;\n- Китай — от 11 500 ₽.\nКонтакты и офис: г. Курган, ул. Пичугина, д. 21; телефон +7 (993) 426-19-77.",
      "company_description_with_url": "Первый визовый центр Курган Оформление виз Назначение: получение виз для поездок по миру — туризм, работа, учёба, лечение.\nГеография: Европа, Азия, США, Великобритания, Австралия, Канада — всего до 45 стран.\nСроки: от 5 рабочих дней (зависят от страны и типа визы).\nЧто делаем:\n- первичная консультация и подбор типа визы;\n- чек-лист и проверка документов;\n- переводы, заверение копий, заполнение анкет, подготовка сопроводительных писем;\n- запись на подачу (в консульства и визовые центры), подготовка к интервью;\n- сопровождение подачи, отслеживание статуса и получение готового паспорта;\n- дистанционное оформление при необходимости.\nДополнительные опции:\n- страхование для поездок по требованиям посольств;\n- бронирование авиабилетов и гостиниц, составление маршрута под подачу;\n- открытие иностранной банковской карты с удобной доставкой.\nОсобенности:\n- помощь в получении виз даже при «чистом» загранпаспорте;\n- автоматизированный поиск слотов подачи документов.\nПочему мы:\n- 10+ лет на рынке, более миллиона клиентов;\n- 2000+ одобренных виз ежемесячно;\n- 82% успешных решений;\n- более 120 офисов по стране.\nПримеры стоимости услуг:\n- Испания — от 4 500 ₽;\n- Италия — от 7 000 ₽;\n- Франция — от 7 000 ₽;\n- Китай — от 11 500 ₽.\nКонтакты и офис: г. Курган, ул. Пичугина, д. 21; телефон +7 (993) 426-19-77. сервис доступен по адресу: http://krg45.visa-rf.ru/"
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "id": "ezK8ihYnfxZNTIAc",
          "root_execution_id": 20076,
          "company_id": 2,
          "threshhold": "0.88",
          "company_name": "Первый визовый центр Курган"
        }
      }
    ]
  },
  "versionId": "0458fdfa-65c6-4b2e-b03e-5edd4b6daad1",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-17T16:34:56.692Z",
      "updatedAt": "2025-09-17T16:34:56.692Z",
      "role": "workflow:owner",
      "workflowId": "ezK8ihYnfxZNTIAc",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}