{
  "createdAt": "2025-08-28T09:46:36.851Z",
  "updatedAt": "2025-09-01T19:05:48.136Z",
  "id": "gBOZZNnM20uLrxNA",
  "name": "Check VS company name",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "find-competitors",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "adc872aa-8c68-43e8-b65d-adee5c9f5193",
      "name": "Webhook In",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        1040,
        -368
      ],
      "webhookId": "44eac6d6-0dfd-4d41-8088-a21348bf3d48"
    },
    {
      "parameters": {
        "jsCode": "// Input JSON: { company_name, text, threshold? }\nconst body = $json.body;\nconst text = String(body.text || '').toLowerCase();\nconst company = body.company_name;\nconst threshold = (typeof body.threshold === 'number') ? body.threshold : 0.88;\n\nconst tokens = (text.match(/[A-Za-zА-Яа-яЁё0-9][A-Za-zА-Яа-яЁё0-9&.\\-]{0,}/g) || [])\n  .map(s => s.trim())\n  .filter(Boolean);\n\nconst MAX_N = 5;\nconst set = new Set();\nfor (let i = 0; i < tokens.length; i++) {\n  for (let n = 1; n <= MAX_N && i + n <= tokens.length; n++) {\n    const phrase = tokens.slice(i, i+n).join(' ');\n    set.add(phrase);\n  }\n}\nreturn [{ json: { company_name: company, threshold, candidates: Array.from(set) } }];\n"
      },
      "id": "c2cfef5b-094b-4b79-8073-cd0f81095691",
      "name": "Code: extract_ngrams",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        -368
      ]
    },
    {
      "parameters": {
        "jsCode": "const { company_name, threshold, candidates } = $json;\nconst out = candidates.map(c => ({ json: { candidate: c, company_name, threshold } }));\nreturn out;"
      },
      "id": "81fe8885-75a6-4379-a9bc-db1a2d74ff84",
      "name": "Code: explode_candidates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        -368
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"model\":\"text-embedding-3-small\",\"input\":\"{{$json.candidate}}\"}",
        "options": {}
      },
      "id": "1ec08c87-8cd8-4032-81b9-0b42b2b1c8c6",
      "name": "HTTP: OpenAI Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2032,
        -368
      ],
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const emb = ($json.body?.data?.[0]?.embedding) ?? ($json.data?.[0]?.embedding);\nif (!Array.isArray(emb) || emb.length === 0) {\n  throw new Error('Embedding not found');\n}\n\n\nconst out = $input.all().map(c => ({ json: { \n  vector:'[' + c.json.data[0].embedding.map(Number).join(',') + ']',   company_name: $('Code: explode_candidates').all()[c.json.data[0].index].json.company_name, \n  threshold: $('Code: explode_candidates').all()[c.json.data[0].index].json.threshold, \n  candidate: $('Code: explode_candidates').all()[c.json.data[0].index].json.candidate } }));\nreturn out;\n"
      },
      "id": "d456bad4-9460-4df5-8d59-be47622f0626",
      "name": "Code: build_vector_literal",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2448,
        -352
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT v.name_text, e.canonical_name, 0 - (v.embedding <#> $1::vector) AS similarity FROM competitor_name_variants v JOIN competitor_entities e USING (competitor_id) WHERE e.company_name = $2 ORDER BY v.embedding <#> $1::vector LIMIT 1;",
        "options": {
          "queryReplacement": "=[ { value: {{$json.vector}} }, { value: {{$json.company_name}} } ]"
        }
      },
      "id": "bde3491f-ac06-47a2-bf40-f58d41b114e1",
      "name": "Postgres: vector search",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        2752,
        -352
      ],
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\nconst ctx = $('Code: extract_ngrams').first().json\n  //$items(\"Code: build_vector_literal\", 0, $itemIndex).json;\n\nconst out = $input.all().map((c, idx) => ({ json: { \n  ok: c.json.similarity>=ctx.threshold,\n  candidate: $('Code: explode_candidates').all()[idx].json.candidate, \n  matched: c.json.name_text,\n  canonical: c.json.canonical_name,\n    similarity:c.json.similarity\n   } }));\nreturn out;"
      },
      "id": "b1233dbd-48fb-4bc5-89aa-d78aabea451f",
      "name": "Code: pass_threshold",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2992,
        -352
      ]
    },
    {
      "parameters": {
        "jsCode": "// Collect ok=true, dedupe by canonical, keep highest similarity and longest phrase on tie\nconst items = $input.all().map(i => i.json).filter(j => j.ok);\nconst best = new Map();\nfor (const h of items) {\n  const key = h.canonical || h.matched || 'unknown';\n  const prev = best.get(key);\n  if (!prev || h.similarity > prev.similarity || (h.similarity === prev.similarity && (h.candidate?.length||0) > (prev.candidate?.length||0))) {\n    best.set(key, h);\n  }\n}\nreturn [{ json: { hits: Array.from(best.values()) } }];"
      },
      "id": "bafddbc6-d004-4ee5-a3fb-29e7987d2fe8",
      "name": "Code: aggregate_hits",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3280,
        -352
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        1008,
        -160
      ],
      "id": "df46c49b-05c0-4d5e-94e6-813368a69af1",
      "name": "When clicking ‘Execute workflow’",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9eca61e-568e-4e7c-9484-783dc3775386",
              "name": "company_name",
              "value": "KIBERone Саратов Октябрьский",
              "type": "string"
            },
            {
              "id": "04c0f1a2-05c0-4d0d-b6bb-70f6f097e819",
              "name": "text",
              "value": "kyrochka https scrach mit edu projects 1192006075 вроде это",
              "type": "string"
            },
            {
              "id": "543a65b2-a6be-4d52-9130-a4714b59f4ae",
              "name": "threshold",
              "value": 0.8,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1216,
        -160
      ],
      "id": "668b380e-214d-4965-bf0d-fc9a3ebf0b17",
      "name": "Edit Fields",
      "disabled": true
    }
  ],
  "connections": {
    "Webhook In": {
      "main": [
        [
          {
            "node": "Code: extract_ngrams",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: extract_ngrams": {
      "main": [
        [
          {
            "node": "Code: explode_candidates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: explode_candidates": {
      "main": [
        [
          {
            "node": "HTTP: OpenAI Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: OpenAI Embeddings": {
      "main": [
        [
          {
            "node": "Code: build_vector_literal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: build_vector_literal": {
      "main": [
        [
          {
            "node": "Postgres: vector search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: vector search": {
      "main": [
        [
          {
            "node": "Code: pass_threshold",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: pass_threshold": {
      "main": [
        [
          {
            "node": "Code: aggregate_hits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code: extract_ngrams",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "754dd90c-e6f3-4758-9bac-b9f7cc45aa04",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-28T09:46:36.851Z",
      "updatedAt": "2025-08-28T09:46:36.851Z",
      "role": "workflow:owner",
      "workflowId": "gBOZZNnM20uLrxNA",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}