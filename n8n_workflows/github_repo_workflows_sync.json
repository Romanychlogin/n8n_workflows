{
  "createdAt": "2025-09-23T20:32:53.458Z",
  "updatedAt": "2025-09-26T10:05:42.328Z",
  "id": "buEFTEMfZEENQOel",
  "name": "github_repo_workflows_sync",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "create",
        "workflowObject": "={{ $json.toJsonString()  }}",
        "requestOptions": {}
      },
      "id": "592987f5-f3d3-4c45-aa82-1ed3949293a0",
      "name": "Create new workflow in n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        832,
        1360
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "WLaJZQv44MOJEghD",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 10
            }
          ]
        }
      },
      "id": "6af1e087-45d9-4417-83db-db739b771525",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -2544,
        352
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "list",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.github_account_name }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.github_repo_name }}"
        },
        "filePath": "=/{{ $json.repo_workflows_path }}"
      },
      "id": "fe21d66e-c40c-4eb0-b33e-ab7c4afaffec",
      "name": "List files from repo",
      "type": "n8n-nodes-base.github",
      "position": [
        -2032,
        496
      ],
      "webhookId": "0614066f-212d-4f9e-9da2-fa4a80b44baf",
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Set GitHub Details').item.json.github_account_name }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Set GitHub Details').item.json.github_repo_name }}"
        },
        "filePath": "={{ $json.path }}",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "6292c15d-c900-48b5-af87-6b5b139f5fee",
      "name": "GitHub",
      "type": "n8n-nodes-base.github",
      "position": [
        -1392,
        480
      ],
      "webhookId": "71ad7d84-99cd-4fbd-a365-52537e69525b",
      "typeVersion": 1.1,
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "033ef7c8-35f9-4f8a-b241-15d8ab61e631",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -1696,
        272
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "WLaJZQv44MOJEghD",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Set GitHub Details').item.json.github_account_name }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Set GitHub Details').item.json.github_repo_name }}"
        },
        "filePath": "={{ $('Set GitHub Details').item.json.repo_workflows_path }}/{{ $node['Edit for Upload'].json.fileName }}",
        "fileContent": "={{ $('To base64').item.json.data }}",
        "commitMessage": "=n8n_backup_sync-{{ $node['Edit for Upload'].json.commitDate }}",
        "additionalParameters": {
          "branch": {
            "branch": "main"
          }
        }
      },
      "id": "11298bb2-53e4-4251-b038-c98e53637f34",
      "name": "Upload file",
      "type": "n8n-nodes-base.github",
      "position": [
        960,
        -16
      ],
      "webhookId": "ce4b561b-acb9-4cd8-b76f-4928dada9674",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "options": {
          "format": true
        }
      },
      "id": "a7403b23-4028-464a-bf92-64317ef73fc1",
      "name": "Json file",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        288,
        -16
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "0f4018a7-2ee0-4cb0-9805-3e8edda31120",
      "name": "To base64",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        512,
        -16
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## CHECK WHICH IS NEWER\n\n**IF TRUE** github workflow is the most recent, n8n to be updated\n\n**IF FALSE** n8n workflow is the most recent, github to be updated\n\n",
        "height": 400,
        "width": 340,
        "color": 3
      },
      "id": "b10d6a32-494f-4b36-a711-13a7cf70efd0",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -944,
        176
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Set GitHub Details').first().json.github_account_name }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Set GitHub Details').first().json.github_repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Set GitHub Details').first().json.repo_workflows_path }}/{{ $node['Edit for Update'].json.fileName }}",
        "fileContent": "={{ $('To base').item.json.data }}",
        "commitMessage": "=n8n_backup_sync-{{ $('Edit for Update').item.json.commitDate }}"
      },
      "id": "7859a1c6-c715-4c85-9a78-2e1b64c8d35b",
      "name": "Update file",
      "type": "n8n-nodes-base.github",
      "position": [
        1984,
        640
      ],
      "webhookId": "27218087-8df7-474d-a39f-70cfa9c34ec8",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "options": {
          "format": true
        }
      },
      "id": "470a0c54-8412-4bbb-b863-4a346fff3d82",
      "name": "Json file1",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        1328,
        640
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "b64f16d0-2f23-463d-9c2d-ceb99fe8c57b",
      "name": "To base",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        1552,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "name",
              "field2": "name"
            }
          ]
        },
        "options": {}
      },
      "id": "2c39e20e-46b7-4a48-b4f9-aea25cf96012",
      "name": "n8n vs GitHub",
      "type": "n8n-nodes-base.compareDatasets",
      "position": [
        -816,
        352
      ],
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "operation": "update",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.dataset.id }}"
        },
        "workflowObject": "={{ $json.dataset.toJsonString() }}",
        "requestOptions": {}
      },
      "id": "4e6efd2c-97d0-4190-927b-36238e1866ba",
      "name": "Update workflow in n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        1632,
        384
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "WLaJZQv44MOJEghD",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Get the desired workflow name\nworkflow_id = _('If n8n before GitHub').first().json['same']['id']\n\n# Get all decoded workflow items\nall_decoded = _('Decode to json').all()\n\n# Filter for the matching one\nmatched = [\n    item.json \n    for item in all_decoded \n    if item.json.get('id') == workflow_id\n]\n\n# If there's a match, return it (or empty if none)\nif matched:\n    return [{'json': {'dataset': matched[0]}}]\nelse:\n    return []\n"
      },
      "id": "2969db28-a833-4f64-91d1-fe80adc2a078",
      "name": "Code - InputB",
      "type": "n8n-nodes-base.code",
      "position": [
        1408,
        384
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// 1) Собираем ВСЕ искомые id из узла \"If n8n before GitHub\"\nconst srcItems = $('If n8n before GitHub').all().map(i => i.json || {});\nconst wantedIds = srcItems\n  .map(j => j?.same?.id)\n  .filter(id => id !== undefined && id !== null)\n  .map(id => String(id));\n\nif (wantedIds.length === 0) {\n  return [];\n}\n\n// 2) Берём все элементы из узла \"if is not archived\", ВЕТКА TRUE (индекс 0) \n// и индексируем их по полю id (как строке)\nconst index = new Map();\nfor (const it of $('if is not archived').all()) {\n  const j = it.json || {};\n  const key = j.id !== undefined && j.id !== null ? String(j.id) : null;\n  if (!key) continue;\n  if (!index.has(key)) index.set(key, []);\n  index.get(key).push(j);\n}\n\n// 3) Формируем выход: для каждого исходного id — каждое совпадение отдельным item\nconst out = [];\nfor (const wid of wantedIds) {\n  const matches = index.get(wid) || [];\n  for (const m of matches) {\n    out.push({ json: { matched_id: wid, dataset: m } });\n  }\n}\n\nreturn out;"
      },
      "id": "1ca91038-cf19-4ef3-b4b1-43f14e367a4f",
      "name": "Code - InputA",
      "type": "n8n-nodes-base.code",
      "position": [
        880,
        640
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.dataset }}",
        "options": {}
      },
      "id": "38db24ad-337c-4503-87e4-af92f79f6483",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "position": [
        1104,
        640
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fe4a36ef-9f04-40e3-99bd-cc517a49b440",
              "name": "commitDate",
              "type": "string",
              "value": "={{ $now.format('dd-MM-yyyy/H:mm') }}"
            },
            {
              "id": "b0fe1bcc-e79c-4a6b-b8b4-44222c8bf4e8",
              "name": "fileName",
              "type": "string",
              "value": "={{ $('Set file name').item.json.file_name }}"
            }
          ]
        },
        "options": {}
      },
      "id": "43714eeb-577a-4960-a5fa-633c5028c3dc",
      "name": "Edit for Upload",
      "type": "n8n-nodes-base.set",
      "position": [
        736,
        -16
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fe4a36ef-9f04-40e3-99bd-cc517a49b440",
              "name": "commitDate",
              "type": "string",
              "value": "={{ $now.format('dd-MM-yyyy/H:mm') }}"
            },
            {
              "id": "b0fe1bcc-e79c-4a6b-b8b4-44222c8bf4e8",
              "name": "fileName",
              "type": "string",
              "value": "={{\n$('Code - InputA').item.json.dataset.name.trim().replace(/\\s+/g, '-').toLowerCase()\n}}.json"
            }
          ]
        },
        "options": {}
      },
      "id": "d2983c15-1734-4f23-b7a8-50d5b97d62f0",
      "name": "Edit for Update",
      "type": "n8n-nodes-base.set",
      "position": [
        1776,
        640
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## IF ONLY IN N8N\nUpdate GitHub with the relevant workflows",
        "height": 336,
        "width": 1208
      },
      "id": "74a467b0-c8ea-43c1-940b-ff55f16bffe3",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -32,
        -128
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## IF ONLY IN GITHUB\nCreate new workflow in n8n",
        "height": 340,
        "width": 340,
        "color": 6
      },
      "id": "6e932401-f5b4-45b0-9e70-4d67d53a0c72",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        784,
        1232
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "8ccf743b-3a66-44c0-a30b-72a1d4bcf60b",
              "operator": {
                "type": "dateTime",
                "operation": "before"
              },
              "leftValue": "={{ $json.different.updatedAt.inputA }}",
              "rightValue": "={{ $json.different.updatedAt.inputB }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d1e778ab-60d5-4357-b606-373cfd575053",
      "name": "If n8n before GitHub",
      "type": "n8n-nodes-base.if",
      "position": [
        224,
        640
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{  $json.content.base64Decode() }}",
        "options": {}
      },
      "id": "64c494ae-01be-469c-926d-671fd1ff5c5f",
      "name": "Decode to json",
      "type": "n8n-nodes-base.set",
      "position": [
        -1232,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "b9ed0bad-4ebe-4378-807e-1a6082c4461d",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.name }}",
              "rightValue": "placeholder"
            }
          ]
        },
        "options": {}
      },
      "id": "2d127288-d3ed-47a2-a2d9-9aa30fcd30ff",
      "name": "Filter",
      "type": "n8n-nodes-base.filter",
      "position": [
        -1840,
        512
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "850e7497-0f2f-470e-a5a2-a85a0c12aaa2",
              "name": "github_account_name",
              "type": "string",
              "value": "Romanychlogin"
            },
            {
              "id": "5c2be15a-cb93-4fe4-a512-03a1880b8713",
              "name": "github_repo_name",
              "type": "string",
              "value": "n8n_workflows"
            },
            {
              "id": "f4f1f0c3-7a89-427c-942f-d0e74ba4583f",
              "name": "repo_workflows_path",
              "type": "string",
              "value": "n8n_workflows"
            }
          ]
        },
        "options": {}
      },
      "id": "9aea8f69-4f89-47d8-ab96-e57142182a91",
      "name": "Set GitHub Details",
      "type": "n8n-nodes-base.set",
      "position": [
        -2320,
        352
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5a702dad-e85f-40f4-8261-3f3e6a573fe0",
              "leftValue": "={{ $json.name }}",
              "rightValue": ".json",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1648,
        512
      ],
      "id": "1804ab63-6675-428b-87a2-abbefaf37584",
      "name": "if json in file name"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f26142d-7646-4988-87d4-36b191d270df",
              "leftValue": "={{ $json.isArchived }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1488,
        272
      ],
      "id": "0067de16-31a9-4597-a5cd-16b5890b27ca",
      "name": "if is not archived"
    },
    {
      "parameters": {
        "chatId": "-1003052639964",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": true,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1808,
        64
      ],
      "id": "4e432949-7630-409d-8954-e89772a17251",
      "name": "Send a incident message",
      "webhookId": "a18d9a87-250a-437a-9193-952ef1cc833c",
      "credentials": {
        "telegramApi": {
          "id": "ttGHKrzQMaymkKXW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "content": "Ветка для обратной загрузки в n8n - отключена\n",
        "height": 304,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1296,
        256
      ],
      "id": "4fdaf104-7a92-466c-b53c-b9febb1b2cd5",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "let incident_text = '*Ошибка экспорта в gitHub*\\n';\nconst now = new Date();\n// Экранирование под Telegram MarkdownV2\nfunction escapeMarkdownV2(s) {\n  // список из оф. доки Telegram для MarkdownV2:\n  // _ * [ ] ( ) ~ ` > # + - = | { } . !\n  return String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\nincident_text =incident_text+'*'+now.toLocaleTimeString('ru-RU', { timeZone:'Europe/Moscow', hour: '2-digit', minute: '2-digit' })+' MSK*\\n';\nincident_text =incident_text+' Error processing workflow: ' + escapeMarkdownV2($input.first().json.fileName);\n\nreturn [{ json: { text: incident_text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        64
      ],
      "id": "217a8101-9a54-4799-87c3-d8122620ad1f",
      "name": "Set error message",
      "executeOnce": false
    },
    {
      "parameters": {
        "chatId": "-1003052639964",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": true,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        496,
        1360
      ],
      "id": "a0fa0144-5daf-45fa-be21-364caa8ef115",
      "name": "Send a incident message1",
      "webhookId": "a18d9a87-250a-437a-9193-952ef1cc833c",
      "credentials": {
        "telegramApi": {
          "id": "ttGHKrzQMaymkKXW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Собираем все входные элементы\nconst items = $input.all();\n\n// Экранирование под Telegram MarkdownV2\nfunction escapeMarkdownV2(s) {\n  // _ * [ ] ( ) ~ ` > # + - = | { } . !\n  return String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\n// Заголовок + дата/время — один раз\nconst now = new Date();\nlet incident_text = '*Внимание, в GitHub найдены новые workflow*\\n';\nincident_text += '*' \n \n  + escapeMarkdownV2(now.toLocaleTimeString('ru-RU', { timeZone: 'Europe/Moscow', hour: '2-digit', minute: '2-digit' })) \n  + ' MSK*\\n';\n\n// Добавляем строки для каждого входного элемента\nfor (const it of items) {\n  const fileName = it.json.fileName ?? '(без имени)';\n  incident_text += '• workflow: ' + escapeMarkdownV2($json.name) + '\\n';\n}\n\n// Возвращаем одним сообщением\nreturn [{ json: { text: incident_text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        1360
      ],
      "id": "b8abefcc-cd74-4d9d-b305-6d730ae4f00b",
      "name": "Set error message1",
      "executeOnce": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2496,
        224
      ],
      "id": "b0aea046-eab9-432e-ba6d-8aaa159de65e",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "let incident_text = '*Экспорт а gitHub выполнен*\\n';\nconst items = $input.all();\nconst now = new Date();\n// Экранирование под Telegram MarkdownV2\nfunction escapeMarkdownV2(s) {\n  // список из оф. доки Telegram для MarkdownV2:\n  // _ * [ ] ( ) ~ ` > # + - = | { } . !\n  return String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n$json.content.name\nincident_text =incident_text+'*'+now.toLocaleTimeString('ru-RU', { timeZone:'Europe/Moscow', hour: '2-digit', minute: '2-digit' })+' MSK*\\n';\n// Строка для каждого входного объекта\nfor (const it of items) {\n  const mode = String(it.json?.mode ?? '').toLowerCase();\n  const name = escapeMarkdownV2(it.json?.content?.name ?? '(без имени)');\n  if (mode === 'created') {\n    incident_text += 'Добавлен процесс: ' + name + '\\n';\n  } else if (mode === 'modified') {\n    incident_text += 'Обновлен процесс: ' + name + '\\n';\n  }\n}\n\nreturn [{ json: { text: incident_text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2816,
        224
      ],
      "id": "3ad1c32d-2079-443c-a4c1-b50d7563f8f3",
      "name": "Set success message",
      "executeOnce": false
    },
    {
      "parameters": {
        "chatId": "-1003120484933",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": true,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3312,
        192
      ],
      "id": "8e9140e0-834f-4520-aaeb-7ef1e0952743",
      "name": "Send a success",
      "webhookId": "a18d9a87-250a-437a-9193-952ef1cc833c",
      "credentials": {
        "telegramApi": {
          "id": "ttGHKrzQMaymkKXW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        -1152,
        1072
      ],
      "id": "9274b2d7-5cdf-4488-99ab-c8b1af7d2fa3",
      "name": "Get many workflows",
      "executeOnce": true,
      "credentials": {
        "n8nApi": {
          "id": "WLaJZQv44MOJEghD",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f26142d-7646-4988-87d4-36b191d270df",
              "leftValue": "={{ $json.isArchived }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -736,
        1088
      ],
      "id": "b3d373e1-ac05-4b38-a1c6-5d44d28bebac",
      "name": "if is archived"
    },
    {
      "parameters": {
        "content": "если процесс архивный то не создаем новый",
        "height": 368,
        "width": 1056
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1248,
        976
      ],
      "id": "c727e495-f6ee-40b3-a633-4cfa795bda09",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "name",
              "field2": "name"
            }
          ]
        },
        "options": {}
      },
      "id": "6f51c695-4f7a-4ba9-98a6-2190640d64be",
      "name": "n8n archived vs GitHub new",
      "type": "n8n-nodes-base.compareDatasets",
      "position": [
        -496,
        1040
      ],
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "34149b7d-26b0-4cee-a338-49469d2514b4",
              "name": "mode",
              "value": "created",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1392,
        -96
      ],
      "id": "4270930c-f5f2-4b5b-93a7-d1897a846749",
      "name": "created"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "34149b7d-26b0-4cee-a338-49469d2514b4",
              "name": "mode",
              "value": "modified",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2224,
        528
      ],
      "id": "4e49a2d7-5c77-4622-a51f-afdd9e5a8081",
      "name": "modified"
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        480,
        352
      ],
      "id": "0a36afbf-0904-4f87-8cd9-9c907c58ff43",
      "name": "Get many workflows1",
      "executeOnce": true,
      "credentials": {
        "n8nApi": {
          "id": "WLaJZQv44MOJEghD",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f26142d-7646-4988-87d4-36b191d270df",
              "leftValue": "={{ $json.isArchived }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        688,
        368
      ],
      "id": "af9a5514-d2ca-4146-a957-6f1bb8e325a9",
      "name": "if is archived1"
    },
    {
      "parameters": {
        "content": "если процесс архивный то не обновляем",
        "height": 336,
        "width": 1056
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        208,
        256
      ],
      "id": "14dbd8f6-7da1-42b6-a78f-4f9ae0f5eff8",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "name",
              "field2": "name"
            }
          ]
        },
        "options": {}
      },
      "id": "ea2a290b-9e66-4d6b-b9a3-6a34d7b73721",
      "name": "n8n archived vs GitHub new1",
      "type": "n8n-nodes-base.compareDatasets",
      "position": [
        928,
        320
      ],
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "chatId": "-1003052639964",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": true,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2576,
        704
      ],
      "id": "61abf7b0-f60a-4e71-8bb7-8d8633a65655",
      "name": "Send a incident message2",
      "webhookId": "a18d9a87-250a-437a-9193-952ef1cc833c",
      "credentials": {
        "telegramApi": {
          "id": "ttGHKrzQMaymkKXW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let incident_text = '*Ошибка импорта в n8n из gitHub*\\n';\nconst now = new Date();\n// Экранирование под Telegram MarkdownV2\nfunction escapeMarkdownV2(s) {\n  // список из оф. доки Telegram для MarkdownV2:\n  // _ * [ ] ( ) ~ ` > # + - = | { } . !\n  return String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\nincident_text =incident_text+'*'+now.toLocaleTimeString('ru-RU', { timeZone:'Europe/Moscow', hour: '2-digit', minute: '2-digit' })+' MSK*\\n';\nincident_text =incident_text+' Error processing workflow: ' + escapeMarkdownV2($input.first().json.fileName);\n\nreturn [{ json: { text: incident_text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2288,
        704
      ],
      "id": "6f97702b-67ff-4e11-b069-41b6d29ac804",
      "name": "Set error message2",
      "executeOnce": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ad2a692e-1261-4072-bdac-88edb07525ea",
              "name": "file_name",
              "value": "={{$json.name.trim().replace(/\\s+/g, '-').toLowerCase() }}.json",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        48,
        -16
      ],
      "id": "97e77c41-c6f9-451e-87db-ce7ba517dd64",
      "name": "Set file name"
    }
  ],
  "connections": {
    "n8n": {
      "main": [
        [
          {
            "node": "if is not archived",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "if json in file name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub": {
      "main": [
        [
          {
            "node": "Decode to json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To base": {
      "main": [
        [
          {
            "node": "Edit for Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Json file": {
      "main": [
        [
          {
            "node": "To base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To base64": {
      "main": [
        [
          {
            "node": "Edit for Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Json file1": {
      "main": [
        [
          {
            "node": "To base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Json file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - InputA": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - InputB": {
      "main": [
        [
          {
            "node": "Update workflow in n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n vs GitHub": {
      "main": [
        [
          {
            "node": "Set file name",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "If n8n before GitHub",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          },
          {
            "node": "n8n archived vs GitHub new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode to json": {
      "main": [
        [
          {
            "node": "n8n vs GitHub",
            "type": "main",
            "index": 1
          }
        ],
        []
      ]
    },
    "Edit for Update": {
      "main": [
        [
          {
            "node": "Update file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit for Upload": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Set GitHub Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set GitHub Details": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          },
          {
            "node": "List files from repo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If n8n before GitHub": {
      "main": [
        [
          {
            "node": "Get many workflows1",
            "type": "main",
            "index": 0
          },
          {
            "node": "n8n archived vs GitHub new1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code - InputA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List files from repo": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if json in file name": {
      "main": [
        [
          {
            "node": "GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "created",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set error message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if is not archived": {
      "main": [
        [
          {
            "node": "n8n vs GitHub",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Set error message": {
      "main": [
        [
          {
            "node": "Send a incident message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set error message1": {
      "main": [
        [
          {
            "node": "Send a incident message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update file": {
      "main": [
        [
          {
            "node": "modified",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set error message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Set success message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set success message": {
      "main": [
        [
          {
            "node": "Send a success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many workflows": {
      "main": [
        [
          {
            "node": "if is archived",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if is archived": {
      "main": [
        [
          {
            "node": "n8n archived vs GitHub new",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "n8n archived vs GitHub new": {
      "main": [
        [
          {
            "node": "Set error message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a incident message": {
      "main": [
        []
      ]
    },
    "created": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "modified": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get many workflows1": {
      "main": [
        [
          {
            "node": "if is archived1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if is archived1": {
      "main": [
        [
          {
            "node": "n8n archived vs GitHub new1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "n8n archived vs GitHub new1": {
      "main": [
        []
      ]
    },
    "Set error message2": {
      "main": [
        [
          {
            "node": "Send a incident message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set file name": {
      "main": [
        [
          {
            "node": "Json file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "454048b9-d144-4d04-8590-7557159559b6",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-23T20:32:53.458Z",
      "updatedAt": "2025-09-23T20:32:53.458Z",
      "role": "workflow:owner",
      "workflowId": "buEFTEMfZEENQOel",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}