{
  "createdAt": "2025-09-19T08:56:54.078Z",
  "updatedAt": "2025-09-22T16:56:03.458Z",
  "id": "wycPS2KeZkmdbajx",
  "name": "New_client_creation",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id, started)\nSELECT MAX(business_process_id), $2,$3, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -288,
        -240
      ],
      "id": "5dec9739-98cc-4a55-ac22-0be8c06fb134",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -976,
        -240
      ],
      "id": "3d3c4785-920e-4e82-9390-6db96b8861ba",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        -240
      ],
      "id": "0ed6f698-5902-4000-a114-c3b7e22cdac7",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW() where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        768
      ],
      "id": "3bbb392f-da13-41c4-8219-932c6fddb68e",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1888,
        -208
      ],
      "id": "42b0d487-3fc5-45cb-99f8-38ff61951060",
      "name": "Mark_workflow_passed_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        -208
      ],
      "id": "dd0b2cbe-60fc-440d-a4dd-8ad340c76697",
      "name": "Get current step saved"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        528,
        -240
      ],
      "id": "554593fc-e67b-4ac6-83d7-3eb0a582e0e6",
      "name": "Execute a SQL query",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": " company services",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        352,
        -240
      ],
      "id": "85d4c0ac-3ba5-4cc2-829c-9848d27a6a95",
      "name": "set workflow name"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        720,
        -240
      ],
      "id": "9ebdf675-3010-4d4f-967f-83efddcde907",
      "name": "If SUB process  already executed",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1408,
        -224
      ],
      "id": "33ea698b-6533-4a44-8039-316eb3dd7166",
      "name": "Call SUB"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_total=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{ 2 }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        112,
        -240
      ],
      "id": "0a287779-f23d-494f-84a3-ec168922b9dc",
      "name": "Mark_workflow_total_steps(manually)",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('set workflow name').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        960,
        -224
      ],
      "id": "9a2c9318-687c-46a3-b8f4-8d917c9337da",
      "name": "get workflow id by name",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('Execute a SQL query2').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "48e226e1-eec4-4875-abbe-f3bf61e9d335",
              "name": "company_name",
              "value": "={{ $('Set variables').item.json.company_name }}",
              "type": "string"
            },
            {
              "id": "4cf917dc-0b21-4e3e-817f-503d04a054c0",
              "name": "yandex_id",
              "value": "={{ $('Set variables').item.json.yandex_id }}",
              "type": "number"
            },
            {
              "id": "6c7abd86-fe5e-4fd8-9b45-8052122d62ee",
              "name": "yandex_region",
              "value": "={{ $('Set variables').item.json.yandex_region }}",
              "type": "string"
            },
            {
              "id": "608ffe3a-1151-49e8-9fd5-934995944be7",
              "name": "services_description_url",
              "value": "={{ $('Set variables').item.json.services_description_url}}",
              "type": "string"
            },
            {
              "id": "74ffc861-c15d-4994-bedd-a920ad81d955",
              "name": "user_content_dropbox_folder",
              "value": "={{ $('Set variables').item.json.user_content_dropbox_folder}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1152,
        -224
      ],
      "id": "1f65542d-fa65-41af-95fc-fdfe5235b826",
      "name": "set input data for SUB"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5b3485a2-cb50-486a-932c-fc27de0a25da",
              "name": "company_name",
              "value": "Kartica Trebica",
              "type": "string"
            },
            {
              "id": "84d45310-3810-4151-88b4-4782f16e6319",
              "name": "company_url",
              "value": "https://karticatrebica.rs/stats-beta/",
              "type": "string"
            },
            {
              "id": "b6898b14-3324-4cee-a1ae-32b2d48b4afe",
              "name": "threshhold",
              "value": 0.88,
              "type": "number"
            },
            {
              "id": "f85ed5f7-e09e-4e66-8998-89d0d8058173",
              "name": "yandex_region",
              "value": "Сербия",
              "type": "string"
            },
            {
              "id": "748715ad-66a5-4f92-842f-c446553809cd",
              "name": "yandex_id",
              "value": 0,
              "type": "number"
            },
            {
              "id": "119ce8c7-ac5a-4e9f-9e21-a3a6a0282081",
              "name": "services_description_url",
              "value": "https://www.dropbox.com/scl/fi/90f3et27d0wd4w9waiui8/.txt?rlkey=bgnaia5wvs9ymss29ou0mf2dg&dl=1",
              "type": "string"
            },
            {
              "id": "8939fde5-d7b7-4679-a9dc-4c20aec9614d",
              "name": "user_content_dropbox_folder",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -736,
        -240
      ],
      "id": "0e26ee11-0f73-47ff-bdf5-a1266789373d",
      "name": "Set variables"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1872,
        368
      ],
      "id": "51202aca-c2d4-4088-a71e-be908529148e",
      "name": "Mark_workflow_passed_steps1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1632,
        368
      ],
      "id": "8e4e0b31-684f-4b0e-9aed-db8e7f647f10",
      "name": "Get current step saved1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        816,
        256
      ],
      "id": "f694893c-fd9f-49af-86a9-5c3e8831a1ec",
      "name": "If SUB process  already executed1",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1392,
        368
      ],
      "id": "1821d75b-b10f-4f7c-bbf0-565d2005b3e2",
      "name": "Call SUB1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADS headers and texts creation services').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1008,
        272
      ],
      "id": "c82ffd90-0bc9-4ff8-98c8-4fa79d156524",
      "name": "get workflow id by name1",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('Execute a SQL query2').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "48e226e1-eec4-4875-abbe-f3bf61e9d335",
              "name": "company_name",
              "value": "={{ $('Set variables').item.json.company_name }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1200,
        368
      ],
      "id": "5b0be902-b179-4092-b708-2b26a228f8eb",
      "name": "set input data for SUB1"
    },
    {
      "parameters": {
        "content": "анализируем все !!не завершенные запуски!! основного процесса после предыдущего успешного завершения. Если для них подпроцесс успешно завершился то его повторно не дергаем",
        "height": 128,
        "width": 624
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -352,
        -496
      ],
      "id": "14b20dda-c4cc-42d5-b08e-d74a37a5fa93",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        656,
        256
      ],
      "id": "011225cf-bf8f-4d6d-bd7f-27c06acbf743",
      "name": "Execute a SQL query1",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADS headers and texts creation services",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        464,
        256
      ],
      "id": "b298355d-7800-4eab-9b7f-22d262582506",
      "name": "ADS headers and texts creation services"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.companies (company_name,company_url,yandex_id,yandex_region)\nVALUES ($1,$2,$3,$4)\nON CONFLICT (company_name)\nDO UPDATE SET company_name = EXCLUDED.company_name\nRETURNING company_id;",
        "options": {
          "queryReplacement": "=[{{$json.company_name}},{{$json.company_url}},{{$json.yandex_id}},{{$json.yandex_region}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -528,
        -240
      ],
      "id": "0b3b2877-6bd0-4793-b070-77602660fb8a",
      "name": "Execute a SQL query2",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        0,
        256
      ],
      "id": "dba99c77-bbe4-43b0-b622-e4a07cf76bd5",
      "name": "Mark_skipped_workflow_passed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        256
      ],
      "id": "c218867a-2292-4454-8e70-b19dbdb6b9e0",
      "name": "Mark skipped step passed"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('set workflow name').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        224,
        256
      ],
      "id": "b5479a50-f6d9-46d5-a1b0-0d89ba669a47",
      "name": "update workflow tokens usage",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow 1\n",
        "height": 384,
        "width": 1712
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        336,
        -320
      ],
      "id": "1ae73495-6b4c-47e0-bd23-13d2081f6fec",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "workflow 1\n",
        "height": 448,
        "width": 1696
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        416,
        128
      ],
      "id": "f94c1429-ea32-4066-a8f6-1f0a949d8584",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1824,
        960
      ],
      "id": "8ad99904-25d2-402e-8d98-a0bafaa2e4df",
      "name": "Mark_workflow_passed_steps2",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        960
      ],
      "id": "d1a7017e-54fa-4dfa-a103-8c4f82c1b4a8",
      "name": "Get current step saved2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        768,
        848
      ],
      "id": "45967ee5-535c-40ca-82bc-f4ba68dce1c7",
      "name": "If SUB process  already executed2",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1344,
        960
      ],
      "id": "d008f2ec-91fb-45a0-98c9-d555e95aaa5b",
      "name": "Call SUB2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADS headers and texts creation services1').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        960,
        864
      ],
      "id": "d2fa0a50-6bf8-4045-86e4-c304149c6e82",
      "name": "get workflow id by name2",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('Execute a SQL query2').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "48e226e1-eec4-4875-abbe-f3bf61e9d335",
              "name": "company_name",
              "value": "={{ $('Set variables').item.json.company_name }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1152,
        960
      ],
      "id": "0997c638-3359-42fe-a877-facb92ddbaf3",
      "name": "set input data for SUB2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        608,
        848
      ],
      "id": "05869120-e7cd-4a2d-ac65-279991d6ab5a",
      "name": "Execute a SQL query3",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADS headers and texts creation services",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        416,
        848
      ],
      "id": "5616b8ee-8407-4519-b25b-41ba1a838cf1",
      "name": "ADS headers and texts creation services1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -48,
        848
      ],
      "id": "ea2e5814-1828-45d3-b5e4-597c40253162",
      "name": "Mark_skipped_workflow_passed1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        848
      ],
      "id": "60b7a614-c57d-4719-816b-2b76b198ab05",
      "name": "Mark skipped step passed1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('set workflow name').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        176,
        848
      ],
      "id": "49dac10d-e2a2-457c-b723-22f345992a80",
      "name": "update workflow tokens usage1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow 1\n",
        "height": 448,
        "width": 1696
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        368,
        720
      ],
      "id": "27409476-1679-42eb-8186-ca55f401af6a",
      "name": "Sticky Note3"
    }
  ],
  "connections": {
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Mark_workflow_total_steps(manually)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "If SUB process  already executed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set workflow name": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed": {
      "main": [
        [
          {
            "node": "Mark skipped step passed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB": {
      "main": [
        [
          {
            "node": "Get current step saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps": {
      "main": [
        [
          {
            "node": "update workflow tokens usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_total_steps(manually)": {
      "main": [
        [
          {
            "node": "set workflow name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name": {
      "main": [
        [
          {
            "node": "set input data for SUB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB": {
      "main": [
        [
          {
            "node": "Call SUB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set variables": {
      "main": [
        [
          {
            "node": "Execute a SQL query2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved1": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed1": {
      "main": [
        [
          {
            "node": "Mark skipped step passed1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB1": {
      "main": [
        [
          {
            "node": "Get current step saved1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name1": {
      "main": [
        [
          {
            "node": "set input data for SUB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB1": {
      "main": [
        [
          {
            "node": "Call SUB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps1": {
      "main": [
        [
          {
            "node": "update workflow tokens usage1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "If SUB process  already executed1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADS headers and texts creation services": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query2": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_skipped_workflow_passed": {
      "main": [
        [
          {
            "node": "update workflow tokens usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark skipped step passed": {
      "main": [
        [
          {
            "node": "Mark_skipped_workflow_passed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage": {
      "main": [
        [
          {
            "node": "ADS headers and texts creation services",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved2": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed2": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB2": {
      "main": [
        [
          {
            "node": "Get current step saved2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name2": {
      "main": [
        [
          {
            "node": "set input data for SUB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB2": {
      "main": [
        [
          {
            "node": "Call SUB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query3": {
      "main": [
        [
          {
            "node": "If SUB process  already executed2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADS headers and texts creation services1": {
      "main": [
        [
          {
            "node": "Execute a SQL query3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_skipped_workflow_passed1": {
      "main": [
        [
          {
            "node": "update workflow tokens usage1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark skipped step passed1": {
      "main": [
        [
          {
            "node": "Mark_skipped_workflow_passed1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage1": {
      "main": [
        [
          {
            "node": "ADS headers and texts creation services1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps2": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When clicking ‘Execute workflow’": [
      {
        "json": {}
      }
    ]
  },
  "versionId": "3f5bd099-aa88-4a24-bf49-e1d8369dc0d1",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-19T08:56:54.078Z",
      "updatedAt": "2025-09-19T08:56:54.078Z",
      "role": "workflow:owner",
      "workflowId": "wycPS2KeZkmdbajx",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}