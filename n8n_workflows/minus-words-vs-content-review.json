{
  "createdAt": "2025-10-20T11:14:53.972Z",
  "updatedAt": "2025-10-21T07:28:01.440Z",
  "id": "dSYXe1nfeCvfozcQ",
  "name": "minus words vs content review",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -4080,
        -384
      ],
      "id": "291d5162-89da-4303-9cca-c5035fe9301b",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW(),tokens_used=0,steps_passed=1,steps_total=1 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1344,
        -1296
      ],
      "id": "bab4fa97-bd10-4819-ae2b-73b08c7bc74b",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id,n8n_workflow_root_execution_id, started)\nSELECT MAX(business_process_id), $2,$3,$4, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}},{{ $('When Executed by Another Workflow').item.json.root_execution_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3808,
        -384
      ],
      "id": "96866a0e-abc5-4743-b073-7534819b37b5",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nworkflowData.tokens_used = 0;\nworkflowData.step = 0;\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        -1168
      ],
      "id": "68cb8b05-9d21-4074-a3dc-3fdabb0326f4",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  v.minus_word,\n  v.id,\n  ct.phrase,\n  ct.content_id,\n  ct.report_id,\n  1 - (v.minus_word_embedding <=> ct.phrase_embedding) AS similarity\nFROM company_content ct\nCROSS JOIN LATERAL (\n  SELECT v.minus_word, v.id, v.minus_word_embedding\n  FROM minus_words v\n  WHERE v.company_id = $1\n  ORDER BY v.minus_word_embedding <=> ct.phrase_embedding\n  LIMIT 50                           -- подберите k экспериментально\n) v\nWHERE ct.company_id = $1\n  AND 1 - (v.minus_word_embedding <=> ct.phrase_embedding) > $2\n  AND ct.report_id<>0 -- не включаем в анализ изначальный контент \n  AND ct.phrase_embedding IS NOT NULL;",
        "options": {
          "queryReplacement": "={{ $('When Executed by Another Workflow').item.json.company_id }},{{$json.threshold  }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2160,
        -400
      ],
      "id": "22cf5131-f5bd-420f-b192-0e20113a70b7",
      "name": "Get matched minus words and content",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "831e9ce7-d073-4020-a654-7792be7b4fd0",
              "name": "threshold",
              "value": 0.8,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2336,
        -400
      ],
      "id": "5dde924d-173d-4dd1-a0b0-9451473cf7c9",
      "name": "set variables"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1552,
        -400
      ],
      "id": "20d53e4f-72a1-484f-bd0f-1509c43e362e",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: \n {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"# Role and Objective\\n- You are a search query analysis assistant. Validate each input phrase and respond with a structured JSON object.\\n\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt\n        }\n      ]\n    }\n  ],\n \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"phrases\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"phrases\": {\n            \"type\": \"array\",\n            \"description\": \"A list of entries each consisting of a phrase ID and a corresponding boolean resolution.\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"phrase_id\": {\n                  \"type\": \"string\",\n                  \"description\": \"The ID of the textual phrase.\",\n                  \"minLength\": 1\n                },\n                \"resolution\": {\n                  \"type\": \"boolean\",\n                  \"description\": \"Boolean value indicating the resolution of the phrase.\"\n                }\n              },\n              \"required\": [\n                \"phrase_id\",\n                \"resolution\"\n              ],\n              \"additionalProperties\": false\n            }\n          }\n        },\n        \"required\": [\n          \"phrases\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"low\"\n  },\n  \"reasoning\": {\n    \"summary\": \"detailed\",\n    \"effort\": \"low\"\n  },\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        -384
      ],
      "id": "8705ec49-6728-4aa4-8d9e-f0f3e6dc925f",
      "name": "Set API JSON"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -736,
        -384
      ],
      "id": "7a635bb6-ab74-480b-8910-977621b7f13c",
      "name": "HTTP Request",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "openAiApi": {
          "id": "m4NScyhZzV3hBcTr",
          "name": "OpenAi Yads"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt.data;\n\nfor (const item of $input.all()) {\n  item.json.my_prompt = my_prompt.replaceAll(\"{{service_description}}\",workflowData.services_description).replaceAll(\"{{phrases}}\", JSON.stringify($('Loop Over Items').last().json.items)).replaceAll(\"{{company_name}}\", $('get company name').last().json.company_name);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1056,
        -384
      ],
      "id": "32033bbb-9158-4db7-9978-b95028196f5b",
      "name": "Set prompt"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "phrase_analysis.txt",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -3584,
        -400
      ],
      "id": "1c6a0c3e-a9c6-4e39-95b5-b243ff372221",
      "name": "Get a file",
      "webhookId": "92bbe04b-c34a-4d25-9a53-5bd59389e2ac",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -3376,
        -400
      ],
      "id": "a8e0755c-cbbc-459b-9d48-c939c353eaa6",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.my_prompt = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3168,
        -400
      ],
      "id": "6cffc52c-33de-498e-91c0-e0f364690068",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select cs.service_name,cs.service_description,cs.service_id from companies c, company_services cs where c.company_id=cs.company_id and c.company_id=$1",
        "options": {
          "queryReplacement": "={{ $('When Executed by Another Workflow').item.json.company_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2912,
        -416
      ],
      "id": "47cc6569-583b-45bb-816e-a3a99717f530",
      "name": "Services list",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nworkflowData.services_description ='';\n\n\nfor (const item of $input.all()) {\n  workflowData.services_description = workflowData.services_description + item.json.service_name + ' '+ item.json.service_description+'\\n';\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2704,
        -416
      ],
      "id": "0f356692-3e64-4d95-b2de-cdd2f0dc37e6",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select company_name from companies where company_id=$1",
        "options": {
          "queryReplacement": "={{ $('When Executed by Another Workflow').item.json.company_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2496,
        -416
      ],
      "id": "40bce46b-2f27-4306-a8c9-f8df1da3ea45",
      "name": "get company name",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "delete from company_content where content_id IN (\n    SELECT value::bigint\n    FROM jsonb_array_elements_text($1::jsonb) AS t(value)\n  )",
        "options": {
          "queryReplacement": "={{  JSON.stringify($('get ids').item.json.ids_string)}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1056,
        -672
      ],
      "id": "876c6cc5-e8be-4062-b24a-d17c8a8549cd",
      "name": "delete irrelevant content",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.company_content_log(\n\t content_id, phrase, report_id, change_timestamp, is_deleted, company_id)\n\tSELECT\n    cc.content_id,\n    cc.phrase,\n    $2 AS report_id,\n    now() AS change_timestamp,\n    true AS is_deleted,\n    $1 AS company_id\nFROM public.company_content AS cc\nWHERE cc.company_id = $1\n  AND cc.content_id IN (\n    SELECT value::bigint\n    FROM jsonb_array_elements_text($3::jsonb) AS t(value)\n  );",
        "options": {
          "queryReplacement": "={{ $('When Executed by Another Workflow').last().json.company_id }},{{ $('When Executed by Another Workflow').last().json.import_id }},{{  JSON.stringify($json.ids_string)}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1232,
        -672
      ],
      "id": "4b586ba2-d758-49aa-ac0d-44b2c44464b2",
      "name": "log deletion",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  v.minus_word,\n  v.id,\n  ct.phrase,\n  ct.content_id,\n  1 - (v.minus_word_embedding <=> ct.phrase_embedding) AS similarity\nFROM company_content ct\nCROSS JOIN LATERAL (\n  SELECT v.minus_word, v.id, v.minus_word_embedding\n  FROM minus_words v\n  WHERE v.company_id = $1\n  AND not exists (select 1 from minus_words_origin org WHERE org.minus_word_id=v.id AND org.key_word_id=0)\n  ORDER BY v.minus_word_embedding <=> ct.phrase_embedding\n  LIMIT 50                           -- подберите k экспериментально\n) v\nWHERE ct.company_id = $1\n  AND 1 - (v.minus_word_embedding <=> ct.phrase_embedding) > $2\n  AND ct.phrase_embedding IS NOT NULL;",
        "options": {
          "queryReplacement": "={{ $('When Executed by Another Workflow').last().json.company_id }},{{ $('set variables').last().json.threshold }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -848,
        -672
      ],
      "id": "99a3e8e6-93e0-4dba-832c-0ef517094485",
      "name": "Get matched minus words and content1",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -688,
        464
      ],
      "id": "bfa1c2e6-4ff5-414c-8689-081a2a099366",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: \n {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"# Role and Objective\\n- You are a search query analysis assistant. Validate each input phrase and respond with a structured JSON object.\\n\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt\n        }\n      ]\n    }\n  ],\n \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"phrases\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"phrases\": {\n            \"type\": \"array\",\n            \"description\": \"A list of entries each consisting of a phrase ID and a corresponding boolean resolution.\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"phrase_id\": {\n                  \"type\": \"string\",\n                  \"description\": \"The ID of the textual phrase.\",\n                  \"minLength\": 1\n                },\n                \"resolution\": {\n                  \"type\": \"boolean\",\n                  \"description\": \"Boolean value indicating the resolution of the phrase.\"\n                }\n              },\n              \"required\": [\n                \"phrase_id\",\n                \"resolution\"\n              ],\n              \"additionalProperties\": false\n            }\n          }\n        },\n        \"required\": [\n          \"phrases\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"low\"\n  },\n  \"reasoning\": {\n    \"summary\": \"detailed\",\n    \"effort\": \"low\"\n  },\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        480
      ],
      "id": "3ebc0ae5-372f-436b-854a-83216df12e90",
      "name": "Set API JSON1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -128,
        480
      ],
      "id": "3575ab45-8a47-401c-9cfd-bda34e78f9dd",
      "name": "HTTP Request1",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "openAiApi": {
          "id": "m4NScyhZzV3hBcTr",
          "name": "OpenAi Yads"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt.data;\n\nfor (const item of $input.all()) {\n  item.json.my_prompt = my_prompt.replaceAll(\"{{service_description}}\",workflowData.services_description).replaceAll(\"{{phrases}}\", JSON.stringify($('Loop Over Items1').last().json.items)).replaceAll(\"{{company_name}}\", $('get company name').last().json.company_name);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        480
      ],
      "id": "35e7182a-3f69-4253-b4a6-96b7ea58b896",
      "name": "Set prompt1"
    },
    {
      "parameters": {
        "jsCode": "// Сколько входящих элементов агрегировать в одном выходящем\nconst BATCH_SIZE = 100;\n\nfunction toIdString(v) {\n  if (typeof v === 'bigint') return v.toString();\n  if (typeof v === 'number') {\n    // защищаемся от NaN/Infinity и от дробной части\n    return Number.isFinite(v) ? Math.trunc(v).toString() : '';\n  }\n  if (typeof v === 'string') return v;\n  return v != null && v.toString ? v.toString() : '';\n}\n\nconst inputItems = $input.all();\nconst out = [];\n\nfor (let i = 0; i < inputItems.length; i += BATCH_SIZE) {\n  const chunk = inputItems.slice(i, i + BATCH_SIZE);\n\n  const items = chunk.map(({ json }) => ({\n    id: toIdString(json.content_id),\n    phrase: String(json.phrase ?? '')\n  }));\n\n  out.push({ json: { items } });\n}\n\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1760,
        -400
      ],
      "id": "ee23f5d1-cfa3-4813-b762-ab50b5d23b21",
      "name": "Slice  into batches strings"
    },
    {
      "parameters": {
        "jsCode": "// Сколько входящих элементов агрегировать в одном выходящем\nconst BATCH_SIZE = 100;\n\nfunction toIdString(v) {\n  if (typeof v === 'bigint') return v.toString();\n  if (typeof v === 'number') {\n    // защищаемся от NaN/Infinity и от дробной части\n    return Number.isFinite(v) ? Math.trunc(v).toString() : '';\n  }\n  if (typeof v === 'string') return v;\n  return v != null && v.toString ? v.toString() : '';\n}\n\nconst inputItems = $input.all();\nconst out = [];\n\nfor (let i = 0; i < inputItems.length; i += BATCH_SIZE) {\n  const chunk = inputItems.slice(i, i + BATCH_SIZE);\n\n  const items = chunk.map(({ json }) => ({\n    id: toIdString(json.id),\n    phrase: String(json.minus_word ?? '')\n  }));\n\n  out.push({ json: { items } });\n}\n//reset IDS string\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -928,
        464
      ],
      "id": "5cfda860-a1f5-442c-9836-6403ef395c53",
      "name": "Slice  into batches strings2"
    },
    {
      "parameters": {
        "jsCode": "// 1) Берём строку JSON из указанного поля\nlet raw = $input.first().json?.output?.[1]?.content?.[0]?.text;\n\n// --- Вспомогательные функции ---\nfunction stripCodeFences(s) {\n  if (typeof s !== 'string') return s;\n  let t = s.trim();\n  // убираем ```json ... ``` или просто ```\n  if (t.startsWith('```')) {\n    t = t.replace(/^```[a-zA-Z]*\\n?/, '').replace(/```$/, '').trim();\n  }\n  return t;\n}\n\nfunction safeParseJSON(x) {\n  if (x == null) return null;\n  if (typeof x === 'object') return x; // уже объект\n  const s = stripCodeFences(String(x));\n  try {\n    return JSON.parse(s);\n  } catch (e) {\n    const m = s.match(/{[\\s\\S]*}/);\n    if (m) {\n      try { return JSON.parse(m[0]); } catch {}\n    }\n    return null;\n  }\n}\n\n// 2) Парсим и собираем ids с resolution=false\nconst obj = safeParseJSON(raw);\n\nif (!obj || !Array.isArray(obj.phrases)) {\n  return [{ json: { phrase_ids: [], count: 0, note: 'phrases not found' } }];\n}\n\n// Уберём дубли в текущей партии, сохраняя порядок\nconst seen = new Set();\nconst ids = [];\nfor (const it of obj.phrases) {\n  if (!it || typeof it !== 'object') continue;\n  if (it.resolution === false && it.phrase_id != null) {\n    const idStr = String(it.phrase_id);\n    if (!seen.has(idStr)) { seen.add(idStr); ids.push(idStr); }\n  }\n}\n\n// 3) Обновляем глобальные статические данные как МАССИВ\nconst workflowData = $getWorkflowStaticData('global');\n\n// Если раньше по ошибке было строкой — превращаем в массив, иначе инициализируем пустым массивом\nif (Array.isArray(workflowData.ids_string)) {\n  // ок\n} else if (typeof workflowData.ids_string === 'string') {\n  // если где-то ранее хранилось как CSV — разделим, почистим\n  workflowData.ids_string = workflowData.ids_string\n    .split(',')\n    .map(s => s.trim())\n    .filter(Boolean);\n} else {\n  workflowData.ids_string = [];\n}\n\n// Добавляем элементы текущей партии по одному\nfor (const id of ids) {\n  workflowData.ids_string.push(id);\n\n  // Если хотите избегать дублей между запусками, замените строку выше на:\n  // if (!workflowData.ids_string.includes(id)) workflowData.ids_string.push(id);\n}\n\n// 4) Возвращаем результат\nreturn [{\n  json: {\n    phrase_ids: ids,                 // текущая партия (массив)\n    count: ids.length,               // сколько в текущей партии\n    global_ids_array: workflowData.ids_string // итоговый глобальный массив\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -576,
        -384
      ],
      "id": "d5f45c6a-73ac-4587-9499-723533940d0a",
      "name": "aggregate ids into ids_string"
    },
    {
      "parameters": {
        "jsCode": "// 1) Берём строку JSON из указанного поля\nlet raw = $input.first().json?.output?.[1]?.content?.[0]?.text;\n\n// --- Вспомогательные функции ---\nfunction stripCodeFences(s) {\n  if (typeof s !== 'string') return s;\n  let t = s.trim();\n  if (t.startsWith('```')) {\n    t = t.replace(/^```[a-zA-Z]*\\n?/, '').replace(/```$/, '').trim();\n  }\n  return t;\n}\n\nfunction safeParseJSON(x) {\n  if (x == null) return null;\n  if (typeof x === 'object') return x;\n  const s = stripCodeFences(String(x));\n  try { return JSON.parse(s); } catch (e) {\n    const m = s.match(/{[\\s\\S]*}/);\n    if (m) { try { return JSON.parse(m[0]); } catch {}\n    }\n    return null;\n  }\n}\n\nfunction ensureArray(val) {\n  if (Array.isArray(val)) return val;\n  if (typeof val === 'string') {\n    return val.split(',').map(s => s.trim()).filter(Boolean);\n  }\n  return [];\n}\n\n// 2) Парсим и собираем ids отдельно для true/false (без дублей в текущей партии)\nconst obj = safeParseJSON(raw);\nif (!obj || !Array.isArray(obj.phrases)) {\n  return [{\n    json: {\n      phrase_ids_true: [],\n      count_true: 0,\n      phrase_ids_false: [],\n      count_false: 0,\n      note: 'phrases not found'\n    }\n  }];\n}\n\nconst seenTrue = new Set();\nconst seenFalse = new Set();\nconst idsTrue = [];\nconst idsFalse = [];\n\nfor (const it of obj.phrases) {\n  if (!it || typeof it !== 'object') continue;\n  const idStr = it.phrase_id != null ? String(it.phrase_id) : null;\n  if (!idStr) continue;\n\n  if (it.resolution === true) {\n    if (!seenTrue.has(idStr)) { seenTrue.add(idStr); idsTrue.push(idStr); }\n  } else if (it.resolution === false) {\n    if (!seenFalse.has(idStr)) { seenFalse.add(idStr); idsFalse.push(idStr); }\n  }\n}\n\n// 3) Обновляем глобальные статические данные КАК МАССИВЫ\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.ids_true_string  = ensureArray(workflowData.ids_true_string);\nworkflowData.ids_false_string = ensureArray(workflowData.ids_false_string);\n\n// Добавляем текущие партии по одному элементу\nfor (const id of idsTrue)  workflowData.ids_true_string.push(id);\n// Если хотите избегать дублей между запусками — используйте вариант ниже:\n// for (const id of idsTrue)  if (!workflowData.ids_true_string.includes(id)) workflowData.ids_true_string.push(id);\n\nfor (const id of idsFalse) workflowData.ids_false_string.push(id);\n// и аналогично можно исключать межзапусковые дубли:\n// for (const id of idsFalse) if (!workflowData.ids_false_string.includes(id)) workflowData.ids_false_string.push(id);\n\n// 4) Возвращаем результат\nreturn [{\n  json: {\n    phrase_ids_true: idsTrue,\n    count_true: idsTrue.length,\n    phrase_ids_false: idsFalse,\n    count_false: idsFalse.length,\n    global_ids_true_array: workflowData.ids_true_string,\n    global_ids_false_array: workflowData.ids_false_string\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        48,
        480
      ],
      "id": "6f8afa5b-97c2-48fc-8f18-e27dcb2b1c51",
      "name": "aggregate ids into ids_string1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        16,
        288
      ],
      "id": "5d03e10e-347e-4ef5-a148-0f771d3d03fc",
      "name": "move relevant minus words into content",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\n\n\n\n// Возвращаем как поле выходного элемента\nreturn [\n  { json: { ids_string: workflowData.ids_string } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1392,
        -672
      ],
      "id": "cfebf7d8-8577-4357-bcb2-9982d911faf9",
      "name": "get ids"
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\n\n\n\n// Возвращаем как поле выходного элемента\nreturn [\n  { json: { ids_true_string: workflowData.ids_true_string,ids_false_string: workflowData.ids_false_string } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        288
      ],
      "id": "8a8a2d1d-815c-4ab7-89e7-f3864a51bb79",
      "name": "get ids1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.minus_words_log(\n\t minus_word_id, minus_word, report_id, change_timestamp, change_type, company_id)\n\tSELECT\n    cc.id,\n    cc.minus_word,\n    $2 AS report_id,\n    now() AS change_timestamp,\n    'deleted' AS change_type,\n    $1 AS company_id\nFROM public.minus_words AS cc\nWHERE cc.company_id = $1\n  AND cc.id IN (\n    SELECT value::bigint\n    FROM jsonb_array_elements_text($3::jsonb) AS t(value)\n  );",
        "options": {
          "queryReplacement": "={{ $('When Executed by Another Workflow').last().json.company_id }},{{ $('When Executed by Another Workflow').last().json.import_id }},{{  JSON.stringify($json.ids)}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        112,
        -720
      ],
      "id": "9cb1c6a4-1602-4e45-9bc8-ed2048703d0f",
      "name": "log del changes",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.minus_words_log(\n\t minus_word_id, minus_word, report_id, change_timestamp, change_type, company_id)\n\tSELECT\n    cc.id,\n    cc.minus_word,\n    $2 AS report_id,\n    now() AS change_timestamp,\n    'moved to content' AS change_type,\n    $1 AS company_id\nFROM public.minus_words AS cc\nWHERE cc.company_id = $1\n  AND cc.id IN (\n    SELECT value::bigint\n    FROM jsonb_array_elements_text($3::jsonb) AS t(value)\n  );",
        "options": {
          "queryReplacement": "={{ $('When Executed by Another Workflow').last().json.company_id }},{{ $('When Executed by Another Workflow').last().json.import_id }},{{  JSON.stringify($('get ids1').last().json.ids_true_string)}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -224,
        320
      ],
      "id": "f78f96f2-b7ab-40db-8cbc-9845d218c348",
      "name": "log move changes",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "Анализируем контент совпадающий с  минус словами",
        "height": 368,
        "width": 1392
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1712,
        -512
      ],
      "id": "de6b6e88-817b-4c18-9cd0-6a6fb4c02d58",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Удаляем нерелевнтный контент",
        "height": 368,
        "width": 848
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1488,
        -896
      ],
      "id": "da2ceedc-46a7-48c6-be30-a88e91c201ae",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "Минус слова: 1)релевантные - переносим в контент 2)нерелеватные - удаляем на всякий случай",
        "height": 592,
        "width": 1232
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -704,
        224
      ],
      "id": "0aa061e7-31b2-4a78-9397-1d72ad48093e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d27bd43b-9c58-4c64-87ba-c82c2ccd45d1",
              "leftValue": "={{ $input.first().json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1952,
        -1008
      ],
      "id": "15246044-1a7e-4c97-b624-7938b7b557c8",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d27bd43b-9c58-4c64-87ba-c82c2ccd45d1",
              "leftValue": "={{ $input.first().json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -656,
        -1008
      ],
      "id": "fa7155d7-3ffd-4a91-ad73-180be2fe574b",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "function toIdString(v) {\n  if (typeof v === 'bigint') return v.toString();\n  if (typeof v === 'number') return Number.isFinite(v) ? Math.trunc(v).toString() : '';\n  if (v == null) return '';\n  return String(v);\n}\n\nconst ids = $input.all()\n  .map(({ json }) => json?.id)\n  .filter(v => v !== undefined && v !== null)\n  .map(toIdString);\n\nreturn [{ json: { ids, count: ids.length } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -96,
        -720
      ],
      "id": "d9a06b3d-318c-47cb-b546-8dc5a00bc169",
      "name": "aggregate output"
    },
    {
      "parameters": {
        "content": "Удаляем все минус слова совпадающие с контентом кроме базовых",
        "height": 368,
        "width": 640
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -128,
        -896
      ],
      "id": "df30b0e4-e3e2-4587-8efb-460dd12efe14",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "delete from minus_words where id IN (\n    SELECT value::bigint\n    FROM jsonb_array_elements_text($1::jsonb) AS t(value)\n  );",
        "options": {
          "queryReplacement": "={{  JSON.stringify($('aggregate output').last().json.ids)}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        352,
        -720
      ],
      "id": "fca9705d-108e-4857-b6ee-8bf6004f461f",
      "name": "delete suspicious minus_words",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_completed": {
      "main": [
        []
      ]
    },
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get matched minus words and content": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set variables": {
      "main": [
        [
          {
            "node": "Get matched minus words and content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "get ids",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prompt": {
      "main": [
        [
          {
            "node": "Set API JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "aggregate ids into ids_string",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Services list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Services list": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "get company name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get company name": {
      "main": [
        [
          {
            "node": "set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete irrelevant content": {
      "main": [
        [
          {
            "node": "Get matched minus words and content1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log deletion": {
      "main": [
        [
          {
            "node": "delete irrelevant content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "get ids1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "aggregate ids into ids_string1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prompt1": {
      "main": [
        [
          {
            "node": "Set API JSON1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get matched minus words and content1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slice  into batches strings": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slice  into batches strings2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "aggregate ids into ids_string": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "aggregate ids into ids_string1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "move relevant minus words into content": {
      "main": [
        []
      ]
    },
    "get ids": {
      "main": [
        [
          {
            "node": "log deletion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get ids1": {
      "main": [
        []
      ]
    },
    "log del changes": {
      "main": [
        [
          {
            "node": "delete suspicious minus_words",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log move changes": {
      "main": [
        []
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slice  into batches strings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "aggregate output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "aggregate output": {
      "main": [
        [
          {
            "node": "log del changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete suspicious minus_words": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false,
    "errorWorkflow": "v2Z32ISEUzsFYnZw"
  },
  "staticData": {
    "global": {
      "my_prompt": {
        "data": "Проанализируй фразу:\"{{phrases}}\" на предмет релевантности сервисам \"{{service_description}}\" компании \"{{company_name}}\".  Действуй строго по следующим правилам:\nЕсли фраза релевантна или нейтральна любому сервису компании, верни в resolution для ее ID: \"is_correct_phrase\": true.\nЕсли фраза не релевантна  сервисам компании, верни в resolution для ее ID \"is_correct_phrase\": false\n"
      },
      "services_description": "IT школа KIBERone KIBERone – международная КиберШкола программирования и цифровых технологий для детей от 6 до 14 лет.  Позиционирование бренда: KIBERone — первая международная КиберШкола будущего для IT-поколения 6–14 лет, признана ЮНЕСКО лучшей детской образовательной IT-школой в мире. Бренд является партнером Microsoft, Roblox и Samsung. Бесплатные пробные уроки  Основные услуги и программы:  Полный перечень модулей:  Вводный модуль (основы цифровой грамотности)  Основы программирования Scratch Jr  Создание игр на Scratch  ПиктоМир (алгоритмическое мышление)  CodeMonkey (логика и программирование)  Устройство компьютера  Эффектные презентации (PowerPoint, Desygner)  QR-коды  Деловые люди (предпринимательство)  Google Blockly (визуальное программирование)  Roblox Studio (создание игр)  Kodu Game Lab (3D-программирование)  Разработка мобильных приложений в Thunkable  Blender (3D-моделирование)  Компьютерная грамотность  Minecraft Education  Нейросети (основы ИИ)  Alice 3D (3D-программирование)  Run Marco (основы алгоритмов)  Исполнители: Чертёжник и Черепашка  GIF-анимация  Tinkercad (3D-проектирование)  Кибербезопасность  Construct 2 (создание 2D-игр)  Компас-3D (САПР)  Основы HTML (веб-разработка)  Голосовой помощник Алиса  Создание лендинга (Tilda)  Python (создание игр)  Чат-бот на Python  Web-дизайн (Figma)  Web-мастер (HTML+CSS)  Motion Design  Unreal Engine 4 (игровой движок)  JavaScript (игры)  C# (создание 2D-игр)  C++  Java (создание приложений)  Unity 3D (игры)  Олимпиадное программирование  Облачные технологии, Блокчейн, Data Science  PHP+SQL  Photoshop  Подготовка к олимпиадам  Приложения Google  Летние программы:  Летние IT-интенсивы (краткосрочные программы по направлениям Roblox, Minecraft, Python и др.)  Летние КИБЕРканикулы (городской лагерь с IT-обучением и развлекательной программой)  Дополнительные механики:  Кибервалюта («кибероны») для мотивации учеников, обмен на мерч на КиберМаркете  Тьюторы и преподаватели:  Опытные специалисты с практическим опытом и педагогической подготовкой  Другие важные разделы:  Новости (новости школы и сети)  СМИ о нас (публикации о школе)  Фотогалерея (фото с мероприятий и уроков)  Видео (видеоматериалы о школе)  Расписание занятий (время занятий для групп и пробных уроков)  Локации (адрес школы в Октябрьском районе Саратова, ул. Тараса Шевченко, 8)  Оплата (способы оплаты и договор-оферта)  Сертификаты (активация промокодов партнеров)  Контакты (телефон +7 963 112-49-11, email saratov@kiber-one.com\n",
      "ids_string": [
        "30041",
        "30042",
        "30043",
        "30045",
        "19404",
        "19406",
        "20198",
        "19856",
        "21384",
        "22233",
        "23180",
        "25671",
        "25960",
        "26114",
        "26226",
        "26228",
        "26229",
        "26230",
        "25703",
        "26064",
        "26235",
        "26254",
        "25959",
        "26257",
        "26258",
        "26259",
        "26344",
        "26625",
        "26626",
        "26824",
        "26826",
        "26999",
        "27000",
        "27058",
        "27082",
        "27020",
        "27022",
        "27554",
        "27603",
        "27613",
        "27781",
        "27916",
        "27926",
        "28738",
        "29161",
        "29730",
        "29998",
        "30068",
        "30069",
        "30070",
        "30071",
        "30072",
        "30098",
        "30258",
        "30389",
        "30391",
        "30394",
        "30041",
        "30042",
        "30043",
        "30045",
        "19404",
        "19406",
        "20198",
        "19856",
        "21384",
        "22233",
        "23180",
        "26114",
        "26226",
        "26228",
        "26229",
        "26230",
        "25703",
        "26235",
        "26801",
        "26824",
        "26826",
        "26999",
        "27000",
        "26906",
        "27058",
        "27082",
        "27020",
        "27022",
        "27333",
        "27554",
        "27603",
        "27613",
        "27781",
        "27916",
        "27926",
        "28738",
        "29161",
        "29730",
        "29998",
        "30068",
        "30069",
        "30070",
        "30071",
        "30072",
        "30073",
        "30098",
        "30258",
        "30389",
        "30391",
        "30394",
        "30604",
        "30615",
        "30621",
        "30866",
        "30877",
        "30878",
        "31199",
        "30510",
        "31682",
        "32424",
        "32618",
        "32620",
        "32621",
        "32622",
        "32623",
        "32624",
        "32687",
        "32781",
        "33108",
        "16003",
        "13807",
        "14242",
        "15488",
        "15555",
        "15603",
        "16178",
        "17531",
        "29321",
        "13924",
        "26774",
        "27458",
        "27521",
        "27589",
        "28956",
        "29093",
        "31692",
        "32578",
        "33328",
        "33329",
        "33405",
        "33456",
        "33642",
        "33902",
        "34098",
        "34557",
        "34616",
        "34618"
      ],
      "steps_passed": 0,
      "tokens_used": 0,
      "step": 0
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "company_id": 1,
          "root_execution_id": 74293,
          "import_id": 5
        }
      }
    ]
  },
  "versionId": "6363d90e-c410-4c77-a2e9-fbf614745db1",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-20T11:14:53.972Z",
      "updatedAt": "2025-10-20T11:14:53.972Z",
      "role": "workflow:owner",
      "workflowId": "dSYXe1nfeCvfozcQ",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-10-08T11:53:55.048Z",
      "updatedAt": "2025-10-08T11:53:55.048Z",
      "id": "bfaXXdoIW5NToPfb",
      "name": "post procesing"
    }
  ]
}