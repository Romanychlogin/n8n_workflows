{
  "createdAt": "2025-09-25T13:33:58.106Z",
  "updatedAt": "2025-10-21T17:46:45.500Z",
  "id": "0J5cvuaSz3IhDS99",
  "name": "campaign core update",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id,n8n_workflow_execution_id, started)\nSELECT MAX(business_process_id), $2, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -464,
        -240
      ],
      "id": "2340f56a-0cb1-4585-aaa7-bf32d049ce28",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1152,
        -240
      ],
      "id": "79e1968d-6af3-41b2-960c-b772a28673b8",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        -240
      ],
      "id": "89b4df6c-5de3-45ba-9b50-fbc5f5245174",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW() where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2752,
        5376
      ],
      "id": "b17b1715-9e42-463a-8c41-afd0be86f727",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2368,
        -320
      ],
      "id": "9552a2ab-303b-4308-a515-72feaf01397c",
      "name": "Get current step saved"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('Set variables').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        624,
        -320
      ],
      "id": "7cd397ec-4206-4b99-bbbf-5128d0c77b9d",
      "name": "Execute a SQL query",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        848,
        -320
      ],
      "id": "83f4c0a4-25e6-4317-b9f2-5d47b7b51625",
      "name": "If SUB process  already executed",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1616,
        -208
      ],
      "id": "920939e8-55a3-4daa-8233-206e8b514781",
      "name": "Call SUB"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_total=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{ 4 }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -64,
        -240
      ],
      "id": "5ce7b086-0038-4390-abcf-b58812bed214",
      "name": "Mark_workflow_total_steps(manually)",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADV_campaign_data_load').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1168,
        -208
      ],
      "id": "3213d1a6-df60-43a3-81a6-793e13cb59b5",
      "name": "get workflow id by name",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "yandex_report_dropbox_file_path",
              "value": "={{ $('Set variables').item.json.yandex_report_dropbox_file_path }}",
              "type": "string"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1360,
        -208
      ],
      "id": "edf1033c-e913-4b75-b448-04efc0a7a0d4",
      "name": "set input data for SUB"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8939fde5-d7b7-4679-a9dc-4c20aec9614d",
              "name": "yandex_report_dropbox_file_path",
              "value": "https://www.dropbox.com/scl/fi/9kr6iebx4q6cstzp2xuwb/2025-09-04_2025-09-24_searchquery_kiberone-saratov.csv?rlkey=cew8cc5k2rfbq5wrco9inb4eu&dl=1",
              "type": "string"
            },
            {
              "id": "c39715db-2173-438e-9e3b-8e20372ebf86",
              "name": "threshhold",
              "value": 0.79,
              "type": "number"
            },
            {
              "id": "da89c9d1-35e4-43af-a686-0fb39952aec2",
              "name": "report_id",
              "value": "",
              "type": "string"
            },
            {
              "id": "4fa84724-3629-46f5-928d-203f2a6dcf99",
              "name": "company_id",
              "value": "1",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -736,
        -240
      ],
      "id": "ed207a6c-8ead-45ba-83a2-0719233fde5b",
      "name": "Set variables"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2240,
        864
      ],
      "id": "e5189338-9803-47e1-9337-544a1779709a",
      "name": "Mark_workflow_passed_steps1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1936,
        704
      ],
      "id": "5d593d2f-0a71-4666-bc59-28afc9293938",
      "name": "Get current step saved1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        960,
        768
      ],
      "id": "53259c0f-085f-4349-9335-2fba7762c93b",
      "name": "If SUB process  already executed1",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1712,
        896
      ],
      "id": "bf91914e-9db5-4b03-b247-39e129fb5f80",
      "name": "Call SUB1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADV_campaign_analysis_initial').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1152,
        816
      ],
      "id": "62ab09bf-5748-4bf9-a19b-a517b3402799",
      "name": "get workflow id by name1",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "6e3154c1-d961-4edb-8615-648bfee279e1",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1344,
        880
      ],
      "id": "a437bc76-1110-4072-b33f-282c62ff42a4",
      "name": "set input data for SUB1"
    },
    {
      "parameters": {
        "content": "анализируем все !!не завершенные запуски!! основного процесса после предыдущего успешного завершения. Если для них подпроцесс успешно завершился то его повторно не дергаем",
        "height": 128,
        "width": 624
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -416,
        -576
      ],
      "id": "6f91ae8e-a1c0-472e-b6ee-8ae95589b0ea",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        592,
        768
      ],
      "id": "c6f0ea60-6d10-4fa0-88c6-e6be709846c3",
      "name": "Execute a SQL query1",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3,company_id=$4, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2720,
        -208
      ],
      "id": "71a7db0e-57a1-4d38-8f5b-de955e3e46f3",
      "name": "update workflow tokens usage",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow 1\n",
        "height": 512,
        "width": 2848
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        80,
        -448
      ],
      "id": "6b814be9-3c3e-494c-a783-04a6c6cbcefa",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        272,
        640
      ],
      "id": "6aef1b34-3568-442d-9e21-218e73296be6",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2448,
        864
      ],
      "id": "6d161fb8-4b77-443a-b50e-4ca5af6f3e98",
      "name": "update workflow tokens usage1",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2528,
        -208
      ],
      "id": "99d71d6e-cfe3-4dec-b061-9b2ebf3ffeab",
      "name": "Mark_workflow_passed_steps_and_company_id",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADV_campaign_data_load",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        176,
        -240
      ],
      "id": "20818983-3a5d-4cb7-a22d-8474fef28751",
      "name": "ADV_campaign_data_load"
    },
    {
      "parameters": {
        "content": "1)В dropbox ссылке поменять в конце 0 на 1 !!!!! \n2)задать report_id только если нужно обработать записи не последнего загруженного отчета, без загрузки!!!\n3)если надо учесть предыдущую загрузку то явно укажи company_id ",
        "height": 320,
        "width": 336
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -848,
        -416
      ],
      "id": "e8363564-3e28-495a-bc8e-430372ffc94f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2320,
        2608
      ],
      "id": "feabefef-183e-48ad-acce-d1828102bf75",
      "name": "Mark_workflow_passed_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2112,
        2432
      ],
      "id": "01e927fa-5ff2-4740-add4-2378c3d3c04f",
      "name": "Get current step saved2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1008,
        2496
      ],
      "id": "e3795247-8ff2-4786-8067-f22fae4c1e42",
      "name": "If SUB process  already executed2",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1760,
        2624
      ],
      "id": "b8c312e7-03e7-4b24-90b3-3107c60887bc",
      "name": "Call SUB2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADS headers and texts creation services for updates').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1200,
        2544
      ],
      "id": "0084d180-8c90-4a58-bd80-a15c19d39d8c",
      "name": "get workflow id by name2",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "242e22ab-d73d-4b1f-b148-3cd44943fe6f",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1392,
        2608
      ],
      "id": "327c07c5-50e8-4692-8447-9703288a73fb",
      "name": "set input data for SUB2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        640,
        2496
      ],
      "id": "4f117353-8324-4277-9042-82ea867fc971",
      "name": "Execute a SQL query2",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        304,
        2368
      ],
      "id": "adbdf42b-bf86-493e-9acf-6cb57494086f",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2528,
        2608
      ],
      "id": "33cd5c2e-e5aa-4763-a8b1-51d90939d298",
      "name": "update workflow tokens usage2",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select * from report_import where import_id=(select max(import_id) from report_import)",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1440,
        -384
      ],
      "id": "3728d7ae-8855-4697-890d-b646d3584eef",
      "name": "get company_id from lust succeed report ",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4dcef6dc-af71-47eb-9f11-3223f5cbab28",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2192,
        -288
      ],
      "id": "3ed57cde-7bf2-46b5-97fa-dcf269af9ef0",
      "name": "company_record_id"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADS headers and texts creation services for updates",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        448,
        2496
      ],
      "id": "66ac69da-b276-4a99-917a-66979eb829b4",
      "name": "ADS headers and texts creation services for updates"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        3216
      ],
      "id": "611a07cf-5454-47e1-95a7-d89a805ae6bf",
      "name": "Mark_workflow_passed_steps2",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        3056
      ],
      "id": "1e03295b-0226-4876-a57d-8bdc2126aee9",
      "name": "Get current step saved3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1008,
        3104
      ],
      "id": "15254fe6-0469-40ff-98bb-e9d903594848",
      "name": "If SUB process  already executed3",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1792,
        3216
      ],
      "id": "3b2d7048-b2d8-499b-9612-045de69236a2",
      "name": "Call SUB3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('minus words post processing').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1200,
        3152
      ],
      "id": "ee6dd58a-f469-420b-b99f-7b1fd3d480fd",
      "name": "get workflow id by name3",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "242e22ab-d73d-4b1f-b148-3cd44943fe6f",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1392,
        3216
      ],
      "id": "a39f0fd9-1fe4-4e93-9421-f0699ffd658a",
      "name": "set input data for SUB3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        640,
        3104
      ],
      "id": "82562d88-6826-4de2-9979-c9d576c340ae",
      "name": "Execute a SQL query3",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        304,
        2976
      ],
      "id": "43ef1f04-7166-43a8-860f-2079e2645350",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2464,
        3216
      ],
      "id": "3ff30c42-1258-42ff-9af5-6edde5fce184",
      "name": "update workflow tokens usage3",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2240,
        336
      ],
      "id": "311aaafe-5b17-4212-8288-6d9ae8728cc4",
      "name": "Mark_workflow_passed_steps3",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        176
      ],
      "id": "e7688588-5c7d-4c41-858c-f9f8267bb528",
      "name": "Get current step saved4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        976,
        240
      ],
      "id": "75318418-54a4-4b8e-ad82-01abef57bc13",
      "name": "If SUB process  already executed4",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1760,
        336
      ],
      "id": "fd332e20-e27e-4b96-a967-11d1de67885e",
      "name": "Call SUB4"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADV_campaign_get_service').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1168,
        288
      ],
      "id": "2505f7b9-d1dd-4547-8258-c2da2bdeec4a",
      "name": "get workflow id by name4",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "6e3154c1-d961-4edb-8615-648bfee279e1",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1360,
        352
      ],
      "id": "26301f31-c97b-4f18-9358-8a4a94b804d5",
      "name": "set input data for SUB4"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        608,
        240
      ],
      "id": "dc5227d9-0765-440c-ac7e-4cb01a361459",
      "name": "Execute a SQL query4",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow \n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        272,
        112
      ],
      "id": "58ecb9db-bcb5-4c4a-8c2e-5995c8ef3f31",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2448,
        336
      ],
      "id": "5dbc90ff-71f9-4f78-8d1f-def3df2cdeb4",
      "name": "update workflow tokens usage4",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADV_campaign_get_service",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        416,
        240
      ],
      "id": "992312e1-11bd-45d3-b766-06f4ee4b8c5b",
      "name": "ADV_campaign_get_service"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set error_happened=NOW(),error_message='execution completed but not marked finished' where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2864,
        2544
      ],
      "id": "dccaa22d-4515-4559-a59c-5b403bf02d10",
      "name": "Mark_workflow_error",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d2f57e53-4fdb-4cda-ba54-625ed2e91e80",
              "leftValue": "={{ $('Set variables').item.json.report_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1856,
        -320
      ],
      "id": "7ac1bcaf-e957-4501-b3c0-f6cc7de93ecd",
      "name": "If report_id manually set"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9d0812dd-afb7-4a56-843f-97736d5766d2",
              "name": "",
              "value": "",
              "type": "string"
            },
            {
              "id": "e7e14827-e3bc-43d2-913e-39c68158f227",
              "name": "import_id",
              "value": "={{ $('Set variables').item.json.report_id }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2064,
        -400
      ],
      "id": "90585baf-cb61-45e9-bdb3-3f55d0893e4b",
      "name": "override report_id"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2288,
        4240
      ],
      "id": "5b94979a-cc80-4f57-9681-0226252d79e2",
      "name": "Mark_workflow_passed_steps4",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2048,
        4080
      ],
      "id": "9e613c25-39c7-4326-a256-654f088bc716",
      "name": "Get current step saved5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1024,
        4128
      ],
      "id": "0137b335-09d1-456e-8786-f59687eda8d5",
      "name": "If SUB process  already executed5",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1808,
        4240
      ],
      "id": "e3c9a0db-ce2d-4c62-a6d1-88cbec120b1f",
      "name": "Call SUB5"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('Check if keyword need to be restricted').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1216,
        4176
      ],
      "id": "2509feb7-cd61-43dd-a481-797a8ff466e5",
      "name": "get workflow id by name5",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "242e22ab-d73d-4b1f-b148-3cd44943fe6f",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1408,
        4240
      ],
      "id": "80aff77f-ae49-4769-8f21-83021d18c3af",
      "name": "set input data for SUB5"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        656,
        4128
      ],
      "id": "f159e6c0-ee6f-49d7-bdc6-a11d9e87d745",
      "name": "Execute a SQL query5",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        4000
      ],
      "id": "6a1b7f9d-d1c5-4ace-8886-47409d94c25c",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2480,
        4240
      ],
      "id": "fee4db35-d591-4d9c-840c-e1549ed62426",
      "name": "update workflow tokens usage5",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "Check if keyword need to be restricted",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        464,
        4128
      ],
      "id": "53afff5a-d3b3-483c-b942-3dd89dbb161b",
      "name": "Check if keyword need to be restricted"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        4880
      ],
      "id": "1bf09fd9-3560-4ea7-83f3-8eb6cbcea62b",
      "name": "Mark_workflow_passed_steps5",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        4720
      ],
      "id": "f1f701d2-adbe-47f4-82a5-9096f46325b9",
      "name": "Get current step saved6"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1008,
        4768
      ],
      "id": "e2a391ab-26fa-41ba-8590-2da893e972f6",
      "name": "If SUB process  already executed6",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1792,
        4880
      ],
      "id": "5e249de4-0076-4809-a691-8c7b7b958fc8",
      "name": "Call SUB6"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('minus words vs content review').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1200,
        4816
      ],
      "id": "29780fb9-d7ba-489b-ae0a-6550bc0aba9f",
      "name": "get workflow id by name6",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "242e22ab-d73d-4b1f-b148-3cd44943fe6f",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1392,
        4880
      ],
      "id": "6c55532c-bcef-43ed-972c-0a0c6871fa8a",
      "name": "set input data for SUB6"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        640,
        4768
      ],
      "id": "b583748e-c228-4880-81a4-ab09b294f08f",
      "name": "Execute a SQL query6",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        4640
      ],
      "id": "b5ab68a9-7153-49f0-b7c3-4979aed5c01a",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2464,
        4880
      ],
      "id": "df41dfe5-930c-4290-95c7-4509d18701d7",
      "name": "update workflow tokens usage6",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        5376
      ],
      "id": "2f7396fe-59df-4284-9e14-e2c770ba61ed",
      "name": "Mark_workflow_passed_steps6",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        5216
      ],
      "id": "ca481eec-2072-4f05-942b-70f488d3d5c8",
      "name": "Get current step saved7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1008,
        5264
      ],
      "id": "cf833a0a-a44d-41a8-906b-673ae06ab804",
      "name": "If SUB process  already executed7",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1792,
        5376
      ],
      "id": "5f0bdc4e-3dc0-402c-8a75-81174d8b97a4",
      "name": "Call SUB7"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('campaign core update finalization').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1200,
        5312
      ],
      "id": "a0cd195c-affe-4bad-ac7a-f0e2a2d70b1e",
      "name": "get workflow id by name7",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "242e22ab-d73d-4b1f-b148-3cd44943fe6f",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1392,
        5376
      ],
      "id": "e2c9c286-4abe-4df9-9090-a2ead053ca4a",
      "name": "set input data for SUB7"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        640,
        5264
      ],
      "id": "8cdb5689-1218-4a13-a772-97ddbd9fdf78",
      "name": "Execute a SQL query7",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        5136
      ],
      "id": "c7f665be-97ba-49fc-a8fe-6e15d7bba474",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2464,
        5376
      ],
      "id": "0aedbb12-ff02-43ce-b074-4441373733fa",
      "name": "update workflow tokens usage7",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "campaign core update finalization",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        448,
        5264
      ],
      "id": "b184f539-2055-4746-9440-5d5af5966293",
      "name": "campaign core update finalization"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d2f57e53-4fdb-4cda-ba54-625ed2e91e80",
              "leftValue": "={{ $('Set variables').item.json.company_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        416,
        -224
      ],
      "id": "6f5732b6-cfe9-41d4-8dc2-d239bc8e01ad",
      "name": "If company_id manually set"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        1984
      ],
      "id": "e1a7593f-3be1-461c-99a1-b8bf4ef618e1",
      "name": "Mark_workflow_passed_steps7",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1968,
        1824
      ],
      "id": "72f6ef49-c293-4eff-9dc3-dc9f22a9ab67",
      "name": "Get current step saved8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        992,
        1888
      ],
      "id": "3a2d8489-957c-4aae-a0ad-94e4ed5edb45",
      "name": "If SUB process  already executed8",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1744,
        2016
      ],
      "id": "b416e11b-937c-41c8-a57f-3b0ab5670902",
      "name": "Call SUB8"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADV_campaign_analysis_AI').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1184,
        1936
      ],
      "id": "6f0928b8-480f-429d-9213-12ca47f77636",
      "name": "get workflow id by name8",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "6e3154c1-d961-4edb-8615-648bfee279e1",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1376,
        2000
      ],
      "id": "d9083103-c4a4-40e2-ac2d-4b8e9c39e3e5",
      "name": "set input data for SUB8"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        624,
        1888
      ],
      "id": "48075a75-7c48-4399-9825-b66a83a3f459",
      "name": "Execute a SQL query8",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        304,
        1760
      ],
      "id": "54995b91-a823-46ff-8163-ef889d9e9463",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2480,
        1984
      ],
      "id": "99cb8b64-4f75-44fc-94c9-b21cb381724a",
      "name": "update workflow tokens usage8",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADV_campaign_analysis_initial",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        400,
        768
      ],
      "id": "cf0b4dae-7648-4709-af1b-73cf0d71ff35",
      "name": "ADV_campaign_analysis_initial"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADV_campaign_analysis_AI",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        432,
        1888
      ],
      "id": "69915792-97b3-4831-8dc2-f2009811fd93",
      "name": "ADV_campaign_analysis_AI"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "minus words post processing",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        448,
        3104
      ],
      "id": "c8befed2-a959-47ef-8711-f2d8ba1e0ad7",
      "name": "minus words post processing"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "minus words vs content review",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        448,
        4768
      ],
      "id": "976b565f-ebff-413a-98e4-1e7e487f763e",
      "name": "minus words vs content review"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        3728
      ],
      "id": "11b07323-db4d-4f84-b47a-467e76d06b8c",
      "name": "Mark_workflow_passed_steps8",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        3568
      ],
      "id": "ae604240-3c31-4c33-9390-7151057207b3",
      "name": "Get current step saved9"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1008,
        3616
      ],
      "id": "dc6faf9e-de5a-4b2b-81f2-2d88b39d7591",
      "name": "If SUB process  already executed9",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1792,
        3728
      ],
      "id": "bf045aef-8864-4332-9b92-176ffcccbb07",
      "name": "Call SUB9"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('extract data for updates with header').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1200,
        3664
      ],
      "id": "6992ac6b-e46c-489f-8534-1ae7b8390a48",
      "name": "get workflow id by name9",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "242e22ab-d73d-4b1f-b148-3cd44943fe6f",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "string"
            },
            {
              "id": "f48771b4-4bf8-4ff4-8481-3d863668dd08",
              "name": "minus_words",
              "value": "={{ $('Call SUB3').item.json.minus_words }",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1392,
        3728
      ],
      "id": "e81e1a7d-e470-4b5e-a573-483d0635cc7a",
      "name": "set input data for SUB9"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        640,
        3616
      ],
      "id": "4da1527a-6945-4d75-8700-bff4e85734b1",
      "name": "Execute a SQL query9",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        304,
        3488
      ],
      "id": "71569603-8efa-44b2-9af0-e7eae488ba2a",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2464,
        3728
      ],
      "id": "a5acdb04-a3a9-4035-8dbe-dbe388996c16",
      "name": "update workflow tokens usage9",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "extract data for updates with header",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        448,
        3616
      ],
      "id": "03d4ebfe-c048-4411-bb61-a523db60ed04",
      "name": "extract data for updates with header"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2272,
        1376
      ],
      "id": "75141450-2acf-4a3c-948f-a22f2f167fbd",
      "name": "Mark_workflow_passed_steps9",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\nfor (const item of $input.all()) {\n  item.json.steps_passed =workflowData.steps_passed;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1968,
        1216
      ],
      "id": "8ee9e82a-7918-409c-9e05-ec5b48cb9571",
      "name": "Get current step saved10"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2626a1e-412c-4f6f-89a8-ca5da5106302",
              "leftValue": "={{$json.finished}}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        992,
        1280
      ],
      "id": "27543d62-ad59-4a05-bdfb-74f514afe87b",
      "name": "If SUB process  already executed10",
      "executeOnce": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{$json.id}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1744,
        1408
      ],
      "id": "81ef8a6b-e0f0-443b-aba8-ae248f600fd4",
      "name": "Call SUB10"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id\nFROM workflow_entity\nWHERE name = $1\nORDER BY id DESC\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $('ADV_campaign_analysis_AI_1').item.json.workflow_name }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1184,
        1328
      ],
      "id": "2084d811-73a4-44a7-a48c-eeacf0fb39e8",
      "name": "get workflow id by name10",
      "credentials": {
        "postgres": {
          "id": "hNuVeLeeeSX0vLBj",
          "name": "n8n service"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15eb020b-bb6f-4c77-a103-718f49630cd6",
              "name": "=root_execution_id",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "fda82fe6-7e78-49d2-8130-43cb54ef5d8a",
              "name": "company_id",
              "value": "={{ $('company_record_id').item.json.company_id }}",
              "type": "number"
            },
            {
              "id": "da41f8d6-0b51-4e6c-91c3-96c8ca5d1659",
              "name": "threshhold",
              "value": "={{ $('Set variables').item.json.threshhold }}",
              "type": "string"
            },
            {
              "id": "6e3154c1-d961-4edb-8615-648bfee279e1",
              "name": "import_id",
              "value": "={{ $('company_record_id').item.json.import_id }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1376,
        1392
      ],
      "id": "63d21696-4be3-4f09-bd24-4a5e3d07965a",
      "name": "set input data for SUB10"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH cutoff AS (\n  SELECT MAX(st2.started) AS last_finished_started\n  FROM public.business_processes_states st2\n  JOIN public.business_processes bp2\n    ON bp2.business_process_id = st2.business_process_id\n  WHERE bp2.n8n_process_name = $1\n    AND st2.company_id = $3\n    AND st2.finished IS NOT NULL\n),\nmain AS (\n  SELECT st.*\n  FROM public.business_processes_states st\n  JOIN public.business_processes bp\n    ON bp.business_process_id = st.business_process_id\n  CROSS JOIN cutoff c\n  WHERE bp.n8n_process_name = $1\n    AND st.company_id = $3 \n    AND st.finished IS NULL\n    AND (c.last_finished_started IS NULL OR st.started > c.last_finished_started)\n)\nSELECT\n  s.business_process_state_id,\n  s.business_process_id,\n  s.started,\n  s.finished,\n  s.error_message,\n  s.n8n_workflow_execution_id,\n  s.n8n_workflow_root_execution_id\nFROM main m\nJOIN public.business_processes_states s\n  ON s.n8n_workflow_root_execution_id = m.n8n_workflow_execution_id\nJOIN public.business_processes p\n  ON p.business_process_id = s.business_process_id\nWHERE p.n8n_process_name = $2\n  AND s.company_id = $3\nORDER BY s.started desc;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.workflow_name}},{{ $('company_record_id').item.json.company_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        624,
        1280
      ],
      "id": "b6034275-08ff-40a3-8c8f-e1cef79d2034",
      "name": "Execute a SQL query10",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "content": "workflow\n",
        "height": 448,
        "width": 2368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        304,
        1152
      ],
      "id": "89280702-fe62-4403-b55e-d369368b68fb",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set  tokens_used_type=$3, tokens_used=tokens_used+(select bps.tokens_used from business_processes bp1,business_processes_states bps,business_processes_states bps2 where bp1.n8n_process_name=$2 and bp1.business_process_id=bps.business_process_id and  bps.n8n_workflow_root_execution_id=bps2.n8n_workflow_execution_id  and bps.finished is not null and bps2.n8n_workflow_execution_id=$1 order by bps2.business_process_state_id desc LIMIT 1) where n8n_workflow_execution_id=$1;\n",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$('ADV_campaign_data_load').item.json.workflow_name}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2480,
        1376
      ],
      "id": "36d26737-aebf-4f35-83ef-5309810c7c74",
      "name": "update workflow tokens usage10",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99e6bb89-0b33-4e72-b5be-2e118b69afa2",
              "name": "workflow_name",
              "value": "ADV_campaign_analysis_AI_1",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        432,
        1280
      ],
      "id": "4fd3f795-ad57-4760-9a3e-ac4b3e998f8d",
      "name": "ADV_campaign_analysis_AI_1"
    }
  ],
  "connections": {
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Mark_workflow_total_steps(manually)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps_and_company_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "If SUB process  already executed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed": {
      "main": [
        [
          {
            "node": "get company_id from lust succeed report ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB": {
      "main": [
        [
          {
            "node": "If report_id manually set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_total_steps(manually)": {
      "main": [
        [
          {
            "node": "ADV_campaign_data_load",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name": {
      "main": [
        [
          {
            "node": "set input data for SUB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB": {
      "main": [
        [
          {
            "node": "Call SUB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set variables": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved1": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed1": {
      "main": [
        [
          {
            "node": "Get current step saved1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB1": {
      "main": [
        [
          {
            "node": "Get current step saved1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name1": {
      "main": [
        [
          {
            "node": "set input data for SUB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB1": {
      "main": [
        [
          {
            "node": "Call SUB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps1": {
      "main": [
        [
          {
            "node": "update workflow tokens usage1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "If SUB process  already executed1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage": {
      "main": [
        [
          {
            "node": "ADV_campaign_get_service",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage1": {
      "main": [
        [
          {
            "node": "ADV_campaign_analysis_AI_1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps_and_company_id": {
      "main": [
        [
          {
            "node": "update workflow tokens usage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADV_campaign_data_load": {
      "main": [
        [
          {
            "node": "If company_id manually set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps": {
      "main": [
        [
          {
            "node": "update workflow tokens usage2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved2": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed2": {
      "main": [
        [
          {
            "node": "Get current step saved2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB2": {
      "main": [
        [
          {
            "node": "Get current step saved2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name2": {
      "main": [
        [
          {
            "node": "set input data for SUB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB2": {
      "main": [
        [
          {
            "node": "Call SUB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query2": {
      "main": [
        [
          {
            "node": "If SUB process  already executed2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage2": {
      "main": [
        [
          {
            "node": "minus words post processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get company_id from lust succeed report ": {
      "main": [
        [
          {
            "node": "If report_id manually set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "company_record_id": {
      "main": [
        [
          {
            "node": "Get current step saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADS headers and texts creation services for updates": {
      "main": [
        [
          {
            "node": "Execute a SQL query2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps2": {
      "main": [
        [
          {
            "node": "update workflow tokens usage3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved3": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed3": {
      "main": [
        [
          {
            "node": "Get current step saved3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB3": {
      "main": [
        [
          {
            "node": "Get current step saved3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name3": {
      "main": [
        [
          {
            "node": "set input data for SUB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB3": {
      "main": [
        [
          {
            "node": "Call SUB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query3": {
      "main": [
        [
          {
            "node": "If SUB process  already executed3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps3": {
      "main": [
        [
          {
            "node": "update workflow tokens usage4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved4": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed4": {
      "main": [
        [
          {
            "node": "Get current step saved4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB4": {
      "main": [
        [
          {
            "node": "Get current step saved4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name4": {
      "main": [
        [
          {
            "node": "set input data for SUB4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB4": {
      "main": [
        [
          {
            "node": "Call SUB4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query4": {
      "main": [
        [
          {
            "node": "If SUB process  already executed4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage4": {
      "main": [
        [
          {
            "node": "ADV_campaign_analysis_initial",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADV_campaign_get_service": {
      "main": [
        [
          {
            "node": "Execute a SQL query4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If report_id manually set": {
      "main": [
        [
          {
            "node": "override report_id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "company_record_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "override report_id": {
      "main": [
        [
          {
            "node": "company_record_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps4": {
      "main": [
        [
          {
            "node": "update workflow tokens usage5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved5": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed5": {
      "main": [
        [
          {
            "node": "Get current step saved5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB5": {
      "main": [
        [
          {
            "node": "Get current step saved5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name5": {
      "main": [
        [
          {
            "node": "set input data for SUB5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB5": {
      "main": [
        [
          {
            "node": "Call SUB5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query5": {
      "main": [
        [
          {
            "node": "If SUB process  already executed5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if keyword need to be restricted": {
      "main": [
        [
          {
            "node": "Execute a SQL query5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage3": {
      "main": [
        [
          {
            "node": "extract data for updates with header",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps5": {
      "main": [
        [
          {
            "node": "update workflow tokens usage6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved6": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed6": {
      "main": [
        [
          {
            "node": "Get current step saved6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB6": {
      "main": [
        [
          {
            "node": "Get current step saved6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name6": {
      "main": [
        [
          {
            "node": "set input data for SUB6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB6": {
      "main": [
        [
          {
            "node": "Call SUB6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query6": {
      "main": [
        [
          {
            "node": "If SUB process  already executed6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage5": {
      "main": [
        [
          {
            "node": "minus words vs content review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps6": {
      "main": [
        [
          {
            "node": "update workflow tokens usage7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved7": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed7": {
      "main": [
        [
          {
            "node": "Get current step saved7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB7": {
      "main": [
        [
          {
            "node": "Get current step saved7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name7": {
      "main": [
        [
          {
            "node": "set input data for SUB7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB7": {
      "main": [
        [
          {
            "node": "Call SUB7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query7": {
      "main": [
        [
          {
            "node": "If SUB process  already executed7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage6": {
      "main": [
        [
          {
            "node": "campaign core update finalization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "campaign core update finalization": {
      "main": [
        [
          {
            "node": "Execute a SQL query7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage7": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If company_id manually set": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps7": {
      "main": [
        [
          {
            "node": "update workflow tokens usage8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved8": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed8": {
      "main": [
        [
          {
            "node": "Get current step saved8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB8": {
      "main": [
        [
          {
            "node": "Get current step saved8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name8": {
      "main": [
        [
          {
            "node": "set input data for SUB8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB8": {
      "main": [
        [
          {
            "node": "Call SUB8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query8": {
      "main": [
        [
          {
            "node": "If SUB process  already executed8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage8": {
      "main": [
        [
          {
            "node": "ADS headers and texts creation services for updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADV_campaign_analysis_initial": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADV_campaign_analysis_AI": {
      "main": [
        [
          {
            "node": "Execute a SQL query8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "minus words post processing": {
      "main": [
        [
          {
            "node": "Execute a SQL query3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "minus words vs content review": {
      "main": [
        [
          {
            "node": "Execute a SQL query6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps8": {
      "main": [
        [
          {
            "node": "update workflow tokens usage9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved9": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed9": {
      "main": [
        [
          {
            "node": "Get current step saved9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB9": {
      "main": [
        [
          {
            "node": "Get current step saved9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name9": {
      "main": [
        [
          {
            "node": "set input data for SUB9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB9": {
      "main": [
        [
          {
            "node": "Call SUB9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query9": {
      "main": [
        [
          {
            "node": "If SUB process  already executed9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract data for updates with header": {
      "main": [
        [
          {
            "node": "Execute a SQL query9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps9": {
      "main": [
        [
          {
            "node": "update workflow tokens usage10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step saved10": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If SUB process  already executed10": {
      "main": [
        [
          {
            "node": "Get current step saved10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get workflow id by name10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call SUB10": {
      "main": [
        [
          {
            "node": "Get current step saved10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get workflow id by name10": {
      "main": [
        [
          {
            "node": "set input data for SUB10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set input data for SUB10": {
      "main": [
        [
          {
            "node": "Call SUB10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query10": {
      "main": [
        [
          {
            "node": "If SUB process  already executed10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage10": {
      "main": [
        [
          {
            "node": "ADV_campaign_analysis_AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADV_campaign_analysis_AI_1": {
      "main": [
        [
          {
            "node": "Execute a SQL query10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update workflow tokens usage9": {
      "main": [
        [
          {
            "node": "Check if keyword need to be restricted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When clicking ‘Execute workflow’": [
      {
        "json": {}
      }
    ]
  },
  "versionId": "0264f0de-3431-422e-9052-18dc6f5d4adc",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-25T13:33:58.106Z",
      "updatedAt": "2025-09-25T13:33:58.106Z",
      "role": "workflow:owner",
      "workflowId": "0J5cvuaSz3IhDS99",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-10-06T13:06:54.644Z",
      "updatedAt": "2025-10-06T13:06:54.644Z",
      "id": "DBEf57wUDunVJUG6",
      "name": "campaign update"
    }
  ]
}