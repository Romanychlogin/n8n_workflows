{
  "createdAt": "2025-09-30T17:56:19.098Z",
  "updatedAt": "2025-10-15T11:17:56.690Z",
  "id": "UUlsZU9GOCmdvDHg",
  "name": "extract data for updates with header",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        4912,
        0
      ],
      "id": "422a90e5-a9cd-4517-8da4-d3d0d881f080"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {
          "fileName": "output.xlsx",
          "headerRow": false
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1040,
        -80
      ],
      "id": "f01b45d2-eae8-43cf-826b-8e9fc600423b",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "path": "/ADS_startup",
        "binaryData": true
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        2752,
        -96
      ],
      "id": "b481d235-879e-4fb6-8731-744f3bc50137",
      "name": "Upload a file",
      "credentials": {
        "dropboxApi": {
          "id": "KgtvFdGsueqNuB0Z",
          "name": "Dropbox account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e22ad154-2123-49fe-9e5a-c7fe836825f8",
              "name": "add_adv",
              "value": "={{ $json.add_adv }}",
              "type": "string"
            },
            {
              "id": "4262c0ff-c141-4fde-aebe-187481d9d0df",
              "name": "ADV_type",
              "value": "Текстово-графическое",
              "type": "string"
            },
            {
              "id": "a11661b9-dc1c-4750-b93f-ba5b74836562",
              "name": "mob",
              "value": "-",
              "type": "string"
            },
            {
              "id": "e1100e5c-4c72-456e-b2ec-55f0f536bff1",
              "name": "group_uid",
              "value": "",
              "type": "string"
            },
            {
              "id": "d9b1b21a-f230-41db-af85-b9bbcb554ee4",
              "name": "group_name",
              "value": "={{ $json.group_name }}",
              "type": "string"
            },
            {
              "id": "c0cb504d-2b55-4c1f-a628-80b7a369a078",
              "name": "group_id",
              "value": "=",
              "type": "number"
            },
            {
              "id": "5c643aae-d54d-4ad8-aee2-f5114f35f078",
              "name": "id_phrase",
              "value": " ",
              "type": "string"
            },
            {
              "id": "1df69495-ac3c-4f36-ac5d-5a014914feb0",
              "name": "key_words",
              "value": "={{ $json.key_word }}",
              "type": "string"
            },
            {
              "id": "4455b796-76dd-4789-b04d-51f793ae70f1",
              "name": "id_adv",
              "value": "",
              "type": "string"
            },
            {
              "id": "b308d9ca-9676-4837-a7b0-3512c73bf481",
              "name": "ad_header",
              "value": "={{ $json.ad_header }}",
              "type": "string"
            },
            {
              "id": "559ee132-e1dd-444b-9f9e-d87e5e8b1974",
              "name": "ad_header2",
              "value": "={{$json.cleaned_service_name}}",
              "type": "string"
            },
            {
              "id": "04f85c2c-a0b8-4ff8-9715-8ca7c329976e",
              "name": "ad_text",
              "value": "={{ $json.ad_text }}",
              "type": "string"
            },
            {
              "id": "4219b151-e444-4094-81c0-519c5352de8e",
              "name": "empty_1",
              "value": "",
              "type": "string"
            },
            {
              "id": "f18d9f2a-05a4-4294-be69-17504b51bacc",
              "name": "empty_2",
              "value": "",
              "type": "string"
            },
            {
              "id": "a312e417-8674-4cc4-84c2-efc3b997c5cc",
              "name": "empty_3",
              "value": "",
              "type": "string"
            },
            {
              "id": "61c57fa1-7755-4bf4-b39f-3369363114f6",
              "name": "ad_url",
              "value": "={{ $json.ad_url }}",
              "type": "string"
            },
            {
              "id": "e3a249d0-8ec2-4d1e-91c6-32affb8b0734",
              "name": " display_url",
              "value": "",
              "type": "string"
            },
            {
              "id": "c060b10e-692d-4334-8efa-6f7caf10a9f7",
              "name": "company_id",
              "value": "={{ $('select company data').first().json.yandex_id }}",
              "type": "string"
            },
            {
              "id": "8fe20bbd-a870-40f5-9798-4546e9ad1d5e",
              "name": "empty_4",
              "value": "",
              "type": "string"
            },
            {
              "id": "886783a2-ee5e-43c6-93ff-2e5c4f96fb8f",
              "name": "region",
              "value": "={{ $('select company data').first().json.yandex_region }}",
              "type": "string"
            },
            {
              "id": "c62dd54c-0098-4a3b-8d48-69e150b13099",
              "name": "auto_bid",
              "value": "={{ $json.service_bid}}",
              "type": "string"
            },
            {
              "id": "e7a8750e-09ea-46b6-8d5a-c38e3e4e46ca",
              "name": "bid",
              "value": "={{ $json.service_bid}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        704,
        -80
      ],
      "id": "53b9c994-d82d-4051-b03a-357724c272e3",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5b3485a2-cb50-486a-932c-fc27de0a25da",
              "name": "company_id",
              "value": "1",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -320,
        -80
      ],
      "id": "4a3d50e6-d09e-4db0-b06b-23ceefb8389e",
      "name": "Set variables"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT ad.*, cs1.service_bid, regexp_replace(\n    cs1.service_name,\n    '[^a-zA-Zа-яА-ЯёЁ ]',\n    '',\n    'g'\n) AS cleaned_service_name,cs1.count_clics \nFROM current_ads_list AS ad\nLEFT JOIN LATERAL (\n    SELECT cs.service_bid,cs.service_name, COALESCE(kw.count_clics,0) as count_clics\n    FROM current_list kw\n    JOIN company_services cs\n      ON cs.service_id = kw.service_id\n     AND cs.company_id = ad.company_id       -- если есть привязка к компании — рекомендую\n    WHERE kw.key_word = ad.key_word  \n    ORDER BY cs.service_bid DESC NULLS LAST  -- критерий выбора ОДНОЙ записи\n    LIMIT 1\n) AS cs1 ON TRUE\nWHERE ad.company_id = $1 AND ad.need_check=false order by service_name,count_clics desc;",
        "options": {
          "queryReplacement": "={{ $json.company_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        224,
        -80
      ],
      "id": "16819f54-d4a3-4020-994a-9cdba0646688",
      "name": "select ads data",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "companies",
          "mode": "list",
          "cachedResultName": "companies"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "company_id",
              "value": "={{ $json.company_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -32,
        -80
      ],
      "id": "96c57c21-ef6a-4ed7-87d3-2594efbb56f3",
      "name": "select company data",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// === настройки ===\nconst BATCH_SIZE = 50;\n\n// все входные элементы\nconst inputItems = $input.all();           // [{ json: {...} }, ...]\nconst rows = inputItems.map(i => i.json);\n\n// 1) группируем по cleaned_service_name (сохраняем порядок появления)\nconst byService = new Map();\nfor (const rec of rows) {\n  const key = rec.cleaned_service_name ?? '';\n  if (!byService.has(key)) byService.set(key, []);\n  byService.get(key).push(rec);\n}\n\nconst out = [];\n\n// 2) по каждой группе режем на пачки ≤ 50\nfor (const [serviceName, list] of byService.entries()) {\n  for (let offset = 0, batchNo = 1; offset < list.length; offset += BATCH_SIZE, batchNo++) {\n    const batch = list.slice(offset, offset + BATCH_SIZE);\n    if (batch.length === 0) continue;\n\n    const groupName = `${serviceName}_${batchNo}`;\n\n    // Берём шаблон из первой записи пачки\n    const first = batch[0] ?? {};\n    const templateHeader = first.ad_header;\n    const templateText   = first.ad_text;\n    const templateUrl    = first.ad_url;\n\n    // 2.1) ОРИГИНАЛЬНЫЕ записи пачки:\n    //     ad_header/ad_text/ad_url = из первой записи пачки\n    for (const rec of batch) {\n      out.push({\n        json: {\n          ...rec,\n          group_name: groupName,\n          ad_header: templateHeader,\n          ad_text:   templateText,\n          ad_url:    templateUrl,\n          add_adv:'-'\n        },\n      });\n    }\n\n    // 2.2) Дубликаты всех, КРОМЕ первой, с пустым key_word\n    for (let i = 1; i < batch.length; i++) {\n      out.push({\n        json: {\n          ...batch[i],\n          group_name: groupName,\n          key_words: '', // очищаем только key_words\n          add_adv:'+'\n        },\n      });\n    }\n  }\n}\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        -80
      ],
      "id": "8a20bdc0-26f0-48a8-a962-4ff2b49c80bd",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1008,
        16
      ],
      "id": "8beb55ec-60d2-46a3-842d-2113e27efdab",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id,n8n_workflow_root_execution_id, started)\nSELECT MAX(business_process_id), $2,$3,$4, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}},{{ $('When Executed by Another Workflow').item.json.root_execution_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -736,
        -32
      ],
      "id": "ca2edbb3-ee5f-42c0-a8e6-71ee04fbfbd1",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1600,
        -48
      ],
      "id": "9aa4f336-7e95-4bdf-9fee-405847ce75b2",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "280083b6-06ad-4a7b-9901-0b620e166437",
              "name": "path",
              "value": "https://www.dropbox.com/scl/fi/u8qppd514in2neu7fkjnd/702142188_example.xlsx?rlkey=1rt8hutw556avhy5ahqtvj7w8&dl=1",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -624,
        160
      ],
      "id": "1cde0995-75f3-4bee-949a-1ced75d68421",
      "name": "set template path"
    },
    {
      "parameters": {
        "url": "={{$json.path}}",
        "responseFormat": "file",
        "options": {}
      },
      "id": "32181324-eb18-4007-9837-66c20cd1d736",
      "name": "Download File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        864,
        128
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1088,
        336
      ],
      "id": "fc8e7286-c614-443e-b155-d50951d9cc1b",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "target.xlsx",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1248,
        -80
      ],
      "id": "ac2619a8-f9bb-4862-a2ed-ac37f73009d6",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "template.xlsx",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1280,
        112
      ],
      "id": "f908967b-84a2-4607-96ea-c5b14af7593c",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        336,
        624
      ],
      "id": "482f7b68-7d5d-4e3b-949a-651913281f39",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "command": "cat > xlsx_apply_template.js <<'EOF'\nconst ExcelJS = require('exceljs');\n\n/*\nЗапуск:\nnode xlsx_apply_template.js \\\n  /data/in/template.xlsx \\\n  /data/in/target.xlsx \\\n  /data/out/output_with_header.xlsx \\\n  12 1 1 \\\n  \"СТРОКА_ДЛЯ_E9\" \\\n  false\n\nАргументы:\n 2: templatePath\n 3: targetPath\n 4: outPath\n 5: HEADER_ROWS (по умолчанию 12 → данные начнутся со строки 13)\n 6: templateSheetIndex (1-based)\n 7: targetSheetIndex   (1-based)\n 8: e9Value\n 9: CLEAR_BELOW (optional: \"true\"/\"false\"; если true — перед вставкой очистит всё ниже шапки)\n*/\n\nconst templatePath = process.argv[2];\nconst targetPath   = process.argv[3];\nconst outPath      = process.argv[4];\nconst HEADER_ROWS  = parseInt(process.argv[5] || '12', 10);\nconst templateSheetIndex = parseInt(process.argv[6] || '1', 10);\nconst targetSheetIndex   = parseInt(process.argv[7] || '1', 10);\nconst e9Value     = process.argv[8] || '';\nconst CLEAR_BELOW = String(process.argv[9] || 'false').toLowerCase() === 'true';\n\n(async () => {\n  const wbTpl = new ExcelJS.Workbook();\n  await wbTpl.xlsx.readFile(templatePath);\n  const wsTpl = wbTpl.getWorksheet(templateSheetIndex);\n  if (!wsTpl) throw new Error('Template worksheet not found');\n\n  const wbSrc = new ExcelJS.Workbook();\n  await wbSrc.xlsx.readFile(targetPath);\n  const wsSrc = wbSrc.getWorksheet(targetSheetIndex);\n  if (!wsSrc) throw new Error('Target worksheet not found');\n\n  // где начинаем вставлять данные\n  const startRow = HEADER_ROWS + 1;\n\n  // опционально очищаем всё ниже шапки (чтобы не осталось старых данных в шаблоне)\n  if (CLEAR_BELOW) {\n    const toDelete = Math.max(0, (wsTpl.rowCount || 0) - HEADER_ROWS);\n    if (toDelete > 0) wsTpl.spliceRows(startRow, toDelete);\n  }\n\n  // определяем размер данных исходника\n  const maxRow = wsSrc.actualRowCount || wsSrc.rowCount || 0;\n  const maxCol = wsSrc.actualColumnCount || wsSrc.columnCount || 0;\n\n  // вставляем построчно значения (без стилей и без merge)\n  for (let r = 1; r <= maxRow; r++) {\n    const srcRow = wsSrc.getRow(r);\n    const dstRow = wsTpl.getRow(startRow + r - 1);\n\n    for (let c = 1; c <= maxCol; c++) {\n      const srcCell = srcRow.getCell(c);\n      const dstCell = dstRow.getCell(c);\n\n      dstCell.value = srcCell.value;       // копируем только value\n      if (srcCell.numFmt) {                // и формат числа, при наличии\n        dstCell.numFmt = srcCell.numFmt;\n      }\n    }\n    if (dstRow.commit) dstRow.commit();\n  }\n\n  // задаём E9 после вставки\n  wsTpl.getCell('E9').value = e9Value;\n\n  await wbTpl.xlsx.writeFile(outPath);\n  process.stdout.write(outPath);\n})().catch(e => { console.error(e); process.exit(1); });\nEOF"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        560,
        624
      ],
      "id": "0da68622-f5d3-495d-8a4b-2dd87d61e499",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "command": "=node xlsx_header.js \\\n  template.xlsx \\\n  target.xlsx \\\n  output_with_header.xlsx \\\n  12 1 1 \\\n  \"{{$('When Executed by Another Workflow').first().json.minus_words}}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1808,
        -48
      ],
      "id": "f6e7cc99-94ef-42fb-b65f-795c421487f9",
      "name": "Execute Command1"
    },
    {
      "parameters": {
        "fileSelector": "output_with_header.xlsx",
        "options": {
          "dataPropertyName": "data"
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2016,
        -48
      ],
      "id": "67ba370d-0684-4fe6-8a84-a2a35e0f5ac0",
      "name": "Read/Write Files from Disk2"
    }
  ],
  "connections": {
    "Replace Me": {
      "main": [
        []
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set variables": {
      "main": [
        [
          {
            "node": "select company data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "select ads data": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "select company data": {
      "main": [
        [
          {
            "node": "select ads data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          },
          {
            "node": "set template path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Execute Command1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set template path": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        []
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk2": {
      "main": [
        [
          {
            "node": "Upload a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "company_id": 1,
          "root_execution_id": 74293,
          "minus_words": "-2018 -2025 -абакан -алматы -альметьевск -амур -ангарск -арзамас -армавир -архангельск -астрахани -ачинск -балаково -барнаул -батайск -беларуси -белгород -белоруссия -белорусский -березники -бесплатно -бийск -благовещенск -бобруйс -бобруйске -боровичи -братск -брянск -вакансии -великая -вк -владивосток -владикавказ -владимир -волгоград -волгодонск -волжском -вологда -волхова -воронеж -гатчине -геленджик -глазова -гомеле -грозный -дербент -дзержинск -димитровград -днепропетровск -днр -дону -дятьково -екатеринбург -елец -зеленодольск -златоуст -иваново -ижевск -илимск -иркутск -йошкар -казани -калининград -калуг -каменск -камчатская -камышин -канск -кемерово -киев -кирова -кирове -киселевск -кисловодск -ковров -комсомольск -копейск -кострома -край -краснодар -краснодарский -красноярск -крыму -кузнецк -кузнецкая -курган -курск -кызыл -ленинск -липецк -магнитогорск -майкоп -махачкала -междуреченск -миасс -минск -могилеве -мура -мурманск -муром -мурома -мытищи -набережные -назрани -нальчик -находка -невинномысск -нефтекамск -нефтеюганск -нижне -нижневартовск -нижнекамск -новгород -новокузнецк -новокуйбышевск -новомосковск -новороссийск -новосибирск -новотроицк -новочебоксарск -новочеркасск -новошахтинск -ногинску -норильск -одесса -октябрьская -омск -орела -оренбург -орск -оскол -пенза -первоуральск -перми -петербург -петрозаводск -питере -прокопьевск -псков -пятигорск -ростов -рубцовск -рыбинск -рязани -салават -самар -самарская -самому -самостоятельно -саранск -сарапул -сахалинск -севастополе -северодвинск -северск -симферополь -смоленск -смотреть -соликамск -сочи -спб -ставрополь -стерлитамак -сургут -сызрани -сыктывкар -таганрог -тагил -тамбов -твери -тобольска -тольятти -томск -тула -тюмени -удэ -украина -улан -ульяновск -уральская -уссурийск -усть -уфа -ухта -хабаровск -хасавюрт -чебоксар -челнах -челябинск -череповец -черкесск -чита -шахт -элиста -ютуб -якутск -ялте -ярославле -к -как -кого -кто -ли -может -не -нет -о -об -своими -у -чего -чем -что -это -бесплатная -бесплатные -бесплатный -вакансия -варианты -википедия -вконтакте -гост -график -зачем -значит -какая -какие -какими -какого -какое -какой -скачать -слушать -снится -сон -сонник -абакана -альметьевска -амура -амуре -ангарска -арзамаса -армавира -архангельска -архангельске -астрахань -ачинска -барнаула -барнауле -батайска -батайске -беларусь -белгорода -белгороде -белорусских -бийска -благовещенске -братска -брянска -брянске -брянски -великие -великий -великого -владивостока -владикавказа -владимира -владимире -волгограда -волгограде -волжская -волжские -волжский -волжских -волжского -волжское -волжской -волжскую -вологде -вологду -воронежа -воронеже -уфе -хабаровска -хасавюрта -чебоксары -челнов -челны -челябинска -челябинске -челябинску -череповца -череповце -читу -читы -шахта -шахту -шахты -якутска -ярославль -ярославля -чите -Апрелевка -Апрелевке -Балашиха -Балашихе -Бронницах -Бронницы -Видное -Волоколамск -Волоколамске -Воскресенск -Воскресенске -геленджике -глазов -глазовов -гомель -дзержинска -димитровграда -днепропетровске -екатеринбурга -екатеринбурге -екатеринбургу -зеленодольска -златоуста -ижевска -ижевске -ижевску -илимска -иркутска -иркутске -казань -калининграда -калининграде -калуга -калуге -калуги -калугу -каменска -каменски -камчатские -камчатский -камчатских -камчатского -камчатское -камчатской -камчатскую -камышина -камышинов -камышины -канска -канске -киеве -киров -киселевска -киселевске -кисловодска -комсомольска -комсомольске -костроме -кострому -костромы -краснодара -краснодаре -краснодару -красноярска -красноярске -кузнецкие -кузнецкое -кузнецкой -кузнецкую -кургана -кургане -курганы -курска -курске -ленинска -ленинске -липецка -липецке -липецки -магнитогорска -магнитогорске -майкопа -махачкале -махачкалу -махачкалы -миасса -миассов -миассы -Голицыно -Дмитров -Домодедово -Дубна -Дубне -Егорьевск -Егорьевске -железнодорожном -железнодорожный -жуковское -жуковском -Звенигород -Звенигороде -зеленоград -зеленограда -зеленограде -зуево -Ивантеевка -Ивантеевке -Истра -Истре -Кашира -Кашире -Клин -Клину -коломна -коломне -колпино -королев -королеве -Красногорск -Красногорске -Кубинка -Лобня -Луховицы -люберцах -люберцы -Можайск -Можайске -ногинск -ногинска -ногинске -обнинск -обнинска -обнинске -одинцово -орехово -Павловский -подольск -подольска -подольске -подольску -посад -посаде -минске -мур -мурманска -мурманске -мурому -набережных -назрань -нальчика -находки -находку -невинномысска -невинномысске -нефтекамска -нефтекамске -нефтеюганска -нефтеюганске -нижневартовска -нижневартовске -нижнего -нижнекамска -нижнекамске -нижнем -нижний -новгорода -новгороде -новгороду -новокузнецка -новокузнецке -новокуйбышевска -новокуйбышевске -новомосковска -новороссийска -новороссийске -новосибирска -новосибирске -новосибирску -новотроицка -новотроицки -новочебоксарска -новочебоксарске -новочеркасска -новочеркасске -новошахтинска -новошахтинске -норильска -норильске -октябрьские -октябрьский -ола -омска -омске -омску -орел -оренбурга -оренбурге -орла -орле -орска -орске -оскола -осколов -осколы -пензе -пензу -пензы -первоуральска -первоуральске -пермь -петербурга -петербурге -петербургу -прокопьевска -прокопьевске -пскова -пскове -пятигорска -пятигорске -ростове -рубцовска -рыбинска -Пушкино -Раменское -Руза -сергиев -серпухов -серпухова -серпухове -Солнечногорск -Солнечногорске -Ступино -Талдом -Фоминск -фоминске -химки -чехов -чехове -щелково -электростали -электросталь -Яхрома -Москва -Московская -рязань -салавата -самара -самаре -самару -самары -саранска -саранске -сахалинска -сахалинске -севастополь -северодвинска -северодвинске -смоленска -смоленске -соликамска -ставрополя -сургута -сургуте -сызрань -сыктывкаре -таганрога -2019 -2020 -2021 -2022 -2023 -2024 -2026 -чему -быть -вам -если -или -тагила -тамбова -тамбове -тверь -томска -томске -туле -тулы -тюмень -украине -ульяновска -ульяновске -уральские -уральский -уральских -уральского -уральское -уральской -уральскую -уссурийска"
        }
      }
    ]
  },
  "versionId": "51336fa6-6f20-495f-b585-a30caba43713",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-30T17:56:19.098Z",
      "updatedAt": "2025-09-30T17:56:19.098Z",
      "role": "workflow:owner",
      "workflowId": "UUlsZU9GOCmdvDHg",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-10-06T13:06:54.644Z",
      "updatedAt": "2025-10-06T13:06:54.644Z",
      "id": "DBEf57wUDunVJUG6",
      "name": "campaign update"
    }
  ]
}