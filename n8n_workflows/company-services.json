{
  "createdAt": "2025-09-10T14:56:27.610Z",
  "updatedAt": "2025-10-22T12:40:32.454Z",
  "id": "5Se0CY4jTtS5g7n3",
  "name": "company services",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "Есть следующее описание сервисов компании ХХХ от пользователя. Кроме этого есть следующая дополнительная информация. Собери в таблицу следующей структуры информацию по каждому сервису: ",
        "height": 480,
        "width": 368
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -592,
        -432
      ],
      "id": "acc4e82e-412e-42a9-a4bd-37cfcefbf394",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "company_services.txt",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -240,
        64
      ],
      "id": "20b12beb-1a52-48df-b940-2ffd4994f7e4",
      "name": "Get a file1",
      "webhookId": "87cb7d0c-6971-44f5-a103-a1ac454e96fe",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -80,
        64
      ],
      "id": "45d05415-2f30-4487-b906-0614fd2f4ecf",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.my_prompt = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        128,
        64
      ],
      "id": "9e5d0c31-eff1-4c35-86d7-d2198770c331",
      "name": "Code3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2304,
        80
      ],
      "id": "a2abd329-0d5f-4585-8e52-137fb63dc717",
      "name": "HTTP Request",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nconst my_prompt = workflowData.git_prompt.data;\n\nreturn [{\n  json: \n {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"Выводи только валидный JSON-массив объектов в формате: [{\\\"service_name\\\": string, \\\"service_url\\\": string, \\\"service_description\\\": string}]. Не добавляй комментариев или форматирования вне этого массива.\\n\\n'''\\nФормат вывода:\\n- Массив объектов JSON.\\n- Каждый объект должен содержать поля:\\n  - \\\"service_name\\\": (обязательно, string) — название сервиса.\\n  - \\\"service_url\\\": (опционально, string) — адрес сервиса. Если адрес не идентифицирован - передай null\\n  - \\\"service_description\\\": (опционально, string) —полное описание сервиса. Если если описание не идентифицированино  - передай null\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt \n        }\n      ]\n    }\n  ],\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"service_listing\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"service\": {\n            \"type\": \"array\",\n            \"description\": \"service_listing, each as a name, URL and description row.\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"service_name\": {\n                  \"type\": \"string\",\n                  \"description\": \"The name of the service\",\n                  \"minLength\": 1\n                },\n                \"service_url\": {\n                  \"type\": \"string\",\n                  \"description\": \"The URL where the service is available\",\n                  \"minLength\": 1\n                },\n                \"service_description\": {\n                  \"type\": \"string\",\n                  \"description\": \"Detailed description of the service\",\n                  \"minLength\": 1\n                }\n              },\n              \"required\": [\n                \"service_name\",\n                \"service_url\",\n                \"service_description\"\n              ],\n              \"additionalProperties\": false\n            }\n          }\n        },\n        \"required\": [\n          \"service\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"medium\"\n  },\n  \"reasoning\": {\n    \"effort\": \"medium\",\n    \"summary\": null\n  },\n  \"tools\": [],\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2144,
        80
      ],
      "id": "8d9261b7-57f6-4d96-90ae-4ae6b72dba86",
      "name": "Set API JSON"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2928,
        80
      ],
      "id": "52edc5a1-4572-45dd-b48c-fe8668a2ebb7",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "company_services",
          "mode": "list",
          "cachedResultName": "company_services"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "company_id": "={{ $json.company_id }}",
            "service_name": "={{ $json.service_name }}",
            "service_url": "={{ $json.service_url }}",
            "service_description": "={{ $json.service_description }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "service_id",
              "displayName": "service_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "service_name",
              "displayName": "service_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "service_url",
              "displayName": "service_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "service_description",
              "displayName": "service_description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3216,
        96
      ],
      "id": "62a64ba7-b2d8-4b5e-99e7-6cffd28f874c",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Берём первый item из входных данных\nconst input = JSON.parse($json.output[1].content[0].text);\nconst company_id=$('SET company').first().json.company_id\n// Достаём массив competitors\nconst variants = input.service;\n\n// Разворачиваем каждый объект в отдельный item\nreturn variants.map((c, index) => ({\n  json: {\n    index,\n    service_name: c.service_name,\n    service_url: c.service_url,\n    service_description: c.service_description,\n    company_id:company_id\n    \n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2528,
        80
      ],
      "id": "48224588-2811-489a-b615-3762e170d773",
      "name": "Parse JSON"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -672,
        80
      ],
      "id": "e1bb5f44-7d7d-4a76-a14a-49a1127f66cd",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id,n8n_workflow_root_execution_id, started)\nSELECT MAX(business_process_id), $2,$3,$4, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}},{{ $('When Executed by Another Workflow').item.json.root_execution_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -480,
        80
      ],
      "id": "00dc5a94-3c5c-4d7b-8498-e369248111c6",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW() where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3136,
        -160
      ],
      "id": "6506b2bc-0455-4b8d-a494-7947c1fdd87c",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "list",
        "filters": {}
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        528,
        -208
      ],
      "id": "bc158e70-af9c-4ee0-be4c-b86fb5034b48",
      "name": "List a folder",
      "credentials": {
        "dropboxApi": {
          "id": "KgtvFdGsueqNuB0Z",
          "name": "Dropbox account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt.data;\n\nconst wf = $('When Executed by Another Workflow').first().json;\nconst companyName   = wf?.company_name ?? '';\nconst dropboxFolder = wf?.user_content_dropbox_folder ?? '';\n\nconst dataServices  = $input.first()?.json?.data_services ?? '';\n// Если папка пуста — подставляем пустую строку, иначе можно подставить содержимое (если оно у вас есть)\nconst companyContent = dropboxFolder ? ($input.first()?.json?.company_content ?? '') : '';\n\n// Собираем my_prompt\nitem.json.my_prompt = String(my_prompt)\n  .replaceAll('{{ccompany_name}}', companyName)\n  .replaceAll('{{services_list}}', dataServices)\n  .replaceAll('{{company_content}}', companyContent);\n\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1968,
        96
      ],
      "id": "9b692ab7-941a-414a-8127-93630973a8d0",
      "name": "Set prompt"
    },
    {
      "parameters": {
        "content": "to add company_url analysis in prompt"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1120,
        -48
      ],
      "id": "f0f1f790-b0e2-496c-98ed-9b7af81237b3",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3, tokens_used=$4,tokens_used_type=$5 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}},{{$json.tokens_used}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3696,
        96
      ],
      "id": "141a0bca-e21d-4acf-bfcc-3b96d11e0938",
      "name": "Mark_workflow_passed_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\n//set used tokens here!!!!\nworkflowData.tokens_used =;\nfor (const item of $input.all()) {\n  item.json.steps_passed = workflowData.steps_passed;\n  item.json.tokens_used = workflowData.tokens_used\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3456,
        112
      ],
      "id": "18e87029-f008-4df2-a7ea-e6af7def0e6f",
      "name": "Get current step and tokens saved"
    },
    {
      "parameters": {
        "errorMessage": "Process terminated by user"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        4320,
        0
      ],
      "id": "7705ff83-9613-4400-b432-a3d8fbb96566",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "business_processes_states",
          "mode": "list",
          "cachedResultName": "business_processes_states"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "n8n_workflow_execution_id",
              "value": "={{ $execution.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3904,
        96
      ],
      "id": "46b21f50-e94b-4649-ad8e-0f3fa02af708",
      "name": "check if termination is requested",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fa13510a-3a56-4cd5-8b80-3e4fe626ce0b",
              "leftValue": "={{ $json.to_terminate }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4112,
        96
      ],
      "id": "3ef8876e-950c-439a-a9c1-b0f504058731",
      "name": "If1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_total=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.total}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2672,
        -176
      ],
      "id": "0d31e54c-d3dd-40ac-bc7b-45d4ef984acf",
      "name": "Mark_workflow_total_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nworkflowData.tokens_used = 0;\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2848,
        -176
      ],
      "id": "bd738d46-4a08-4265-8f9f-344e03385655",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "09752f3f-1379-46b7-8ab2-7df7b3934143",
              "leftValue": "={{ $('When Executed by Another Workflow').item.json.user_content_dropbox_folder}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        288,
        160
      ],
      "id": "92ffbafe-8925-409b-9128-69e53f2a5f1d",
      "name": "If no content"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "folder",
        "operation": "list",
        "path": "={{ $('When Executed by Another Workflow').item.json.user_content_dropbox_folder }}",
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        496,
        256
      ],
      "id": "293315a0-8021-44c6-9c21-f17cc792b014",
      "name": "List a folder1",
      "credentials": {
        "dropboxOAuth2Api": {
          "id": "AugpA5e12rWISfZ5",
          "name": "Dropbox OAuth"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        704,
        240
      ],
      "id": "f5fed606-03d5-41ce-8c09-3d4ee1ee24ea",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "download",
        "path": "={{ $json.pathDisplay }}"
      },
      "type": "n8n-nodes-base.dropbox",
      "typeVersion": 1,
      "position": [
        928,
        272
      ],
      "id": "20b31a58-9171-443c-ad4d-30c3dfb7442a",
      "name": "Download a file",
      "credentials": {
        "dropboxOAuth2Api": {
          "id": "AugpA5e12rWISfZ5",
          "name": "Dropbox OAuth"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.name }}",
                    "rightValue": ".txt",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "d05a18fa-91ef-463f-af7b-80c4b63cfb29"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "txt"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fefbbdf-1c9e-4225-ae36-0ef5af4d5ab4",
                    "leftValue": "={{ $json.name }}",
                    "rightValue": ".pdf",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pdf"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c7098d3e-a67d-4d04-ac4d-d7c7c6d987fa",
                    "leftValue": "={{ $json.name }}",
                    "rightValue": ".xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "xlsx"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "91a2595f-ab9d-4ded-b26f-2b7836c2dd07",
                    "leftValue": "={{ $json.name }}",
                    "rightValue": ".rtf",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "rtf"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        1168,
        288
      ],
      "id": "f0782227-ca8c-4c11-b0c6-6e4830980654",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1632,
        80
      ],
      "id": "0bd8919c-2010-42df-8b0f-af40724dbcc0",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1632,
        256
      ],
      "id": "fa83cccd-ca6e-4dfe-875c-0731c1e18e14",
      "name": "Extract from File3"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1648,
        432
      ],
      "id": "1f000db8-7289-49a9-b160-d833a263c4d7",
      "name": "Extract from File4"
    },
    {
      "parameters": {
        "content": "Добавить анализ других файлов через AI"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1040,
        624
      ],
      "id": "c1b39af2-9d2f-4cf5-b97a-1583453be513",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "rtf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1584,
        624
      ],
      "id": "451bb4b9-9f03-479c-a0e2-524bf543ffde",
      "name": "Extract from File5"
    }
  ],
  "connections": {
    "Get a file1": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "If no content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Get current step and tokens saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mark_workflow_total_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Get a file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set prompt": {
      "main": [
        [
          {
            "node": "Set API JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps": {
      "main": [
        [
          {
            "node": "check if termination is requested",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step and tokens saved": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check if termination is requested": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_total_steps": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If no content": {
      "main": [
        [],
        [
          {
            "node": "List a folder1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List a folder1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Download a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download a file": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "id": "ezK8ihYnfxZNTIAc",
          "root_execution_id": 20076,
          "company_id": 2,
          "threshhold": "0.88",
          "company_name": "Первый визовый центр Курган",
          "services_description": "Визы:    http://krg45.visa-rf.ru/ АТЭС:    http://krg45.apec-first.ru/",
          "user_content_dropbox_folder": "/Test_content_folder_for_Kurgan"
        }
      }
    ]
  },
  "versionId": "7464aa0e-7e9c-4cbd-bbcc-d8a3d398b430",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-10T14:56:27.610Z",
      "updatedAt": "2025-09-10T14:56:27.610Z",
      "role": "workflow:owner",
      "workflowId": "5Se0CY4jTtS5g7n3",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}