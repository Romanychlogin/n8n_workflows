{
  "createdAt": "2025-09-12T09:29:48.196Z",
  "updatedAt": "2025-11-01T10:42:20.987Z",
  "id": "JpsCGfUrbdGhD8ix",
  "name": "Create company services key_words (raw) services",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -592,
        0
      ],
      "id": "0647ad19-43f1-4f78-816e-2721fbc06b3f",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/responses",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1744,
        -16
      ],
      "id": "e74a0000-b714-4e01-a56e-a84261febc46",
      "name": "HTTP Request",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "key_words",
          "mode": "list",
          "cachedResultName": "key_words"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "company_id": "={{$json.company_id}}",
            "key_word": "={{$json.key_word}}",
            "service_id": "={{$('Loop Over Items').first().json.service_id}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "key_word_id",
              "displayName": "key_word_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "key_word",
              "displayName": "key_word",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "wordstat_count",
              "displayName": "wordstat_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "service_id",
              "displayName": "service_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "wordstat_parsed",
              "displayName": "wordstat_parsed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2640,
        0
      ],
      "id": "2c47a147-9842-4ba6-a431-1742072cb821",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n  \"model\": \"gpt-5\",\n  \"input\": [\n    {\n      \"role\": \"developer\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"ты специалист по контекстной рекламе. Твоя задача точно выполнять инструкции\"\n        }\n      ]\n    },\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": $json.my_prompt\n        }\n      ]\n    }\n  ],\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"name\": \"key_words_list\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key_words\": {\n            \"type\": \"array\",\n            \"description\": \"A list of keyword strings.\",\n            \"items\": {\n              \"type\": \"string\",\n              \"description\": \"A single key word.\"\n            }\n          }\n        },\n        \"required\": [\n          \"key_words\"\n        ],\n        \"additionalProperties\": false\n      }\n    },\n    \"verbosity\": \"high\"\n  },\n  \"reasoning\": {\n    \"effort\": \"high\",\n    \"summary\": null\n  },\n  \"tools\": [],\n  \"store\": false,\n  \"include\": [\n    \"reasoning.encrypted_content\",\n    \"web_search_call.action.sources\"\n  ]\n}\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1424,
        -16
      ],
      "id": "48db3817-7544-4463-863c-2c6dbcb07774",
      "name": "Set API JSON"
    },
    {
      "parameters": {
        "jsCode": "\n\n// Достаём массив competitors\nconst key_words = JSON.parse($input.first().json.output[1].content[0].text).key_words;\n\n// Разворачиваем каждый объект в отдельный item\nreturn key_words.map((c, index) => ({\n  json: {\n    index,\n    key_word: c,\n    company_id:$('When Executed by Another Workflow').first().json.company_id\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2432,
        0
      ],
      "id": "95d87cd7-9235-42ee-8e40-5456da27d3e6",
      "name": "Parse JSON"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "11ac8bb1-a8b3-4857-81b9-3b42917b89b6",
              "name": "output",
              "value": "{\"competitors\":[{\"competitor_name\":\"Алгоритмика (Algorithmics)\",\"competitor_type\":\"franchise\",\"competitor_url\":\"https://algoritmika.org\"},{\"competitor_name\":\"CODDY\",\"competitor_type\":\"franchise\",\"competitor_url\":\"https://coddyschool.com\"},{\"competitor_name\":\"ROBBO Club\",\"competitor_type\":\"franchise\",\"competitor_url\":\"https://robboclub.ru\"},{\"competitor_name\":\"Logiscool\",\"competitor_type\":\"franchise\",\"competitor_url\":\"https://www.logiscool.com\"},{\"competitor_name\":\"IT Step Academy (ШАГ)\",\"competitor_type\":\"franchise\",\"competitor_url\":\"https://itstep.org\"},{\"competitor_name\":\"Code Ninjas\",\"competitor_type\":\"franchise\",\"competitor_url\":\"https://www.codeninjas.com\"},{\"competitor_name\":\"iCode School\",\"competitor_type\":\"franchise\",\"competitor_url\":\"https://icodeschool.com\"},{\"competitor_name\":\"Engineering For Kids\",\"competitor_type\":\"franchise\",\"competitor_url\":\"https://www.engineeringforkids.com\"},{\"competitor_name\":\"IT-Куб (центры цифрового образования)\",\"competitor_type\":\"local\",\"competitor_url\":\"https://it-cube.su\"},{\"competitor_name\":\"Кванториум (детский технопарк)\",\"competitor_type\":\"local\",\"competitor_url\":\"https://kvantorium.ru\"},{\"competitor_name\":\"Яндекс Лицей\",\"competitor_type\":\"global\",\"competitor_url\":\"https://lyceum.yandex.ru\"},{\"competitor_name\":\"IT Школа Samsung\",\"competitor_type\":\"global\",\"competitor_url\":\"https://itschool.samsung.ru\"},{\"competitor_name\":\"Академия Иннополис (для школьников)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://academy.innopolis.ru\"},{\"competitor_name\":\"Сириус (курсы и смены по информатике)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://sochisirius.ru\"},{\"competitor_name\":\"Kodland (Кодланд)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://kodland.org\"},{\"competitor_name\":\"itgenio\",\"competitor_type\":\"global\",\"competitor_url\":\"https://itgen.io\"},{\"competitor_name\":\"Фоксфорд (программирование для школьников)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://foxford.ru\"},{\"competitor_name\":\"Skysmart (курсы программирования)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://skysmart.ru\"},{\"competitor_name\":\"Тетрика (программирование для школьников)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://tetrika-school.ru\"},{\"competitor_name\":\"GeekBrains (курсы для школьников)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://geekbrains.ru\"},{\"competitor_name\":\"Нетология\",\"competitor_type\":\"global\",\"competitor_url\":\"https://netology.ru\"},{\"competitor_name\":\"Skillbox\",\"competitor_type\":\"global\",\"competitor_url\":\"https://skillbox.ru\"},{\"competitor_name\":\"SkillFactory\",\"competitor_type\":\"global\",\"competitor_url\":\"https://skillfactory.ru\"},{\"competitor_name\":\"Яндекс Практикум\",\"competitor_type\":\"global\",\"competitor_url\":\"https://practicum.yandex.ru\"},{\"competitor_name\":\"Uchi.ru (информатика/программирование)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://uchi.ru\"},{\"competitor_name\":\"Stepik\",\"competitor_type\":\"global\",\"competitor_url\":\"https://stepik.org\"},{\"competitor_name\":\"Coursera\",\"competitor_type\":\"global\",\"competitor_url\":\"https://coursera.org\"},{\"competitor_name\":\"edX\",\"competitor_type\":\"global\",\"competitor_url\":\"https://edx.org\"},{\"competitor_name\":\"Udemy\",\"competitor_type\":\"global\",\"competitor_url\":\"https://udemy.com\"},{\"competitor_name\":\"Codecademy\",\"competitor_type\":\"global\",\"competitor_url\":\"https://codecademy.com\"},{\"competitor_name\":\"Khan Academy (программирование)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://ru.khanacademy.org\"},{\"competitor_name\":\"Code.org\",\"competitor_type\":\"global\",\"competitor_url\":\"https://code.org\"},{\"competitor_name\":\"Hour of Code\",\"competitor_type\":\"global\",\"competitor_url\":\"https://hourofcode.com\"},{\"competitor_name\":\"freeCodeCamp\",\"competitor_type\":\"global\",\"competitor_url\":\"https://freecodecamp.org\"},{\"competitor_name\":\"iD Tech\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.idtech.com\"},{\"competitor_name\":\"Tynker\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.tynker.com\"},{\"competitor_name\":\"CodeMonkey\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.codemonkey.com\"},{\"competitor_name\":\"Kodable\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.kodable.com\"},{\"competitor_name\":\"Scratch (онлайн-платформа)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://scratch.mit.edu\"},{\"competitor_name\":\"CodeCombat\",\"competitor_type\":\"global\",\"competitor_url\":\"https://codecombat.com\"},{\"competitor_name\":\"CodeHS\",\"competitor_type\":\"global\",\"competitor_url\":\"https://codehs.com\"},{\"competitor_name\":\"Google CS First\",\"competitor_type\":\"global\",\"competitor_url\":\"https://csfirst.withgoogle.com\"},{\"competitor_name\":\"Microsoft MakeCode\",\"competitor_type\":\"global\",\"competitor_url\":\"https://makecode.com\"},{\"competitor_name\":\"Blockly Games\",\"competitor_type\":\"global\",\"competitor_url\":\"https://blockly.games\"},{\"competitor_name\":\"Lightbot\",\"competitor_type\":\"global\",\"competitor_url\":\"https://lightbot.com\"},{\"competitor_name\":\"Roblox Education\",\"competitor_type\":\"global\",\"competitor_url\":\"https://education.roblox.com\"},{\"competitor_name\":\"Unity Learn\",\"competitor_type\":\"global\",\"competitor_url\":\"https://learn.unity.com\"},{\"competitor_name\":\"Unreal Online Learning\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.unrealengine.com/onlinelearning\"},{\"competitor_name\":\"JetBrains Academy (Hyperskill)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://hyperskill.org\"},{\"competitor_name\":\"CodeGym\",\"competitor_type\":\"global\",\"competitor_url\":\"https://codegym.cc\"},{\"competitor_name\":\"SoloLearn\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.sololearn.com\"},{\"competitor_name\":\"e-olymp\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.e-olymp.com\"},{\"competitor_name\":\"Timus Online Judge\",\"competitor_type\":\"global\",\"competitor_url\":\"https://acm.timus.ru\"},{\"competitor_name\":\"Codeforces\",\"competitor_type\":\"global\",\"competitor_url\":\"https://codeforces.com\"},{\"competitor_name\":\"AtCoder\",\"competitor_type\":\"global\",\"competitor_url\":\"https://atcoder.jp\"},{\"competitor_name\":\"OpenEdu (Открытое образование)\",\"competitor_type\":\"global\",\"competitor_url\":\"https://openedu.ru\"},{\"competitor_name\":\"Pluralsight\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.pluralsight.com\"},{\"competitor_name\":\"Udacity\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.udacity.com\"},{\"competitor_name\":\"DataCamp\",\"competitor_type\":\"global\",\"competitor_url\":\"https://www.datacamp.com\"},{\"competitor_name\":\"СГУ (доп. курсы по программированию для школьников)\",\"competitor_type\":\"local\",\"competitor_url\":\"https://www.sgu.ru\"},{\"competitor_name\":\"СГТУ им. Гагарина (подготовительные/IT-курсы для школьников)\",\"competitor_type\":\"local\",\"competitor_url\":\"https://www.sstu.ru\"}]}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2064,
        0
      ],
      "id": "db13722d-58d4-42b4-9bdb-ff5286d0655f",
      "name": "Edit Fields",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e6d5f740-801a-406e-bbc1-04830ee734db",
              "name": "arr",
              "value": "={{ JSON.parse($json.output) }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2272,
        0
      ],
      "id": "c7f1a729-70f2-4e89-aaf5-a268c3fcd875",
      "name": "Edit Fields1",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.my_prompt = items[0].json;\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        0
      ],
      "id": "276e794a-ecb1-460f-9bc1-d993a6516b14",
      "name": "Save prompt"
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nlet my_prompt = workflowData.my_prompt.data;\n\n\n $json.my_prompt = my_prompt.replaceAll(\"{{company_name}}\", $json.company_name).replaceAll(\"{{service_description}}\", $json.service_name +' ' + $json.service_description);\n\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        -32
      ],
      "id": "085b82ea-05fb-4625-a684-63f98fcc610b",
      "name": "create prompt"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        736,
        0
      ],
      "id": "1400245f-69f7-4159-a6d2-ff2b3ddfadc2",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select cs.service_name,cs.service_description,c.company_name from companies c, company_services cs where c.company_id=cs.company_id and c.company_id=$1",
        "options": {
          "queryReplacement": "{{$('When Executed by Another Workflow').first().json.company_id}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -176,
        0
      ],
      "id": "8e836cfe-62d5-44b8-af34-8e60a8170ec8",
      "name": "Services list",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Romanychlogin",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n_prompts",
          "mode": "list",
          "cachedResultName": "n8n_prompts",
          "cachedResultUrl": "https://github.com/Romanychlogin/n8n_prompts"
        },
        "filePath": "company keywords with services.txt",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -800,
        0
      ],
      "id": "b16d79ab-ac10-4119-aea2-80f24965f173",
      "name": "Get prompts",
      "webhookId": "5de32a1a-9f6b-4ee9-9a56-bc260edb5eed",
      "credentials": {
        "githubApi": {
          "id": "JQAFAcMNS9Ylyb0V",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1264,
        -16
      ],
      "id": "896beda6-2405-4e89-8a80-806404726601",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id,n8n_workflow_root_execution_id, started)\nSELECT MAX(business_process_id), $2,$3,$4, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}},{{ $('When Executed by Another Workflow').item.json.root_execution_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1024,
        -16
      ],
      "id": "a6882ee2-a70c-4e22-961e-bc49dc593e76",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_total=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$input.all().length}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -16,
        208
      ],
      "id": "c88d9f61-3f3c-4784-89a1-d4c7d63dea72",
      "name": "Mark_workflow_total_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nworkflowData.tokens_used = 0;\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        192
      ],
      "id": "f5e3dee7-1334-4d7a-8894-eaaa9ee14c93",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        496,
        -16
      ],
      "id": "a5eefb9d-1e12-42c3-93cc-d25cd8afb7c9",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$2, tokens_used=$3,tokens_used_type=$4 where n8n_workflow_execution_id=$1",
        "options": {
          "queryReplacement": "=[{{$execution.id}},{{$json.steps_passed}},{{$json.tokens_used}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3200,
        -16
      ],
      "id": "ed5e521e-f49f-46d1-bce4-41c784f17f4d",
      "name": "Mark_workflow_passed_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "Process terminated by user"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        4032,
        -144
      ],
      "id": "8307ee89-8c11-4021-9fcd-d391bc62c4df",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "business_processes_states",
          "mode": "list",
          "cachedResultName": "business_processes_states"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "n8n_workflow_execution_id",
              "value": "={{ $execution.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3456,
        16
      ],
      "id": "a1494864-6c66-4cb6-ad37-1d6a26ab1e63",
      "name": "check if termination is requested",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fa13510a-3a56-4cd5-8b80-3e4fe626ce0b",
              "leftValue": "={{ $json.to_terminate }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3712,
        16
      ],
      "id": "3f42e2d2-1445-49c3-b8e5-e58653e8af74",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\n//set used tokens here!!!!\nlet step_tokens_used = toNumber($('HTTP Request').last().json.usage.total_tokens,0);\n //set used tokens here!!!!\nworkflowData.tokens_used += step_tokens_used;\n\nfor (const item of $input.all()) {\n  item.json.steps_passed = workflowData.steps_passed;\n  item.json.tokens_used = workflowData.tokens_used\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2832,
        0
      ],
      "id": "52d57d29-e169-4d9e-89f4-5aae476a4f01",
      "name": "Get current step and tokens saved"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW() where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1024,
        -256
      ],
      "id": "ed98d6da-b44a-47e6-b474-80086bc15bab",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    }
  ],
  "connections": {
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Save prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API JSON": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save prompt": {
      "main": [
        [
          {
            "node": "Services list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create prompt": {
      "main": [
        [
          {
            "node": "Set API JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Get current step and tokens saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Services list": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mark_workflow_total_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get prompts": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Get prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_total_steps": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps": {
      "main": [
        [
          {
            "node": "check if termination is requested",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check if termination is requested": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step and tokens saved": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false,
    "errorWorkflow": "v2Z32ISEUzsFYnZw"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "id": "ezK8ihYnfxZNTIAc",
          "root_execution_id": 20076,
          "company_id": 2,
          "threshhold": "0.88",
          "company_name": "Первый визовый центр Курган",
          "services_description": "Визы:    http://krg45.visa-rf.ru/ АТЭС:    http://krg45.apec-first.ru/",
          "user_content_dropbox_folder": "/Test_content_folder_for_Kurgan"
        }
      }
    ]
  },
  "versionId": "8a9a8054-55af-468a-bf4e-1aae39a7bad1",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-12T09:29:48.196Z",
      "updatedAt": "2025-09-12T09:29:48.196Z",
      "role": "workflow:owner",
      "workflowId": "JpsCGfUrbdGhD8ix",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-10-17T09:03:18.269Z",
      "updatedAt": "2025-10-17T09:03:18.269Z",
      "id": "S7zerj1h6Ro25pTA",
      "name": "client creation"
    }
  ]
}