{
  "createdAt": "2025-10-22T11:44:28.248Z",
  "updatedAt": "2025-10-22T11:44:28.248Z",
  "id": "4Fw159fAoZfSn72v",
  "name": "ADV_campaign_data_load_API",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "url": "={{ $json.yandex_report_dropbox_file_path }}",
        "responseFormat": "file",
        "options": {}
      },
      "id": "8cddb4ba-596e-43e9-9d39-5785935fad3f",
      "name": "Download File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -80,
        -128
      ]
    },
    {
      "parameters": {
        "options": {
          "delimiter": ";"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        528,
        -128
      ],
      "id": "65eab507-be5e-44a4-a429-35edbf8fa8ac",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2320,
        -112
      ],
      "id": "c6308bd7-a292-44a8-8a7f-aea3a7a148de",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "content": "что делаем по регулярной отчетности. Пока из  CSV. Потом - API\nНа вход - стандартный поисковый запрос + Заголовок объявления. Без дат!!!!"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -160,
        -880
      ],
      "id": "60cf78bd-166c-4a7f-862e-9009966eff08",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Соответствие\n1)Если пословное то проверяем совпадение запроса с нашим ключом. \nа)совпадает(убираем кавычки у нашего ключа) - все ОК\nб)не совпадает - спрашиваем у чата релевантна ли нам фраза. Да - добавляем в ключи. Нет - добавляем в минус слова.\n2)Не пословное - спрашиваем у чата релевантна ли нам фраза. Да - добавляем в ключи. Нет - добавляем в минус слова."
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -240,
        -592
      ],
      "id": "14ae318e-f8aa-4327-a854-ef3816c54852",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_list",
          "mode": "list",
          "cachedResultName": "current_list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "key_word": "={{ $json['Поисковый запрос'] }}",
            "campaign_id": "={{ $json['№ Кампании'] }}",
            "used_keyword": "={{ $json['Условие показа'] }}",
            "group_id": "={{ $json['№ Группы'] }}",
            "condition_type": "={{ $json['Тип соответствия'] }}",
            "category": "={{ $json['Категория таргетинга'] }}",
            "ads_header": "={{ $json['Заголовок'] }}",
            "count_views": "={{ $json['Показы'] }}",
            "count_clics": "={{ $json['Клики'] }}",
            "count_convetions": "={{ $json['Конверсии'] }}",
            "company_id": "={{ $json.company_id }}",
            "report_id": "={{ $('report import record').item.json.import_id }}",
            "service_id": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "list_id",
              "displayName": "list_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "key_word",
              "displayName": "key_word",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "campaign_id",
              "displayName": "campaign_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "used_keyword",
              "displayName": "used_keyword",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "group_id",
              "displayName": "group_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "condition_type",
              "displayName": "condition_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ads_header",
              "displayName": "ads_header",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "resolution",
              "displayName": "resolution",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "count_views",
              "displayName": "count_views",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "count_clics",
              "displayName": "count_clics",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "count_convetions",
              "displayName": "count_convetions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "ai_response_tokens",
              "displayName": "ai_response_tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "report_id",
              "displayName": "report_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "service_id",
              "displayName": "service_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "is_adv_processed",
              "displayName": "is_adv_processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3200,
        -96
      ],
      "id": "2329abc0-babf-427a-a82b-71da9c5a8301",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_list",
          "mode": "list",
          "cachedResultName": "current_list"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "company_id",
              "value": "={{ $json.company_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1184,
        256
      ],
      "id": "f3d78c50-ae1b-41c9-ad27-491a2c6048ee",
      "name": "Clear current_list",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_minus_words",
          "mode": "list",
          "cachedResultName": "current_minus_words"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "company_id",
              "value": "={{ $json.company_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1344,
        256
      ],
      "id": "26957d97-8496-4f48-b601-c9fb66f222d2",
      "name": "Clear current_minus_words",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "current_ads_list",
          "mode": "list",
          "cachedResultName": "current_ads_list"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "company_id",
              "value": "={{ $json.company_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1504,
        256
      ],
      "id": "f66e5439-29df-4801-8f68-f5db8b30289e",
      "name": "Clear current_ads",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "content": "Не забыть что я вручную удалил фразы select * from company_content where phrase like '%бесплат%' "
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2288,
        -1152
      ],
      "id": "2a90c23e-6c2e-4e0e-89e2-c906b0e19c1d",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -784,
        -240
      ],
      "id": "07708187-77e3-45e9-a4e1-e0ada813c231",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5b3485a2-cb50-486a-932c-fc27de0a25da",
              "name": "yandex_report_dropbox_file_path",
              "value": "={{ $json.yandex_report_dropbox_file_path}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -544,
        -240
      ],
      "id": "7e421b0c-4a80-4661-853a-745dc4c11bd2",
      "name": "set variables"
    },
    {
      "parameters": {
        "content": "Очистка буферных таблиц",
        "height": 368,
        "width": 1120
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        336,
        144
      ],
      "id": "cc5ebc42-a0b9-4f1d-b733-44e459e8b7cc",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select company_id from companies where yandex_account=$1",
        "options": {
          "queryReplacement": "={{ $json['Логин клиента'] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        688,
        256
      ],
      "id": "3b4fe19c-09e2-4654-ab73-42216db72788",
      "name": "get client id",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id,n8n_workflow_root_execution_id, started)\nSELECT MAX(business_process_id), $2,$3,$4, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}},{{ $('When Executed by Another Workflow').item.json.root_execution_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1200,
        0
      ],
      "id": "9faca6b8-e537-47e5-ae43-d4c5a43253f0",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW(),tokens_used=0 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2640,
        -304
      ],
      "id": "91d61733-2fe6-4ff2-8ab9-85d54a50aafe",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Вход: Binary -> data (CSV)\n// Настройка: \"Binary property\": data\nconst bin = items[0].binary.data;\nconst buf = Buffer.from(bin.data, 'base64');\nconst text = buf.toString('utf-8'); // или cp1251 при необходимости\n\nconst lines = text.split(/\\r?\\n/);\n// Здесь укажи число служебных строк, например 4\nconst start = 4; \nconst trimmed = lines.slice(start).join('\\n');\n\nreturn [\n  {\n    binary: {\n      data: {\n        data: Buffer.from(trimmed, 'utf-8').toString('base64'),\n        fileName: 'cleaned.csv',\n        mimeType: 'text/csv',\n      }\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -128
      ],
      "id": "83d02d35-50c8-4673-b1ab-aa3d4eba8997",
      "name": "header cut"
    },
    {
      "parameters": {
        "jsCode": "//Fixing common error in the first field name for CSV import\n\nfunction sanitizeKey(k) {\n  return String(k)\n    .replace(/[\\uFEFF\\u200B-\\u200D\\u2060\\u00A0]/g, \"\")\n    .replace(/[\\x00-\\x1F\\x7F]/g, \"\")\n    .replace(/[“”\"']/g, \"\")\n    .replace(/\\s+/g, \" \")\n    .trim();\n}\n\nconst obj = { ...$json };\nconst oldKey = Object.keys(obj)[0];\nif (oldKey) {\n  const newKey = sanitizeKey(oldKey) || oldKey;\n  if (newKey !== oldKey) {\n    obj[newKey] = obj[oldKey];\n    delete obj[oldKey];\n  }\n}\nreturn [{ json: obj }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2496,
        -96
      ],
      "id": "2c1807dc-c329-4981-8fcf-8a1e1033cab0",
      "name": "sanitizeKey"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2096,
        -112
      ],
      "id": "8ac3dcbf-c301-49da-9d9b-fa808f1ef3ef",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "17df7f34-56a6-4d29-a7d3-9edfd4afaadb",
              "name": "company_id",
              "value": "={{ $('get client id').item.json.company_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1664,
        256
      ],
      "id": "a200f920-bb73-4b3f-95a9-e845ec4c4672",
      "name": "company_id"
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nworkflowData.tokens_used = 0;\nworkflowData.step = 0;\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        -128
      ],
      "id": "23d4b964-4d3d-4344-b675-9c93fdc68929",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = workflowData.steps_passed+1; // update steps counter\n //set used tokens here!!!!\nworkflowData.step = workflowData.step+1;\n\nfor (const item of $input.all()) {\n  item.json.steps_passed = workflowData.steps_passed;\n  item.json.step = workflowData.step;\n  \n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3424,
        -112
      ],
      "id": "3aae6a07-5064-498c-a1cd-f5cf62351ddc",
      "name": "Get current step  saved"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_passed=$3, tokens_used=0,tokens_used_type=$4 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$json.steps_passed}},{{ 'gpt-5' }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4160,
        -128
      ],
      "id": "d44be565-a25c-436b-8f4c-99cda0928008",
      "name": "Mark_workflow_passed_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "00803116-bcbd-434f-87c7-9f785abb5930",
              "leftValue": "={{ $json.step  }}",
              "rightValue": 100,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3664,
        -80
      ],
      "id": "1be010dd-b3ba-4dde-b1b4-b370732262e1",
      "name": "each 100 items"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "report_import",
          "mode": "list",
          "cachedResultName": "report_import"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "company_id": "={{ $json.company_id }}",
            "start_date": "={{ $('get dates from file name').item.json.date_from }}",
            "end_date": "={{ $('get dates from file name').item.json.date_to }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "import_id",
              "displayName": "import_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "start_date",
              "displayName": "start_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "end_date",
              "displayName": "end_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "import_date",
              "displayName": "import_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "company_id",
              "displayName": "company_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "processed_date",
              "displayName": "processed_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        976,
        256
      ],
      "id": "17847b5f-689d-4e71-bb40-07fc2f386ad1",
      "name": "report import record",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const re = /(\\d{4}-\\d{2}-\\d{2})_(\\d{4}-\\d{2}-\\d{2})/;\n\nreturn $input.all().map(item => {\n  const binKey = Object.keys(item.binary ?? {})[0];          // обычно \"data\"\n  const meta = binKey ? item.binary[binKey] : undefined;\n\n  // имя файла: сначала fileName, на всякий — \"File Name\"\n  const fileName = meta?.fileName ?? meta?.[\"File Name\"] ?? \"\";\n\n  const m = String(fileName).match(re);\n\n  return {\n    json: {\n      ...item.json,\n      date_from: m?.[1] ?? null,\n      date_to:   m?.[2] ?? null,\n      file_name: fileName,            // чтобы было видно, что взяли\n      bin_key: binKey,\n    },\n    binary: item.binary,              // не теряем бинарь\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        -128
      ],
      "id": "2a32dbe1-0fd0-4c6f-b2c5-7f0ecedbab1b",
      "name": "get dates from file name"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set steps_total=$3 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}},{{$input.all().length}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1616,
        -304
      ],
      "id": "65695767-59f0-426e-95b7-bfddb5e253fc",
      "name": "Mark_workflow_total_steps",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst workflowData = $getWorkflowStaticData('global');\n\nworkflowData.step =0;\n\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3904,
        -96
      ],
      "id": "91f2e5db-64e0-429a-85b8-100efe0034bd",
      "name": "reset step"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "17df7f34-56a6-4d29-a7d3-9edfd4afaadb",
              "name": "company_id",
              "value": "={{ $('get client id').item.json.company_id }}",
              "type": "string"
            },
            {
              "id": "d12188b1-d423-4782-98c9-1d584a01ae44",
              "name": "report_id",
              "value": "={{ $('report import record').last().json.import_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2832,
        -304
      ],
      "id": "eab48bbe-f6ab-4e3c-8136-76002255784c",
      "name": "company_id_report_id"
    }
  ],
  "connections": {
    "Download File": {
      "main": [
        [
          {
            "node": "get dates from file name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "get client id",
            "type": "main",
            "index": 0
          },
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "sanitizeKey",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Get current step  saved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear current_list": {
      "main": [
        [
          {
            "node": "Clear current_minus_words",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear current_minus_words": {
      "main": [
        [
          {
            "node": "Clear current_ads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear current_ads": {
      "main": [
        [
          {
            "node": "company_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set variables": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get client id": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          },
          {
            "node": "report import record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "header cut": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sanitizeKey": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "company_id": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Mark_workflow_completed": {
      "main": [
        [
          {
            "node": "company_id_report_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mark_workflow_total_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get current step  saved": {
      "main": [
        [
          {
            "node": "each 100 items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "each 100 items": {
      "main": [
        [
          {
            "node": "reset step",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workflow_passed_steps": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "report import record": {
      "main": [
        [
          {
            "node": "Clear current_list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get dates from file name": {
      "main": [
        [
          {
            "node": "header cut",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reset step": {
      "main": [
        [
          {
            "node": "Mark_workflow_passed_steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": false,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "v2Z32ISEUzsFYnZw"
  },
  "staticData": {
    "global": {
      "steps_passed": 2576,
      "tokens_used": 0,
      "step": 76
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "id": "4f5WJ06ItW520O75",
          "root_execution_id": 32924,
          "yandex_report_dropbox_file_path": "https://www.dropbox.com/scl/fi/9kr6iebx4q6cstzp2xuwb/2025-09-04_2025-09-24_searchquery_kiberone-saratov.csv?rlkey=cew8cc5k2rfbq5wrco9inb4eu&dl=1",
          "threshhold": "0.88"
        }
      }
    ]
  },
  "versionId": "cb4737e0-8ec4-44bb-84d8-46b2afd135d8",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-22T11:44:28.248Z",
      "updatedAt": "2025-10-22T11:44:28.248Z",
      "role": "workflow:owner",
      "workflowId": "4Fw159fAoZfSn72v",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-10-06T13:06:54.644Z",
      "updatedAt": "2025-10-06T13:06:54.644Z",
      "id": "DBEf57wUDunVJUG6",
      "name": "campaign update"
    },
    {
      "createdAt": "2025-10-22T11:44:26.850Z",
      "updatedAt": "2025-10-22T11:44:26.850Z",
      "id": "TAPLdpwV5vPQJtDW",
      "name": "API"
    }
  ]
}