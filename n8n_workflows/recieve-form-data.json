{
  "createdAt": "2025-10-21T12:43:03.776Z",
  "updatedAt": "2025-10-22T17:45:35.419Z",
  "id": "Z5sOyh4IJtSVsD2a",
  "name": "Recieve form data",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "add0a254-19eb-4e02-b02e-344a6f26a86e",
        "options": {
          "rawBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "53703b18-b0c9-4def-a05e-6591c46fc7ec",
      "name": "Webhook",
      "webhookId": "add0a254-19eb-4e02-b02e-344a6f26a86e"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"alfacrm\": {\n    \"host\": \"kiberonesaratov.s20.online\",\n    \"email\": \"antonkarzhavin1@yandex.ru\",\n    \"api_key\": \"656b9709-9547-11f0-b9b8-3cecefbdd1ae\",\n    \"lead_source_id\": 1,\n    \"branch_id\": 1,\n  }\n}",
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        512,
        0
      ],
      "id": "bfa32a75-2fb1-4ecb-a0f9-1c7e2982656c",
      "name": "Set CRM data"
    },
    {
      "parameters": {
        "jsCode": "/**\n * AlfaCRM create customer (n8n Code)\n * branch_ids = [1] (Саратов)\n * Телефон выбирается умно: 1_7, 1_3, phone, tel, потом глубокий поиск — берём первый валидный.\n * Отправляем телефон и в contact_contacts, и в phone (массивы строк).\n * На практике сохраняется в contact_contacts — это ок.\n */\n\nasync function http(req) { return await this.helpers.httpRequest(req); }\n\nasync function login(self, { host, email, api_key }) {\n  const res = await http.call(self, {\n    method: 'POST',\n    url: `https://${host}/v2api/auth/login`,\n    headers: { 'Content-Type': 'application/json' },\n    body: { email, api_key },\n    json: true,\n  });\n  if (!res?.token) throw new Error('Auth failed');\n  return res.token;\n}\n\nasync function createCustomer(self, { host, token, payload }) {\n  try {\n    const res = await http.call(self, {\n      method: 'POST',\n      url: `https://${host}/v2api/1/customer/create`,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-ALFACRM-TOKEN': token,\n      },\n      body: payload,\n      json: true,\n      gzip: true,\n      timeout: 20000,\n    });\n    return { success: true, response: res };\n  } catch (err) {\n    return {\n      success: false,\n      status: err?.response?.statusCode,\n      error: err?.response?.body || err.message,\n    };\n  }\n}\n\n// ---------- helpers ----------\nconst notEmpty = v => v !== undefined && v !== null && String(v).trim() !== '';\nconst toNum = v => {\n  if (!notEmpty(v)) return undefined;\n  const n = Number(String(v).trim());\n  return Number.isFinite(n) ? n : undefined;\n};\nfunction asObj(maybe) {\n  if (!maybe) return {};\n  if (typeof maybe === 'object') return maybe;\n  if (typeof maybe === 'string') {\n    try { return JSON.parse(maybe); } catch { return {}; }\n  }\n  return {};\n}\nfunction findKeyDeep(obj, keyMatcher) {\n  const seen = new Set();\n  const stack = [obj];\n  while (stack.length) {\n    const cur = stack.pop();\n    if (!cur || typeof cur !== 'object') continue;\n    if (seen.has(cur)) continue;\n    seen.add(cur);\n    if (Array.isArray(cur)) { for (const v of cur) stack.push(v); continue; }\n    for (const [k, v] of Object.entries(cur)) {\n      if (keyMatcher(k)) return v;\n      if (v && typeof v === 'object') stack.push(v);\n    }\n  }\n  return undefined;\n}\n\n// нормализуем телефон: оставляем + и цифры, приводим к +XXXXXXXX, базовая валидация (8..15 цифр)\nfunction normalizePhone(raw) {\n  const s = String(raw || '').trim();\n  if (!s) return '';\n  let keep = s.replace(/[^\\d+]/g, '');\n\n  if (keep.startsWith('00')) keep = '+' + keep.slice(2);\n\n  const digitsOnly = keep.replace(/\\D/g, '');\n  if (digitsOnly.length === 11 && keep[0] === '8') keep = '+7' + digitsOnly.slice(1);\n  if (keep[0] !== '+') keep = '+' + digitsOnly;\n\n  const finalDigits = keep.replace(/\\D/g, '');\n  if (finalDigits.length < 8 || finalDigits.length > 15) return '';\n  return keep;\n}\n\n// выбираем первый валидный номер из кандидатов; если нет — глубокий поиск\nfunction pickPhoneSmart(input) {\n  const f = asObj(input.fields);\n\n  const candidates = [\n    f['1_7'],   // у тебя бывает тут\n    f['1_3'],   // и тут\n    input.phone,\n    input.tel,\n  ].filter(notEmpty);\n\n  for (const c of candidates) {\n    const n = normalizePhone(c);\n    if (n) return { phone: n, source: 'candidates', raw: c };\n  }\n\n  // глубокий поиск по строкам\n  const seen = new Set(); const stack = [input];\n  while (stack.length) {\n    const cur = stack.pop();\n    if (!cur || typeof cur !== 'object') continue;\n    if (seen.has(cur)) continue; seen.add(cur);\n    if (Array.isArray(cur)) { for (const v of cur) stack.push(v); continue; }\n    for (const [k, v] of Object.entries(cur)) {\n      if (typeof v === 'string' && /[\\d)(\\-\\s+]{6,}/.test(v)) {\n        const n = normalizePhone(v);\n        if (n) return { phone: n, source: `deep:${k}`, raw: v };\n      }\n      if (v && typeof v === 'object') stack.push(v);\n    }\n  }\n  return { phone: '', source: null, raw: null };\n}\n\n// ---------- MAIN ----------\nconst items = await $input.all();\nconst out = [];\n\nfor (const item of items) {\n  const input = item.json ?? item;\n  const conf = input.alfacrm || {};\n\n  const host = conf.host || input.host;\n  const email = conf.email || input.email;\n  const api_key = conf.api_key || input.api_key;\n  if (!host || !email || !api_key) {\n    throw new Error('Provide alfacrm.host, alfacrm.email, alfacrm.api_key');\n  }\n\n  const token = await login(this, { host, email, api_key });\n\n  const lead_source_id =\n    toNum(findKeyDeep(input, k => k === 'lead_source_id')) ??\n    toNum(input.lead_source_id) ?? 3;\n\n  const f = asObj(input.fields);\n  const name  = f['1_2'] || input.name || 'Без имени';\n\n  // умный телефон\n  const { phone, source: phone_source, raw: phone_raw } = pickPhoneSmart(input);\n\n  // на заметку — город (не используем 1_7, т.к. там часто телефон)\n  const city = f['city'] || input.city || '';\n\n  // UTM / yclid\n  const utm_source   = input.utm_source   || '';\n  const utm_medium   = input.utm_medium   || '';\n  const utm_campaign = input.utm_campaign || '';\n  const utm_content  = input.utm_content  || '';\n  const utm_term     = input.utm_term     || '';\n  const yclid        = input.yclid        || '';\n\n  const custom_value_json = JSON.stringify({\n    utm_source, utm_medium, utm_campaign, utm_content, utm_term, yclid,\n  });\n\n  const payload = {\n    name,\n    branch_ids: [1],\n    legal_type: 1,\n    is_study: 0,\n    lead_source_id,\n    ...(notEmpty(phone) ? { contact_contacts: [phone], phone: [phone] } : {}), // <-- ключевой дубль\n    ...(city ? { note: `Город: ${city}` } : {}),\n    ...(notEmpty(utm_source)   ? { custom_utm_source: utm_source } : {}),\n    ...(notEmpty(utm_medium)   ? { custom_utm_medium: utm_medium } : {}),\n    ...(notEmpty(utm_campaign) ? { custom_utm_campaign: utm_campaign } : {}),\n    ...(notEmpty(utm_content)  ? { custom_utm_content: utm_content } : {}),\n    ...(notEmpty(utm_term)     ? { custom_utm_term: utm_term } : {}),\n    ...(notEmpty(yclid)        ? { custom_yclid: yclid } : {}),\n    custom_value_json,\n  };\n\n  const res = await createCustomer(this, { host, token, payload });\n  out.push({\n    json: {\n      success: res.success,\n      response: res.response,\n      sent: payload,\n      debug_phone: { source: phone_source, raw: phone_raw, final: phone }\n    }\n  });\n}\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        0
      ],
      "id": "4d3da4ba-604a-465f-9de8-3a1d247a97f8",
      "name": "Send Lead data to CRM"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code (JavaScript) — Run Once for All Items\nconst items = await $input.all();\n\n// --- helpers ---\nconst notEmpty = v => v !== undefined && v !== null && String(v).trim() !== '';\n\nfunction tryParseJSON(s) {\n  if (typeof s !== 'string') return s;\n  try { return JSON.parse(s); } catch { return s; }\n}\n\nfunction getQueryParam(url, name) {\n  try { return new URL(String(url)).searchParams.get(name); } catch { return null; }\n}\n\n/**\n * Рекурсивно находит ВСЕ ключи \"lead_source_id\" и подменяет значение.\n * Сохраняет тип: если раньше было \"40\" (string), запишет \"8\"/\"3\" как строку.\n * Возвращает количество замен.\n */\nfunction replaceLeadSourceId(obj, newValNumber) {\n  let count = 0;\n  const stack = [obj];\n  const seen = new Set();\n\n  while (stack.length) {\n    const cur = stack.pop();\n    if (!cur || typeof cur !== 'object') continue;\n    if (seen.has(cur)) continue;\n    seen.add(cur);\n\n    if (Array.isArray(cur)) {\n      for (const v of cur) if (v && typeof v === 'object') stack.push(v);\n      continue;\n    }\n\n    for (const [k, v] of Object.entries(cur)) {\n      if (k === 'lead_source_id') {\n        const keepString = typeof v === 'string';\n        cur[k] = keepString ? String(newValNumber) : newValNumber;\n        count++;\n      }\n      if (v && typeof v === 'object') stack.push(v);\n    }\n  }\n  return count;\n}\n\nfor (const item of items) {\n  const src = item.json ?? item;\n\n  // --- где взять yclid ---\n  let yclid = src.yclid ?? src.yclidid ?? null;\n\n  // из page_url (?yclid=...)\n  if (!notEmpty(yclid) && src.page_url) {\n    const q = getQueryParam(src.page_url, 'yclid');\n    if (notEmpty(q)) yclid = q;\n  }\n\n  // из custom_value_json (если там хранится)\n  if (!notEmpty(yclid) && src.custom_value_json) {\n    const cv = tryParseJSON(src.custom_value_json);\n    if (cv && typeof cv === 'object' && 'yclid' in cv && notEmpty(cv.yclid)) {\n      yclid = cv.yclid;\n    }\n  }\n\n  const newVal = notEmpty(yclid) ? 8 : 3;\n\n  // подменяем ВЕЗДЕ, где уже есть lead_source_id\n  const replaced = replaceLeadSourceId(src, newVal);\n\n  // лог для проверки\n  console.log({ resolved_yclid: yclid ?? null, new_lead_source_id: newVal, replaced_keys: replaced });\n\n  // если нужно также гарантированно обновить верхнеуровневое значение (которое ты показал в примере),\n  // и оно есть в корне — продублируем:\n  if ('lead_source_id' in src) {\n    src.lead_source_id = typeof src.lead_source_id === 'string' ? String(newVal) : newVal;\n  }\n\n  // записываем обратно в item\n  if (item.json) item.json = src; else Object.assign(item, src);\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        0
      ],
      "id": "cdd34478-ee50-4557-997e-8864a9764def",
      "name": "update lead_source_id"
    },
    {
      "parameters": {
        "jsCode": "// Code (Function) node\n// Вход: $json.body = строка с JSON\n// Выход: нормальный объект, доступный далее как $json\nconst raw = $json.body || '';\nlet parsed = {};\ntry { parsed = JSON.parse(raw); } catch(e) {}\nreturn [{ ...parsed, _raw: raw }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        288,
        0
      ],
      "id": "01610508-3171-486f-83ee-268ac6fcafcf",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "/**\n * AlfaCRM create customer — force phone[] + immediate update fallback\n * branch_ids = [1]\n */\n\nasync function http(req) { return await this.helpers.httpRequest(req); }\n\nasync function login(self, { host, email, api_key }) {\n  const res = await http.call(self, {\n    method: 'POST',\n    url: `https://${host}/v2api/auth/login`,\n    headers: { 'Content-Type': 'application/json' },\n    body: { email, api_key },\n    json: true,\n  });\n  if (!res?.token) throw new Error('Auth failed');\n  return res.token;\n}\n\nasync function createCustomer(self, { host, token, payload }) {\n  return await http.call(self, {\n    method: 'POST',\n    url: `https://${host}/v2api/1/customer/create`,\n    headers: { 'Content-Type': 'application/json', 'X-ALFACRM-TOKEN': token },\n    body: payload, json: true, gzip: true, timeout: 20000,\n  });\n}\n\nasync function updateCustomer(self, { host, token, id, payload }) {\n  return await http.call(self, {\n    method: 'POST',\n    url: `https://${host}/v2api/1/customer/update?id=${id}`,\n    headers: { 'Content-Type': 'application/json', 'X-ALFACRM-TOKEN': token },\n    body: payload, json: true, gzip: true, timeout: 20000,\n  });\n}\n\n// ---------- helpers ----------\nconst notEmpty = v => v !== undefined && v !== null && String(v).trim() !== '';\nfunction asObj(maybe) {\n  if (!maybe) return {};\n  if (typeof maybe === 'object') return maybe;\n  if (typeof maybe === 'string') { try { return JSON.parse(maybe); } catch { return {}; } }\n  return {};\n}\nfunction cleanPhone(p) {\n  if (!notEmpty(p)) return '';\n  return String(p).replace(/[^\\d+]/g, '').replace(/(?!^)\\+/g, '').replace(/^00/, '+').trim();\n}\n\nconst items = await $input.all();\nconst out = [];\n\nfor (const item of items) {\n  const input = item.json ?? item;\n  const conf = input.alfacrm || {};\n  const host = conf.host || input.host;\n  const email = conf.email || input.email;\n  const api_key = conf.api_key || input.api_key;\n  if (!host || !email || !api_key) throw new Error('Provide alfacrm.host, alfacrm.email, alfacrm.api_key');\n\n  const token = await login(this, { host, email, api_key });\n\n  const f = asObj(input.fields);\n  const rawPhone =\n    f['1_3'] || f['1_7'] || input.phone ||\n    (Array.isArray(input.contact_contacts) ? input.contact_contacts[0] : '') ||\n    (Array.isArray(f.contact_contacts) ? f.contact_contacts[0] : '');\n  const phone = cleanPhone(rawPhone);\n\n  const name = f.name || f['1_2'] || input.name || 'Без имени';\n  const lead_source_id = Number(f.lead_source_id || input.lead_source_id || 3) || 3;\n\n  if (!notEmpty(phone)) {\n    out.push({ json: { success:false, reason:'no_phone_candidate', fields:f } });\n    continue;\n  }\n\n  const createPayload = {\n    name,\n    branch_ids: [1],\n    legal_type: 1,\n    is_study: 0,\n    lead_source_id,\n    // КЛЮЧЕВОЕ: пишем телефон в ОБА поля\n    phone: [phone],\n    contact_contacts: [phone]\n  };\n\n  let createRes, updateRes = null, finalPhone = [];\n  try {\n    createRes = await createCustomer(this, { host, token, payload: createPayload });\n  } catch (e) {\n    out.push({ json: { success:false, stage:'create', error:e?.response?.body || e.message, sent:createPayload } });\n    continue;\n  }\n\n  const id = createRes?.model?.id;\n  finalPhone = Array.isArray(createRes?.model?.phone) ? createRes.model.phone : [];\n\n  // если create сохранил пусто — добиваем update'ом\n  if (id && finalPhone.length === 0) {\n    const updatePayload = { phone: [phone] };\n    try {\n      updateRes = await updateCustomer(this, { host, token, id, payload: updatePayload });\n      finalPhone = Array.isArray(updateRes?.model?.phone) ? updateRes.model.phone : [];\n      out.push({ json: {\n        success: true,\n        id,\n        phone_candidate: phone,\n        createSaved: Array.isArray(createRes?.model?.phone) ? createRes.model.phone : [],\n        finalSaved: finalPhone,\n        sent: { createPayload, updatePayload },\n        response: { createRes, updateRes }\n      }});\n    } catch (e2) {\n      out.push({ json: {\n        success:false,\n        stage:'update',\n        id,\n        phone_candidate: phone,\n        createSaved: Array.isArray(createRes?.model?.phone) ? createRes.model.phone : [],\n        error: e2?.response?.body || e2.message,\n        sent: { createPayload, updatePayload }\n      }});\n    }\n    continue;\n  }\n\n  // create сразу сохранил телефон\n  out.push({ json: {\n    success:true,\n    id,\n    phone_candidate: phone,\n    finalSaved: finalPhone,\n    sent: { createPayload },\n    response: { createRes }\n  }});\n}\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        192
      ],
      "id": "f04389da-da52-4fed-93f6-99354e7af20a",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"alfacrm\": {\n    \"host\": \"kiberonesaratov.s20.online\",\n    \"email\": \"antonkarzhavin1@yandex.ru\",\n    \"api_key\": \"656b9709-9547-11f0-b9b8-3cecefbdd1ae\"\n  },\n\"fields\": {\n    \"name\": \"test-from-n8n\",\n    \"1_3\": \"+7(911)793-22-16\",\n    \"lead_source_id\": \"40\"\n  }\n}\n",
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        640,
        144
      ],
      "id": "49a47b42-83c2-49da-b93c-377cf4b4216c",
      "name": "Set CRM data1"
    }
  ],
  "connections": {
    "Set CRM data": {
      "main": [
        [
          {
            "node": "update lead_source_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update lead_source_id": {
      "main": [
        [
          {
            "node": "Send Lead data to CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Set CRM data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Lead data to CRM": {
      "main": [
        []
      ]
    },
    "Set CRM data1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-main-production-4310.up.railway.app",
            "user-agent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36",
            "content-length": "774",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en-RU;q=0.9,en;q=0.8,ru-RU;q=0.7,ru;q=0.6",
            "content-type": "text/plain",
            "origin": "https://saratov-okt.kiber-one.com",
            "priority": "u=4, i",
            "referer": "https://saratov-okt.kiber-one.com/",
            "sec-ch-ua": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "no-cors",
            "sec-fetch-site": "cross-site",
            "sec-fetch-storage-access": "active",
            "x-forwarded-for": "82.214.82.138",
            "x-forwarded-host": "n8n-main-production-4310.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/europe-west4-drams3a",
            "x-railway-request-id": "ADSrySz4TPmyyQzuw9P4nw",
            "x-real-ip": "82.214.82.138",
            "x-request-start": "1761133759423"
          },
          "params": {},
          "query": {},
          "body": "{\"event\":\"form_submit_success\",\"form_id\":\"26073\",\"matchedBy\":\"xhr\",\"transport\":\"xhr\",\"endpoint_url\":\"https://saratov-okt.kiber-one.com/redizayn-2/glavnaya/tretiy-blok/block3-form/\",\"status\":200,\"page_url\":\"https://saratov-okt.kiber-one.com/\",\"referrer\":\"https://saratov.kiber-one.com/\",\"user_agent\":\"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36\",\"ts\":1761133759302,\"utm_source\":\"\",\"utm_medium\":\"\",\"utm_campaign\":\"\",\"utm_content\":\"\",\"utm_term\":\"\",\"yclid\":\"\",\"fields\":{\"1_2\":\"n8n+post\",\"1_3\":\"+79117932216\",\"1_7\":\"Belgarde\",\"1_6\":\"on\",\"2_9\":\"on\",\"name\":\"\",\"form_name\":\"FormConstructorForm\",\"form_id\":\"26073\",\"sendsave\":\"Оставить+заявку\"},\"ym_client_id\":\"1760992627805758156\"}",
          "webhookUrl": "https://n8n-main-production-4310.up.railway.app/webhook/add0a254-19eb-4e02-b02e-344a6f26a86e",
          "executionMode": "production"
        },
        "binary": {
          "data": {
            "data": "eyJldmVudCI6ImZvcm1fc3VibWl0X3N1Y2Nlc3MiLCJmb3JtX2lkIjoiMjYwNzMiLCJtYXRjaGVkQnkiOiJ4aHIiLCJ0cmFuc3BvcnQiOiJ4aHIiLCJlbmRwb2ludF91cmwiOiJodHRwczovL3NhcmF0b3Ytb2t0LmtpYmVyLW9uZS5jb20vcmVkaXpheW4tMi9nbGF2bmF5YS90cmV0aXktYmxvay9ibG9jazMtZm9ybS8iLCJzdGF0dXMiOjIwMCwicGFnZV91cmwiOiJodHRwczovL3NhcmF0b3Ytb2t0LmtpYmVyLW9uZS5jb20vIiwicmVmZXJyZXIiOiJodHRwczovL3NhcmF0b3Yua2liZXItb25lLmNvbS8iLCJ1c2VyX2FnZW50IjoiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMDsgTmV4dXMgNSBCdWlsZC9NUkE1OE4pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xNDEuMC4wLjAgTW9iaWxlIFNhZmFyaS81MzcuMzYiLCJ0cyI6MTc2MTEzMzc1OTMwMiwidXRtX3NvdXJjZSI6IiIsInV0bV9tZWRpdW0iOiIiLCJ1dG1fY2FtcGFpZ24iOiIiLCJ1dG1fY29udGVudCI6IiIsInV0bV90ZXJtIjoiIiwieWNsaWQiOiIiLCJmaWVsZHMiOnsiMV8yIjoibjhuK3Bvc3QiLCIxXzMiOiIrNzkxMTc5MzIyMTYiLCIxXzciOiJCZWxnYXJkZSIsIjFfNiI6Im9uIiwiMl85Ijoib24iLCJuYW1lIjoiIiwiZm9ybV9uYW1lIjoiRm9ybUNvbnN0cnVjdG9yRm9ybSIsImZvcm1faWQiOiIyNjA3MyIsInNlbmRzYXZlIjoi0J7RgdGC0LDQstC40YLRjCvQt9Cw0Y/QstC60YMifSwieW1fY2xpZW50X2lkIjoiMTc2MDk5MjYyNzgwNTc1ODE1NiJ9",
            "mimeType": "text/plain"
          }
        }
      }
    ]
  },
  "versionId": "dd8070c9-c231-4a33-87b7-18927bb9914a",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-10-21T12:43:03.776Z",
      "updatedAt": "2025-10-21T12:43:03.776Z",
      "role": "workflow:owner",
      "workflowId": "Z5sOyh4IJtSVsD2a",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}