{
  "createdAt": "2025-09-15T16:12:00.035Z",
  "updatedAt": "2025-10-14T19:32:13.561Z",
  "id": "o5L3i8eq9JK9oLwL",
  "name": "company_minus_words_from_base",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -480,
        -96
      ],
      "id": "a7cee990-ca1e-4f06-9a8c-7eee5568a802",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8a679d23-f5a1-4bda-955e-f03cb1fd40fc",
              "name": "company_id",
              "value": "={{ $('When Executed by Another Workflow').item.json.company_id }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -704,
        -96
      ],
      "id": "08c83230-67a3-489c-aebc-eee593e5068c",
      "name": "set company_id"
    },
    {
      "parameters": {
        "content": "автоматическая обработка и удаление своих регионов ( в которых рекламируемся). потом вынести в отдельный подпроцесс для обработки изменений регионов",
        "height": 544,
        "width": 2208
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        16,
        -640
      ],
      "id": "5cd1b29c-7c8e-491d-9202-7121e81a5c02",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1456,
        -96
      ],
      "id": "a78fa162-a3ef-463f-b3db-7a7beed4adf0",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO business_processes_states (business_process_id, company_id,n8n_workflow_execution_id,n8n_workflow_root_execution_id, started)\nSELECT MAX(business_process_id), $2,$3,$4, NOW()\nFROM public.business_processes\nWHERE n8n_process_name = $1;",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$json.company_id}},{{$execution.id}},{{ $('When Executed by Another Workflow').item.json.root_execution_id }}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1248,
        -96
      ],
      "id": "813d4425-b0f9-47e2-8178-dd8e7e8076b0",
      "name": "Mark_workwlow_started",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update business_processes_states set finished=NOW(),tokens_used=0,steps_passed=1,steps_total=1 where business_process_id=(select MAX(business_process_id) from business_processes where n8n_process_name=$1) and n8n_workflow_execution_id=$2",
        "options": {
          "queryReplacement": "=[{{$workflow.name}},{{$execution.id}}]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1408,
        -448
      ],
      "id": "ba3ac614-4ba3-4017-830e-ff6b9481665c",
      "name": "Mark_workflow_completed",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function-Node (Run Once)\nconst workflowData = $getWorkflowStaticData('global');\nworkflowData.steps_passed = 0;\nworkflowData.tokens_used = 0;\nworkflowData.step = 0;\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1088,
        -96
      ],
      "id": "3788d6d1-dc9f-4346-80fc-0c89a0e7024a",
      "name": "Init total counter"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "minus_words_base",
          "mode": "list",
          "cachedResultName": "minus_words_base"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -896,
        -96
      ],
      "id": "b0f27d76-135e-46c9-a195-247f906505d1",
      "name": "Get base minus_words",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO minus_words (minus_word_embedding, company_id, minus_word)\nVALUES ($1::vector, $2, $3) \n  ON CONFLICT (company_id, minus_word) DO UPDATE\nSET minus_word = EXCLUDED.minus_word\n  RETURNING id AS minus_word_id;",
        "options": {
          "queryReplacement": "=[\n  { \"value\": \"={{'[' + JSON.parse($json.minus_word_embedding).map(e => Number(e)).join(',') + ']'}}\" },\n  { \"value\": \"={{$json.company_id}}\" },\n  { \"value\": \"={{$json.minus_word}}\" }\n]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -16,
        -80
      ],
      "id": "eec0d635-e445-4ba3-8b46-8a637fa8e478",
      "name": "insert minus_word",
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.minus_words_origin(\n\tminus_word_id, key_word_id, origin_weight)\n\tVALUES ($1, 0, 1);",
        "options": {
          "queryReplacement": "={{ $json.minus_word_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        176,
        -80
      ],
      "id": "ebd19e48-c031-4b0e-ac06-cb6463090c19",
      "name": "insert minus_words_origin",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT yandex_region\n\tFROM companies where company_id=$1;",
        "options": {
          "queryReplacement": "={{ $('When Executed by Another Workflow').item.json.company_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        64,
        -288
      ],
      "id": "993c1bf8-f618-4685-939e-862a51858235",
      "name": "get region",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"text-embedding-3-small\",\n  \"input\": \"{{$json.region}}\"\n}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 30000
        }
      },
      "id": "7e586be3-01cb-4fb1-985c-39da9d584273",
      "name": "HTTP: OpenAI Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1136,
        -224
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "V8R8KiZKXscJQ1sL",
          "name": "OpenAi account"
        }
      },
      "notes": "Creates an embedding for each candidate n-gram.\n- Set your OpenAI credential on this node.\n- Batch mode is possible later; this keeps it simple and explicit."
    },
    {
      "parameters": {
        "jsCode": "// === Code: build_vector_literal ===\n// INPUT:  HTTP response(s) from OpenAI embeddings (one per candidate)\n// OUTPUT: items: { vector: \"[float,...]\", idx, candidate, threshold }\n// PURPOSE: Convert embedding array into a Postgres vector literal string and\n//          carry candidate + threshold forward for alignment\n\nconst sourceAll = $('Loop Over Items1').all();\n\nconst out = $input.all().map((r, i) => {\n  // OpenAI HTTP node may put data in r.json.body.data or r.json.data depending on version\n  const emb = r.json?.body?.data?.[0]?.embedding ?? r.json?.data?.[0]?.embedding;\n  if (!Array.isArray(emb) || emb.length === 0) {\n    throw new Error('Embedding not found for item #' + i);\n  }\n  const vector = '[' + emb.map(Number).join(',') + ']';\n  const candidate = sourceAll[i]?.json?.region;\n  const threshold = sourceAll[i]?.json?.threshold;\n  return { json: { vector, idx: i, candidate, threshold,company_id:$('When Executed by Another Workflow').first().json.company_id } };\n});\n\nreturn out;"
      },
      "id": "e265dcd1-3de9-4c98-b51d-0fa5801ec68b",
      "name": "Code: build_vector_literal",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        -208
      ],
      "notes": "Convert embedding arrays into a pgvector literal (e.g., \"[0.1,0.2,...]\")."
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT v.id,  0 - (v.minus_word_embedding <#> $1::vector) AS similarity FROM minus_words v where company_id=$2 and 0 - (v.minus_word_embedding <#> $1::vector) > $3;",
        "options": {
          "queryReplacement": "={{$json.vector}},{{$json.company_id}},{{$json.threshold}}"
        }
      },
      "id": "579e8eb5-e7df-401c-8b27-55c65df770d3",
      "name": "Postgres: vector search",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        1584,
        -208
      ],
      "credentials": {
        "postgres": {
          "id": "4YkdFJcdTgzo9hkz",
          "name": "PGvector"
        }
      },
      "notes": "Looks up the nearest content phrase using pgvector (<#> = cosine distance if normalized). \n- Assumes table company_content(phrase text, phrase_embedding vector).\n- Returns top-1 match with similarity = -distance."
    },
    {
      "parameters": {
        "jsCode": "// Настройте имена полей под себя:\nconst INPUT_FIELD  = 'yandex_region'; // исходная строка с регионами\nconst OUTPUT_FIELD = 'region';         // имя поля в выходных элементах\n\nfunction parseCsvLine(line) {\n  const out = [];\n  let cur = '';\n  let inQuotes = false;\n\n  for (let i = 0; i < line.length; i++) {\n    const ch = line[i];\n    if (ch === '\"') {\n      if (inQuotes && line[i + 1] === '\"') { cur += '\"'; i++; }\n      else { inQuotes = !inQuotes; }\n    } else if (ch === ',' && !inQuotes) {\n      out.push(cur);\n      cur = '';\n    } else {\n      cur += ch;\n    }\n  }\n  out.push(cur);\n\n  return out.map(s => s.trim()).filter(s => s.length > 0);\n}\n\nconst out = [];\nfor (const item of $input.all()) {\n  const raw = String(item.json?.[INPUT_FIELD] ?? '').trim();\n  if (!raw) continue;\n\n  // приводим исходную строку к нижнему регистру\n  const rawLower = raw.toLowerCase();\n\n  const values = parseCsvLine(rawLower);\n  for (const v of values) {\n    out.push({ json: { [OUTPUT_FIELD]: v } });\n  }\n}\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        -288
      ],
      "id": "b5a47a15-f900-43be-a47a-72b3f057e547",
      "name": "get array of regions"
    },
    {
      "parameters": {
        "content": "тех долг - через Яндекс API дополнить всеми дочерними регионами. Возможно отдельная ветка если вся россия то просто удалить все гео минус слова",
        "height": 256,
        "width": 304
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        192,
        -400
      ],
      "id": "02898096-6425-4124-9550-04f93afda46e",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        688,
        -288
      ],
      "id": "a9d4d457-bc6d-486b-ab9c-126fb030c536",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "51e0acc4-f0bc-4c52-95c7-f6cae4a1159d",
              "name": "threshold",
              "value": 0.8,
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        480,
        -288
      ],
      "id": "f02ec305-7e73-4779-8b6d-59fe6b4cc363",
      "name": "set threshold"
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\nif (!Array.isArray(workflowData.ids)) workflowData.ids = [];\n\nconst added = [];\nfor (const item of $input.all()) {\n  if (item?.json?.id !== undefined && item?.json?.id !== null) {\n    workflowData.ids.push(item.json.id);\n    added.push(item.json.id);\n  }\n}\n\n// Строка вида ([...]) — безопасно формируем через JSON.stringify для строк/чисел\nconst resultString = '(' + JSON.stringify(added) + ')';\n\n// Возвращаем один элемент с полем result (строка)\nreturn [{ json: { ids_to_remove: resultString } }];"
      },
      "id": "aa9471c9-d897-445f-b163-77c0dfb43a43",
      "name": "collect ids",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1808,
        -208
      ],
      "notes": "Compares nearest match similarity with the threshold and marks pass/fail."
    },
    {
      "parameters": {
        "jsCode": "const workflowData = $getWorkflowStaticData('global');\n\nreturn workflowData.ids.map(minus_word_id => ({ json: { minus_word_id } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        -384
      ],
      "id": "85d22d6e-db0d-496c-acd9-2541682b07d8",
      "name": "get records to delete"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH del_child AS (\n  DELETE FROM minus_words_origin\n  WHERE minus_word_id = $1\n  RETURNING minus_word_id\n),\ndel_parent AS (\n  DELETE FROM minus_words\n  WHERE id = $1\n  RETURNING id\n)\nSELECT\n  (SELECT count(*) FROM del_child)  AS deleted_from_minus_words_origin,\n  (SELECT count(*) FROM del_parent) AS deleted_from_minus_words;",
        "options": {
          "queryReplacement": "={{ $json.minus_word_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1168,
        -448
      ],
      "id": "f5c53e55-1259-43c1-bda0-6e77ad062954",
      "name": "delete records",
      "credentials": {
        "postgres": {
          "id": "Hx2VFmUi5WO2K4QX",
          "name": "Postgres account 2"
        }
      }
    }
  ],
  "connections": {
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "get region",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "insert minus_word",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set company_id": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Mark_workwlow_started",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_workwlow_started": {
      "main": [
        [
          {
            "node": "Init total counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init total counter": {
      "main": [
        [
          {
            "node": "Get base minus_words",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get base minus_words": {
      "main": [
        [
          {
            "node": "set company_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "insert minus_word": {
      "main": [
        [
          {
            "node": "insert minus_words_origin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "insert minus_words_origin": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get region": {
      "main": [
        [
          {
            "node": "get array of regions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: OpenAI Embeddings": {
      "main": [
        [
          {
            "node": "Code: build_vector_literal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: build_vector_literal": {
      "main": [
        [
          {
            "node": "Postgres: vector search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres: vector search": {
      "main": [
        [
          {
            "node": "collect ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get array of regions": {
      "main": [
        [
          {
            "node": "set threshold",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "get records to delete",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP: OpenAI Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set threshold": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "collect ids": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get records to delete": {
      "main": [
        [
          {
            "node": "delete records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete records": {
      "main": [
        [
          {
            "node": "Mark_workflow_completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "company_id": 1,
          "root_execution_id": 74293
        }
      }
    ]
  },
  "versionId": "f59c9fe4-3d1d-4c92-aadd-0e2ed24b530f",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-15T16:12:00.035Z",
      "updatedAt": "2025-09-15T16:12:00.035Z",
      "role": "workflow:owner",
      "workflowId": "o5L3i8eq9JK9oLwL",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}