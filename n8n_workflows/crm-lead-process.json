{
  "createdAt": "2025-10-07T21:30:12.820Z",
  "updatedAt": "2025-10-09T12:43:27.954Z",
  "id": "d4D0Fp4pO6Ch7S7C",
  "name": "CRM lead process",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "c11cd095-1060-4c9c-87df-2a3c9d34deab",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "6b11411b-3ee6-4590-977a-3dbbd005d09a",
      "name": "Webhook",
      "webhookId": "c11cd095-1060-4c9c-87df-2a3c9d34deab"
    },
    {
      "parameters": {
        "operation": "update",
        "dataTableId": {
          "__rl": true,
          "value": "XlfQhVUBPeep3gvZ",
          "mode": "list",
          "cachedResultName": "site leads",
          "cachedResultUrl": "/projects/spKmbJLU4mvACXIB/datatables/XlfQhVUBPeep3gvZ"
        },
        "filters": {
          "conditions": [
            {
              "keyValue": "={{ $json.id }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "pending": "={{ false }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "utm_source",
              "displayName": "utm_source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "utm_medium",
              "displayName": "utm_medium",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "utm_campaign",
              "displayName": "utm_campaign",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "utm_term",
              "displayName": "utm_term",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "utm_content",
              "displayName": "utm_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "yclid",
              "displayName": "yclid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "etext",
              "displayName": "etext",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "referrer",
              "displayName": "referrer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "page_url",
              "displayName": "page_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "page_title",
              "displayName": "page_title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "ts_site_iso",
              "displayName": "ts_site_iso",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "ts_site",
              "displayName": "ts_site",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "pending",
              "displayName": "pending",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        816,
        -80
      ],
      "id": "9bf6585d-2a49-4b7a-953a-e45d873bc6d4",
      "name": "Update row(s)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b0dfc800-13f4-472f-aef1-ebd612ae2789",
              "leftValue": "matched",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        592,
        0
      ],
      "id": "f88b36e2-2d12-4410-a1bd-1b77e05ae514",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// ---------- helpers ----------\nfunction tryGetItems(nodeName) {\n  try { const arr = $items(nodeName, 0, 0); return Array.isArray(arr) ? arr : []; }\n  catch { return []; }\n}\n// универсальный парсер времени: число мс, строка с цифрами, ISO\nfunction toMs(v) {\n  if (v == null) return 0;\n  if (typeof v === 'number' && Number.isFinite(v)) return v;\n  if (typeof v === 'string') {\n    const s = v.trim();\n    if (/^\\d+$/.test(s)) {              // \"1728391023456\"\n      const n = parseInt(s, 10);\n      return Number.isFinite(n) ? n : 0;\n    }\n    const t = Date.parse(s);            // \"2025-10-08T00:27:00.123Z\"\n    return Number.isFinite(t) ? t : 0;\n  }\n  return 0;\n}\nfunction rowTs(row) {\n  // приоритет: ts_site (мс), иначе createdAt (ISO из Data Table)\n  return toMs(row.ts_site) || toMs(row.createdAt);\n}\nfunction iso(ms) { try { return new Date(ms).toISOString(); } catch { return null; } }\n\n// ---------- CRM payload ----------\nlet crm;\nconst wItems = tryGetItems('Webhook');  // переименуй, если нода называется иначе\nif (wItems.length) {\n  const w = wItems[0].json || {};\n  crm = typeof w.body === 'string' ? JSON.parse(w.body) : w;\n} else {\n  crm = typeof $json.body === 'string' ? JSON.parse($json.body) : $json;\n}\n\n// ---------- pending строки из Data Table ----------\nlet rows = tryGetItems('Get visitors').map(i => i.json); // переименуй, если нужно\nif (!rows.length) rows = $input.all().map(i => i.json);\n\n// ---------- окно и выбор ----------\nconst now = Date.now();\nconst WINDOW_MS = 10 * 60 * 1000; // ±10 минут (можно временно увеличить до 30 мин для диагностики)\n\nconst decorated = rows.map(r => {\n  const t = rowTs(r);\n  return {\n    id: r.id,\n    ts_num: t,\n    ts_readable: iso(t),\n    createdAt: r.createdAt || null,\n    ts_site_raw: r.ts_site ?? null,\n    delta_ms: Math.abs(t - now),\n    page_url: r.page_url || null,\n    pending: r.pending\n  };\n}).filter(d => d.ts_num > 0)\n  .sort((a, b) => a.delta_ms - b.delta_ms);\n\nconst inWindow = decorated.filter(d => d.delta_ms <= WINDOW_MS);\nconst best = inWindow[0] || null;\n\n// ---------- результат ----------\nif (best) {\n  const siteRow = rows.find(r => r.id === best.id) || {};\n  return [{\n    json: {\n      matched: true,\n      id: best.id,\n      ts_site: best.ts_num,\n      delta_ms: best.delta_ms,\n      site: siteRow,\n      crm,\n      debug: {\n        now_iso: iso(now),\n        window_ms: WINDOW_MS,\n        candidates_total: rows.length,\n        in_window: inWindow.length,\n        top3: decorated.slice(0,3)   // ближайшие 3 для проверки\n      }\n    }\n  }];\n} else {\n  return [{\n    json: {\n      matched: false,\n      reason: 'no_candidate_in_window',\n      crm,\n      debug: {\n        now_iso: iso(now),\n        window_ms: WINDOW_MS,\n        candidates_total: rows.length,\n        top5: decorated.slice(0,5)   // покажет почему не попали в окно (обычно ts_num=0)\n      }\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        384,
        0
      ],
      "id": "0280247b-21b3-403b-8366-050088c9a937",
      "name": "Compare the lead with last visitor"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "XlfQhVUBPeep3gvZ",
          "mode": "list",
          "cachedResultName": "site leads",
          "cachedResultUrl": "/projects/spKmbJLU4mvACXIB/datatables/XlfQhVUBPeep3gvZ"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "pending",
              "condition": "isTrue"
            }
          ]
        },
        "limit": 5
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        176,
        0
      ],
      "id": "78fd246c-1fe1-47a3-981d-237c516e655e",
      "name": "Get visitors"
    },
    {
      "parameters": {
        "content": "## CRM lead процесс\nСлушает вебхуки из CRM, при появлении нового лида - считывает последние 10 строк данных о посетителях и матчит с ближайшим по времени. \n\nTODO - сообщить в аналитику, обогатить данные по yclid и отправить обратно обновленные данные в CRM",
        "height": 208,
        "width": 736
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -16,
        -256
      ],
      "typeVersion": 1,
      "id": "be6a9327-4ca3-4d9c-bd0f-15b8304becf7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Updates a Customer/Lead in AlfaCRM by entity_id (coming from CRM webhook)\n\nasync function login(host, email, api_key) {\n  const res = await this.helpers.request({\n    method: 'POST',\n    uri: `https://${host}/v2api/auth/login`,\n    headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },\n    body: { email, api_key },\n    json: true,\n    gzip: true,\n    timeout: 15000,\n  });\n  if (!res?.token) throw new Error('AlfaCRM: no token in auth response');\n  return res.token;\n}\n\nfunction getCachedTokenKey(host, email) {\n  return `alfacrm_token_${host}_${email}`;\n}\n\nasync function ensureToken(self, host, email, api_key) {\n  const data = self.getWorkflowStaticData('node');\n  const key = getCachedTokenKey(host, email);\n  const now = Date.now();\n  if (data[key]?.token && data[key].exp > now) return data[key].token;\n  const token = await login(host, email, api_key);\n  data[key] = { token, exp: now + 55 * 60 * 1000 }; // ~55 min cache\n  return token;\n}\n\nasync function callUpdate(self, { host, token, branchId, entity_id, payload }) {\n  return await self.helpers.request({\n    method: 'POST',\n    uri: `https://${host}/v2api/${branchId}/customer/update`,\n    qs: { id: entity_id },\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-ALFACRM-TOKEN': token,\n    },\n    body: payload,\n    json: true,\n    gzip: true,\n    timeout: 20000,\n  });\n}\n\nfunction buildPayload(update, currentNote) {\n  const payload = {};\n  if (Array.isArray(update.lead_status_ids)) payload.lead_status_ids = update.lead_status_ids;\n  if (typeof update.lead_source_id === 'number') payload.lead_source_id = update.lead_source_id;\n  if (update.custom_value_json && typeof update.custom_value_json === 'object') payload.custom_value_json = update.custom_value_json;\n  if (update.custom_plain && typeof update.custom_plain === 'object') Object.assign(payload, update.custom_plain);\n  if (update.note_append) payload.note = (currentNote || '') + (currentNote ? '\\n' : '') + String(update.note_append);\n  return payload;\n}\n\nasync function callGetCustomer(self, { host, token, branchId, entity_id }) {\n  const res = await self.helpers.request({\n    method: 'POST',\n    uri: `https://${host}/v2api/${branchId}/customer/index`,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-ALFACRM-TOKEN': token,\n    },\n    body: { id: entity_id, page: 0 },\n    json: true,\n    gzip: true,\n    timeout: 15000,\n  });\n  return Array.isArray(res?.items) ? res.items.find(i => i.id === entity_id) : null;\n}\n\nconst input = $json;\nif (!input.alfacrm?.host || !input.alfacrm?.email || !input.alfacrm?.api_key)\n  throw new Error('Provide alfacrm.host, alfacrm.email, alfacrm.api_key');\nif (typeof input.entity_id !== 'number')\n  throw new Error('Provide numeric entity_id');\nif (!input.alfacrm.branchId)\n  throw new Error('Provide alfacrm.branchId');\n\nconst { host, email, api_key, branchId } = input.alfacrm;\nconst entity_id = input.entity_id;\nconst update = input.update || {};\n\nlet token = await ensureToken(this, host, email, api_key);\n\nlet existing = null;\ntry {\n  existing = await callGetCustomer(this, { host, token, branchId, entity_id });\n} catch (_) {}\n\nconst payload = buildPayload(update, existing?.note);\n\ntry {\n  const res = await callUpdate(this, { host, token, branchId, entity_id, payload });\n  return [{ json: { success: true, response: res, sent: payload } }];\n} catch (err) {\n  const status = err?.statusCode || err?.response?.statusCode;\n  if (status === 401) {\n    token = await login(host, email, api_key);\n    const data = this.getWorkflowStaticData('node');\n    const key = getCachedTokenKey(host, email);\n    data[key] = { token, exp: Date.now() + 55 * 60 * 1000 };\n    const res = await callUpdate(this, { host, token, branchId, entity_id, payload });\n    return [{ json: { success: true, response: res, sent: payload, retried: true } }];\n  }\n  throw new Error(`AlfaCRM update failed: ${JSON.stringify(err?.response?.body || err)}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1168,
        96
      ],
      "id": "f120cad5-2419-4568-b5e6-cdbf13ef4ee7",
      "name": "Code in JavaScript"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get visitors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Update row(s)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare the lead with last visitor": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get visitors": {
      "main": [
        [
          {
            "node": "Compare the lead with last visitor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row(s)": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "f99da054-d561-46a5-910f-d6ff62b058bc",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-10-07T21:30:12.820Z",
      "updatedAt": "2025-10-07T21:30:12.820Z",
      "role": "workflow:owner",
      "workflowId": "d4D0Fp4pO6Ch7S7C",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}