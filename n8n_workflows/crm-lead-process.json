{
  "createdAt": "2025-10-07T21:30:12.820Z",
  "updatedAt": "2025-10-12T15:01:24.609Z",
  "id": "d4D0Fp4pO6Ch7S7C",
  "name": "CRM lead process",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "c11cd095-1060-4c9c-87df-2a3c9d34deab",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        192,
        0
      ],
      "id": "6b11411b-3ee6-4590-977a-3dbbd005d09a",
      "name": "Webhook",
      "webhookId": "c11cd095-1060-4c9c-87df-2a3c9d34deab"
    },
    {
      "parameters": {
        "operation": "update",
        "dataTableId": {
          "__rl": true,
          "value": "XlfQhVUBPeep3gvZ",
          "mode": "list",
          "cachedResultName": "site leads",
          "cachedResultUrl": "/projects/spKmbJLU4mvACXIB/datatables/XlfQhVUBPeep3gvZ"
        },
        "filters": {
          "conditions": [
            {
              "keyValue": "={{ $json.id }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "pending": "={{ false }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "utm_source",
              "displayName": "utm_source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "utm_medium",
              "displayName": "utm_medium",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "utm_campaign",
              "displayName": "utm_campaign",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "utm_term",
              "displayName": "utm_term",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "utm_content",
              "displayName": "utm_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "yclid",
              "displayName": "yclid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "etext",
              "displayName": "etext",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "referrer",
              "displayName": "referrer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "page_url",
              "displayName": "page_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "page_title",
              "displayName": "page_title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "ts_site_iso",
              "displayName": "ts_site_iso",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "ts_site",
              "displayName": "ts_site",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "pending",
              "displayName": "pending",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        816,
        0
      ],
      "id": "9bf6585d-2a49-4b7a-953a-e45d873bc6d4",
      "name": "Update row(s)"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "XlfQhVUBPeep3gvZ",
          "mode": "list",
          "cachedResultName": "site leads",
          "cachedResultUrl": "/projects/spKmbJLU4mvACXIB/datatables/XlfQhVUBPeep3gvZ"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "pending",
              "condition": "isTrue"
            }
          ]
        },
        "returnAll": true
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        416,
        0
      ],
      "id": "78fd246c-1fe1-47a3-981d-237c516e655e",
      "name": "Get visitors"
    },
    {
      "parameters": {
        "content": "## CRM lead процесс\nСлушает вебхуки из CRM, при появлении нового лида - считывает последние 10 строк данных о посетителях и матчит с последней записью. Отсылает yclid_id и etext обратно в CRM\n\nTODO - сообщить в аналитику; сделать if если нет свежих записей; обогатить UTM-данными",
        "height": 128,
        "width": 1712
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -16,
        -256
      ],
      "typeVersion": 1,
      "id": "be6a9327-4ca3-4d9c-bd0f-15b8304becf7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "/**\n * AlfaCRM update by entity_id (n8n \"Code (JavaScript)\" node)\n * — логин → (опционально) чтение клиента → апдейт клиента\n */\n\n// ---------- helpers ----------\nconst toNum = (v) => {\n  if (v === undefined || v === null) return undefined;\n  const n = Number(String(v).trim());\n  return Number.isFinite(n) ? n : undefined;\n};\nfunction first(...vals) {\n  for (const v of vals) {\n    if (v !== undefined && v !== null && String(v).trim() !== '') return String(v).trim();\n  }\n  return undefined;\n}\nfunction asObj(maybe) {\n  if (!maybe) return {};\n  if (typeof maybe === 'object') return maybe;\n  if (typeof maybe === 'string') {\n    try { return JSON.parse(maybe); } catch { return {}; }\n  }\n  return {};\n}\n// Достаём JSON из другого узла (работает в режиме \"Run Once For All Items\")\nfunction fromNode(nodeName) {\n  try { return $items(nodeName, 0, 0)?.json ?? {}; } catch { return {}; }\n}\n\nasync function http(req) { return await this.helpers.httpRequest(req); }\n\nasync function login(self, { host, email, api_key, x_app_key }) {\n  const headers = { 'Accept': 'application/json', 'Content-Type': 'application/json' };\n  if (x_app_key) headers['X-APP-KEY'] = x_app_key;\n  const res = await http.call(self, {\n    method: 'POST',\n    url: `https://${host}/v2api/auth/login`,\n    headers,\n    body: { email, api_key },\n    json: true, gzip: true, timeout: 15000,\n  });\n  if (!res?.token) throw new Error('AlfaCRM: no token in auth response');\n  return res.token;\n}\n\nasync function getCustomer(self, { host, token, branchId, entity_id, x_app_key }) {\n  const headers = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'X-ALFACRM-TOKEN': token,\n  };\n  if (x_app_key) headers['X-APP-KEY'] = x_app_key;\n  const res = await http.call(self, {\n    method: 'POST',\n    url: `https://${host}/v2api/${branchId}/customer/index`,\n    headers,\n    body: { id: entity_id, page: 0 },\n    json: true, gzip: true, timeout: 15000,\n  });\n  return Array.isArray(res?.items) ? res.items.find(i => Number(i.id) === Number(entity_id)) : null;\n}\n\nasync function updateCustomer(self, { host, token, branchId, entity_id, payload, x_app_key }) {\n  const headers = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'X-ALFACRM-TOKEN': token,\n  };\n  if (x_app_key) headers['X-APP-KEY'] = x_app_key;\n  return await http.call(self, {\n    method: 'POST',\n    url: `https://${host}/v2api/${branchId}/customer/update`,\n    qs: { id: entity_id },\n    headers,\n    body: payload,\n    json: true, gzip: true, timeout: 20000,\n  });\n}\n\nfunction buildPayload(update, currentNote) {\n  const payload = {};\n  if (Array.isArray(update.lead_status_ids)) payload.lead_status_ids = update.lead_status_ids;\n  if (typeof update.lead_source_id === 'number') payload.lead_source_id = update.lead_source_id;\n\n  // custom_value_json — всегда строкой\n  if (update.custom_value_json && typeof update.custom_value_json === 'object') {\n    payload.custom_value_json = JSON.stringify(update.custom_value_json);\n  } else if (typeof update.custom_value_json === 'string') {\n    payload.custom_value_json = update.custom_value_json;\n  }\n\n  // только custom_* и как строки\n  if (update.custom_plain && typeof update.custom_plain === 'object') {\n    for (const [k, v] of Object.entries(update.custom_plain)) {\n      if (v === undefined || v === null) continue;\n      if (!k.startsWith('custom_')) continue;\n      if (payload[k] === undefined) payload[k] = String(v);\n    }\n  }\n\n  if (update.note_append) {\n    payload.note = (currentNote || '') + (currentNote ? '\\n' : '') + String(update.note_append);\n  }\n  return payload;\n}\n\n// ---------- input normalization ----------\nconst input = $json;\nif (!input?.alfacrm?.host || !input?.alfacrm?.email || !input?.alfacrm?.api_key) {\n  throw new Error('Provide alfacrm.host, alfacrm.email, alfacrm.api_key');\n}\n\n// распарсим возможные строки\nconst bodyObj   = asObj(input.body);\nconst paramsObj = asObj(input.params);\nconst queryObj  = asObj(input.query);\n\n// плюс попробуем достать из других нод\nconst jWebhook      = fromNode('Webhook');\nconst jVisitors     = fromNode('Get visitors');\nconst jLastVisitor  = fromNode('Get the last visitor');\nconst jUpdateRows   = fromNode('Update row(s)');\nconst jCredentials  = fromNode('Set credentials');\n\n// branchId: из текущего item, либо из webhook/body\nconst branchId =\n  toNum(input.alfacrm.branchId) ??\n  toNum(input.branch_id) ??\n  toNum(bodyObj.branch_id) ??\n  toNum(asObj(jWebhook.body).branch_id);\n\nif (!branchId) throw new Error('Provide alfacrm.branchId or body.branch_id');\n\n// entity_id: из текущего item + из других нод\nconst entity_id = \n  toNum(input.entity_id) ??\n  toNum(input.customerId) ??\n  toNum(bodyObj.entity_id) ??\n  toNum(paramsObj.entity_id) ??\n  toNum(queryObj.entity_id) ??\n  // из Webhook (часто здесь)\n  toNum(asObj(jWebhook.body).entity_id) ??\n  toNum(jWebhook.entity_id) ??\n  // вдруг где-то лежит просто id\n  toNum(bodyObj.id) ?? toNum(paramsObj.id) ?? toNum(queryObj.id) ??\n  toNum(jUpdateRows.entity_id) ??\n  toNum(jLastVisitor.entity_id) ??\n  toNum(jVisitors.entity_id) ??\n  toNum(jCredentials.entity_id);\n\nif (!entity_id) {\n  console.log('ENTITY_ID CANDIDATES:', {\n    'input.entity_id': input.entity_id,\n    'input.customerId': input.customerId,\n    'body.entity_id': bodyObj.entity_id,\n    'params.entity_id': paramsObj.entity_id,\n    'query.entity_id': queryObj.entity_id,\n    'webhook.body.entity_id': asObj(jWebhook.body).entity_id,\n    'webhook.entity_id': jWebhook.entity_id,\n    'updateRows.entity_id': jUpdateRows.entity_id,\n    'lastVisitor.entity_id': jLastVisitor.entity_id,\n    'visitors.entity_id': jVisitors.entity_id,\n    'credentials.entity_id': jCredentials.entity_id,\n  });\n  throw new Error('Provide numeric entity_id');\n}\n\nconst { host, email, api_key, x_app_key } = input.alfacrm;\nconst update = input.update || {};\n\n// ---------- inferred yclid/etext ----------\nconst inferred_yclid = first(\n  update?.custom_plain?.custom_yclid,\n  input.custom_yclid, input.yclid,\n  bodyObj.custom_yclid, bodyObj.yclid,\n  asObj(jWebhook.body).custom_yclid, asObj(jWebhook.body).yclid\n);\nconst inferred_etext = first(\n  update?.custom_plain?.custom_etext,\n  input.custom_etext, input.etext,\n  bodyObj.custom_etext, bodyObj.etext,\n  asObj(jWebhook.body).custom_etext, asObj(jWebhook.body).etext\n);\nupdate.custom_plain = Object.assign({}, update.custom_plain);\nif (inferred_yclid && !update.custom_plain.custom_yclid) update.custom_plain.custom_yclid = inferred_yclid;\nif (inferred_etext && !update.custom_plain.custom_etext) update.custom_plain.custom_etext = inferred_etext;\n\n// ---------- flow ----------\nlet token = await login(this, { host, email, api_key, x_app_key });\n\nlet existing = null;\ntry { existing = await getCustomer(this, { host, token, branchId, entity_id, x_app_key }); } catch {}\n\nconst payload = buildPayload(update, existing?.note);\n\ntry {\n  const res = await updateCustomer(this, { host, token, branchId, entity_id, payload, x_app_key });\n  return [{ json: { success: true, response: res, sent: payload, entity_id, branchId } }];\n} catch (err) {\n  const status = err?.statusCode || err?.response?.statusCode;\n  if (status === 401) {\n    token = await login(this, { host, email, api_key, x_app_key });\n    const res2 = await updateCustomer(this, { host, token, branchId, entity_id, payload, x_app_key });\n    return [{ json: { success: true, response: res2, sent: payload, entity_id, branchId, retried: true } }];\n  }\n  throw new Error(`AlfaCRM update failed: ${JSON.stringify(err?.response?.body || err)}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1536,
        -64
      ],
      "id": "f120cad5-2419-4568-b5e6-cdbf13ef4ee7",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Берем массив всех pending\nconst items = $input.all();\n\n// Сортируем по id (или по createdAt, если есть)\nitems.sort((a, b) => b.json.id - a.json.id);\n\n// Возвращаем только самую свежую\nreturn [items[0]];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        0
      ],
      "id": "ca0796b3-422f-41d6-800c-6e9059b0dfb2",
      "name": "Get the last visitor"
    },
    {
      "parameters": {
        "jsCode": "// ---------- helpers ----------\nfunction tryGetItems(nodeName) {\n  try { const arr = $items(nodeName, 0, 0); return Array.isArray(arr) ? arr : []; }\n  catch { return []; }\n}\n// универсальный парсер времени: число мс, строка с цифрами, ISO\nfunction toMs(v) {\n  if (v == null) return 0;\n  if (typeof v === 'number' && Number.isFinite(v)) return v;\n  if (typeof v === 'string') {\n    const s = v.trim();\n    if (/^\\d+$/.test(s)) {              // \"1728391023456\"\n      const n = parseInt(s, 10);\n      return Number.isFinite(n) ? n : 0;\n    }\n    const t = Date.parse(s);            // \"2025-10-08T00:27:00.123Z\"\n    return Number.isFinite(t) ? t : 0;\n  }\n  return 0;\n}\nfunction rowTs(row) {\n  // приоритет: ts_site (мс), иначе createdAt (ISO из Data Table)\n  return toMs(row.ts_site) || toMs(row.createdAt);\n}\nfunction iso(ms) { try { return new Date(ms).toISOString(); } catch { return null; } }\n\n// ---------- CRM payload ----------\nlet crm;\nconst wItems = tryGetItems('Webhook');  // переименуй, если нода называется иначе\nif (wItems.length) {\n  const w = wItems[0].json || {};\n  crm = typeof w.body === 'string' ? JSON.parse(w.body) : w;\n} else {\n  crm = typeof $json.body === 'string' ? JSON.parse($json.body) : $json;\n}\n\n// ---------- pending строки из Data Table ----------\nlet rows = tryGetItems('Get visitors').map(i => i.json); // переименуй, если нужно\nif (!rows.length) rows = $input.all().map(i => i.json);\n\n// ---------- окно и выбор ----------\nconst now = Date.now();\nconst WINDOW_MS = 10 * 60 * 1000; // ±10 минут (можно временно увеличить до 30 мин для диагностики)\n\nconst decorated = rows.map(r => {\n  const t = rowTs(r);\n  return {\n    id: r.id,\n    ts_num: t,\n    ts_readable: iso(t),\n    createdAt: r.createdAt || null,\n    ts_site_raw: r.ts_site ?? null,\n    delta_ms: Math.abs(t - now),\n    page_url: r.page_url || null,\n    pending: r.pending\n  };\n}).filter(d => d.ts_num > 0)\n  .sort((a, b) => a.delta_ms - b.delta_ms);\n\nconst inWindow = decorated.filter(d => d.delta_ms <= WINDOW_MS);\nconst best = inWindow[0] || null;\n\n// ---------- результат ----------\nif (best) {\n  const siteRow = rows.find(r => r.id === best.id) || {};\n  return [{\n    json: {\n      matched: true,\n      id: best.id,\n      ts_site: best.ts_num,\n      delta_ms: best.delta_ms,\n      site: siteRow,\n      crm,\n      debug: {\n        now_iso: iso(now),\n        window_ms: WINDOW_MS,\n        candidates_total: rows.length,\n        in_window: inWindow.length,\n        top3: decorated.slice(0,3)   // ближайшие 3 для проверки\n      }\n    }\n  }];\n} else {\n  return [{\n    json: {\n      matched: false,\n      reason: 'no_candidate_in_window',\n      crm,\n      debug: {\n        now_iso: iso(now),\n        window_ms: WINDOW_MS,\n        candidates_total: rows.length,\n        top5: decorated.slice(0,5)   // покажет почему не попали в окно (обычно ts_num=0)\n      }\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        192
      ],
      "id": "0280247b-21b3-403b-8366-050088c9a937",
      "name": "Compare the lead with the visitor"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1088,
        -64
      ],
      "id": "e7a7a798-e66a-43cd-839e-c1a9ac97de8a",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "function toUnixSeconds(dt) {\n  const s = String(dt ?? '').trim();\n  if (!s) return Math.floor(Date.now() / 1000);\n  if (/^\\d+$/.test(s)) return Number(s);\n  const t = Date.parse(s);\n  return Number.isFinite(t)\n    ? Math.floor(t / 1000)\n    : Math.floor(Date.now() / 1000);\n}\n\nfunction toDigitsString(v) {\n  const s = String(v ?? '').trim();\n  if (!s) return '';\n  // используем только цифры, исключаем всё остальное\n  return s.replace(/\\D/g, '');\n}\n\nconst input = $json || {};\nconst counterId = input.counterId;\nconst target = String(input.target ?? '').trim();\nconst yclidRaw = input.yclid ?? input.yclid_id;\nconst etext = String(input.etext ?? '').trim();\n\nif (!counterId) throw new Error('counterId is required');\nif (!target) throw new Error('target is required');\n\nconst yclid = toDigitsString(yclidRaw);\nif (!yclid) throw new Error('yclid is required and must be digits only');\n\n// здесь обновлено: гарантируем целые секунды\nconst dateUnix = Math.floor(Number(input.datetime || Date.now() / 1000));\n\n// CSV\nconst headers = ['Yclid', 'Target', 'DateTime'];\nconst row = [yclid, target, String(dateUnix)];\nconst csv =\n  headers.join(',') +\n  '\\n' +\n  row.map((v) => `\"${String(v).replace(/\"/g, '\"\"')}\"`).join(',');\n\nconst data = Buffer.from(csv, 'utf8').toString('base64');\n\nreturn [\n  {\n    json: {\n      counterId,\n      comment: etext ? `etl:${etext}` : undefined,\n    },\n    binary: {\n      file: {\n        data,\n        fileName: 'offline-conv.csv',\n        mimeType: 'text/csv',\n      },\n    },\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1536,
        432
      ],
      "id": "2426a3d8-fec0-44c7-9a54-d174fd4e5e40",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"alfacrm\": {\n    \"host\": \"kiberonesaratov.s20.online\",\n    \"email\": \"antonkarzhavin1@yandex.ru\",\n    \"api_key\": \"656b9709-9547-11f0-b9b8-3cecefbdd1ae\",\n  }\n}",
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1312,
        -64
      ],
      "id": "8d7cadfb-2633-4768-9165-abf9a8e2553a",
      "name": "Set CRM data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7d2e6e6d-c3ec-459c-a0aa-60f6f1392bee",
              "name": "counterId",
              "value": "85745759",
              "type": "string"
            },
            {
              "id": "133b3309-fde4-4154-9af7-a710b86e3162",
              "name": "target",
              "value": "473672120",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1312,
        208
      ],
      "id": "c986603b-a0b6-4101-b682-3b315accbb79",
      "name": "Set Metrica data"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api-metrika.yandex.net/management/v1/counter/85745759/offline_conversions/upload",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "OAuth y0__xCI47u1CBiq4zog0YyG0hR1z7e64gJ-hZLEalVNHnDN1VhYUQ"
            }
          ]
        },
        "sendBody": true,
        "contentType": "=multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1728,
        432
      ],
      "id": "8e322616-82e5-4920-8bf7-2b6697192fc2",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Берём первый входной item\nconst item = $input.first();\n\n// Проверяем, что есть бинарь под ключом \"file\"\nif (!item.binary || !item.binary.file) {\n  throw new Error('Нет бинаря \"file\" на входе. Проверь цепочку и имя бинарного свойства.');\n}\n\nconst b = item.binary.file;\nconst filename = b.fileName || 'offline-conv.csv';\nconst mime = b.mimeType || 'text/csv';\nconst fileBuf = Buffer.from(b.data, 'base64');\n\n// Генерим boundary и части тела\nconst boundary = '----n8nFormBoundary' + Date.now();\nconst pre = Buffer.from(\n  `--${boundary}\\r\\n` +\n  `Content-Disposition: form-data; name=\"file\"; filename=\"${filename}\"\\r\\n` +\n  `Content-Type: ${mime}\\r\\n\\r\\n`,\n  'utf8'\n);\nconst post = Buffer.from(`\\r\\n--${boundary}--\\r\\n`, 'utf8');\n\n// Финальное тело\nconst bodyBuf = Buffer.concat([pre, fileBuf, post]);\n\nreturn [\n  {\n    json: { boundary },     // передадим в следующую ноду\n    binary: {\n      payload: {\n        data: bodyBuf.toString('base64'),\n        fileName: 'multipart.bin',\n        mimeType: 'application/octet-stream',\n      }\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1552,
        592
      ],
      "id": "13d31b80-c2a5-4226-8a39-b8a5a78d4f09",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "url": "=https://mc.yandex.ru/watch/{{$json.counterId}}?page-url={{$json.page_url}}&browser-info=et:custom;rn={{$json.createdAt || Date.now()}};site-info=goal:crm_lead",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "n8n-offline-conversion"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1536,
        208
      ],
      "id": "a606f22d-0a86-48d6-b94a-5ae3fc982b46",
      "name": "HTTP Request1"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get visitors",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get visitors": {
      "main": [
        [
          {
            "node": "Get the last visitor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row(s)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get the last visitor": {
      "main": [
        [
          {
            "node": "Update row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare the lead with the visitor": {
      "main": [
        []
      ]
    },
    "Code in JavaScript": {
      "main": [
        []
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Set Metrica data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set CRM data": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Metrica data": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        []
      ]
    },
    "HTTP Request1": {
      "main": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-main-production-4310.up.railway.app",
            "user-agent": "GuzzleHttp/7",
            "content-length": "604",
            "content-type": "application/json",
            "x-forwarded-for": "5.182.6.225",
            "x-forwarded-host": "n8n-main-production-4310.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/europe-west4-drams3a",
            "x-railway-request-id": "bHKqXKbGSASnHzGqYqdHTg",
            "x-real-ip": "5.182.6.225",
            "x-request-start": "1760081972455",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "branch_id": 1,
            "event": "create",
            "entity": "Customer",
            "entity_id": 19377,
            "fields_old": [],
            "fields_new": {
              "dob": "2020-10-29",
              "name": "Webhook",
              "note": "",
              "id_no": "",
              "b_date": "2025-10-10 11:39:30",
              "e_date": "2030-12-31",
              "barcode": "",
              "is_study": 0,
              "id_issued": "",
              "branch_ids": [
                1
              ],
              "company_id": null,
              "created_at": "2025-10-10 07:39:30",
              "legal_name": "webhook 15",
              "legal_type": 1,
              "lead_source_id": "8",
              "lead_status_id": "",
              "contact_contacts": [
                "+7(867)856-86-58"
              ],
              "custom_value_json": "{\"16\":\"\",\"12\":\"\",\"13\":\"\",\"11\":\"\",\"14\":\"\",\"15\":\"\"}"
            },
            "fields_rel": [],
            "user_id": null,
            "datetime": "2025-10-10 11:39:30"
          },
          "webhookUrl": "https://n8n-main-production-4310.up.railway.app/webhook/c11cd095-1060-4c9c-87df-2a3c9d34deab",
          "executionMode": "production"
        }
      }
    ],
    "Get visitors": [
      {
        "json": {
          "id": 34,
          "createdAt": "2025-10-09T14:38:47.978Z",
          "updatedAt": "2025-10-09T14:38:47.978Z",
          "utm_source": "",
          "utm_medium": "",
          "utm_campaign": "",
          "utm_term": "",
          "utm_content": "",
          "yclid": "10713516624003203071",
          "etext": "2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293",
          "referrer": "https://ya.ru/",
          "page_url": "https://saratov-okt.kiber-one.com/?etext=2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293&yclid=10713516624003203071",
          "page_title": "KIBERone — IT-школа программирования для детей в Саратове",
          "ts_site_iso": "2025-10-09T14:38:47.959Z",
          "ts_site": 1760020727959,
          "pending": true
        }
      },
      {
        "json": {
          "id": 21,
          "createdAt": "2025-10-08T08:46:49.177Z",
          "updatedAt": "2025-10-08T08:46:49.177Z",
          "utm_source": "",
          "utm_medium": "",
          "utm_campaign": "",
          "utm_term": "",
          "utm_content": "",
          "yclid": "10713516624003203071",
          "etext": "2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293",
          "referrer": "https://ya.ru/",
          "page_url": "https://saratov-okt.kiber-one.com/?etext=2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293&yclid=10713516624003203071",
          "page_title": "KIBERone — IT-школа программирования для детей в Саратове",
          "ts_site_iso": "2025-10-08T08:46:49.114Z",
          "ts_site": 1759913209114,
          "pending": true
        }
      },
      {
        "json": {
          "id": 30,
          "createdAt": "2025-10-09T05:04:23.231Z",
          "updatedAt": "2025-10-09T05:04:23.231Z",
          "utm_source": "",
          "utm_medium": "",
          "utm_campaign": "",
          "utm_term": "",
          "utm_content": "",
          "yclid": "12665599783792279551",
          "etext": "",
          "referrer": "https://yandex.ru/",
          "page_url": "https://saratov-okt.kiber-one.com/?yclid=12665599783792279551",
          "page_title": "KIBERone — IT-школа программирования для детей в Саратове",
          "ts_site_iso": "2025-10-09T05:04:23.151Z",
          "ts_site": 1759986263151,
          "pending": true
        }
      },
      {
        "json": {
          "id": 36,
          "createdAt": "2025-10-09T14:41:40.997Z",
          "updatedAt": "2025-10-09T14:41:40.997Z",
          "utm_source": "",
          "utm_medium": "",
          "utm_campaign": "",
          "utm_term": "",
          "utm_content": "",
          "yclid": "10713516624003203071",
          "etext": "2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293",
          "referrer": "https://ya.ru/",
          "page_url": "https://saratov-okt.kiber-one.com/?etext=2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293&yclid=10713516624003203071",
          "page_title": "KIBERone — IT-школа программирования для детей в Саратове",
          "ts_site_iso": "2025-10-09T14:41:40.972Z",
          "ts_site": 1760020900972,
          "pending": true
        }
      },
      {
        "json": {
          "id": 47,
          "createdAt": "2025-10-10T07:39:21.068Z",
          "updatedAt": "2025-10-10T07:39:21.068Z",
          "utm_source": "",
          "utm_medium": "",
          "utm_campaign": "",
          "utm_term": "",
          "utm_content": "",
          "yclid": "10713516624003203071",
          "etext": "2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293",
          "referrer": "https://ya.ru/",
          "page_url": "https://saratov-okt.kiber-one.com/?etext=2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293&yclid=10713516624003203071",
          "page_title": "KIBERone — IT-школа программирования для детей в Саратове",
          "ts_site_iso": "2025-10-10T07:39:21.034Z",
          "ts_site": 1760081961034,
          "pending": true
        }
      }
    ],
    "Get the last visitor": [
      {
        "json": {
          "id": 47,
          "createdAt": "2025-10-10T07:39:21.068Z",
          "updatedAt": "2025-10-10T07:39:21.068Z",
          "utm_source": "",
          "utm_medium": "",
          "utm_campaign": "",
          "utm_term": "",
          "utm_content": "",
          "yclid": "10713516624003203071",
          "etext": "2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293",
          "referrer": "https://ya.ru/",
          "page_url": "https://saratov-okt.kiber-one.com/?etext=2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293&yclid=10713516624003203071",
          "page_title": "KIBERone — IT-школа программирования для детей в Саратове",
          "ts_site_iso": "2025-10-10T07:39:21.034Z",
          "ts_site": 1760081961034,
          "pending": true
        }
      }
    ],
    "Update row(s)": [
      {
        "json": {
          "id": 47,
          "createdAt": "2025-10-10T07:39:21.068Z",
          "updatedAt": "2025-10-10T07:39:32.997Z",
          "utm_source": "",
          "utm_medium": "",
          "utm_campaign": "",
          "utm_term": "",
          "utm_content": "",
          "yclid": "10713516624003203071",
          "etext": "2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293",
          "referrer": "https://ya.ru/",
          "page_url": "https://saratov-okt.kiber-one.com/?etext=2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293&yclid=10713516624003203071",
          "page_title": "KIBERone — IT-школа программирования для детей в Саратове",
          "ts_site_iso": "2025-10-10T07:39:21.034Z",
          "ts_site": 1760081961034,
          "pending": false
        }
      }
    ],
    "Merge": [
      {
        "json": {
          "headers": {
            "host": "n8n-main-production-4310.up.railway.app",
            "user-agent": "GuzzleHttp/7",
            "content-length": "604",
            "content-type": "application/json",
            "x-forwarded-for": "5.182.6.225",
            "x-forwarded-host": "n8n-main-production-4310.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/europe-west4-drams3a",
            "x-railway-request-id": "bHKqXKbGSASnHzGqYqdHTg",
            "x-real-ip": "5.182.6.225",
            "x-request-start": "1760081972455",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "branch_id": 1,
            "event": "create",
            "entity": "Customer",
            "entity_id": 19377,
            "fields_old": [],
            "fields_new": {
              "dob": "2020-10-29",
              "name": "Webhook",
              "note": "",
              "id_no": "",
              "b_date": "2025-10-10 11:39:30",
              "e_date": "2030-12-31",
              "barcode": "",
              "is_study": 0,
              "id_issued": "",
              "branch_ids": [
                1
              ],
              "company_id": null,
              "created_at": "2025-10-10 07:39:30",
              "legal_name": "webhook 15",
              "legal_type": 1,
              "lead_source_id": "8",
              "lead_status_id": "",
              "contact_contacts": [
                "+7(867)856-86-58"
              ],
              "custom_value_json": "{\"16\":\"\",\"12\":\"\",\"13\":\"\",\"11\":\"\",\"14\":\"\",\"15\":\"\"}"
            },
            "fields_rel": [],
            "user_id": null,
            "datetime": "2025-10-10 11:39:30"
          },
          "webhookUrl": "https://n8n-main-production-4310.up.railway.app/webhook/c11cd095-1060-4c9c-87df-2a3c9d34deab",
          "executionMode": "production",
          "id": 47,
          "createdAt": "2025-10-10T07:39:21.068Z",
          "updatedAt": "2025-10-10T07:39:32.997Z",
          "utm_source": "",
          "utm_medium": "",
          "utm_campaign": "",
          "utm_term": "",
          "utm_content": "",
          "yclid": "10713516624003203071",
          "etext": "2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293",
          "referrer": "https://ya.ru/",
          "page_url": "https://saratov-okt.kiber-one.com/?etext=2202.G4kc2nnWttz3H8DWdILwW3wpSLrgpH-7qQx_ynD2nAtQr0rgweSNmFOGnoJnsEb7z7hUYSi41VzYTpfd7u1pmu0oC8W-xcaTQmjNvVdwbdxsb3V1dnp3eHViZGZmdnl3.126083e535921c7a944759ae334959fc6df6f293&yclid=10713516624003203071",
          "page_title": "KIBERone — IT-школа программирования для детей в Саратове",
          "ts_site_iso": "2025-10-10T07:39:21.034Z",
          "ts_site": 1760081961034,
          "pending": false
        },
        "binary": {}
      }
    ]
  },
  "versionId": "f7dced85-0b06-4eba-afa7-ce4d847baa38",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-10-07T21:30:12.820Z",
      "updatedAt": "2025-10-07T21:30:12.820Z",
      "role": "workflow:owner",
      "workflowId": "d4D0Fp4pO6Ch7S7C",
      "projectId": "spKmbJLU4mvACXIB"
    }
  ],
  "tags": []
}